{"meta":{"title":"尼采般地抒情","subtitle":"wztlink1013","description":"永远不要对自己说尽力了、","author":"Ghosts","url":"https://blog.wztlink1013.com","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-07-14T05:30:56.667Z","updated":"2020-07-14T05:30:56.667Z","comments":true,"path":"404.html","permalink":"https://blog.wztlink1013.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 由于本人原主域名迁移至二级域名，来访者可以先在本站顶部搜索你想要文章的关键词，或者进入文章分类/归档中查找你想要的文章。有任何疑惑，欢迎在下方留言告知！"},{"title":"","date":"2020-07-11T01:24:03.852Z","updated":"2020-07-11T01:24:03.852Z","comments":true,"path":"go.html","permalink":"https://blog.wztlink1013.com/go.html","excerpt":"","text":"页面加载中，请稍候... body{background:#555}.loading{animation:fadein 2s}@keyframes fadein{from{opacity:0}to{opacity:1}}.spinner-wrapper{position:absolute;top:0;left:0;z-index:300;height:100%;min-width:100%;min-height:100%;background:rgba(255,255,255,.93)}.spinner-text{position:absolute;top:45%;left:50%;margin-left:-100px;margin-top:2px;color:#000;letter-spacing:1px;font-size:20px;font-family:Arial}.spinner{position:absolute;top:45%;left:50%;display:block;margin-left:-160px;width:1px;height:1px;border:20px solid rgba(255,0,0,1);border-radius:50px;border-left-color:transparent;border-right-color:transparent;animation:spin 1.5s infinite}@keyframes spin{0%,100%{transform:rotate(0)scale(1)}50%{transform:rotate(720deg)scale(.6)}} const host=window.location.host;function GetQueryString(name){var reg=new RegExp(\"(^|&)\"+name+\"=([^&]*)(&|$)\",\"i\");var r=window.location.search.substr(1).match(reg);return r?decodeURI(r[2]):null}var jump_url=GetQueryString('');var UrlReg='^((http|https|thunder|qqdl|ed2k|Flashget|qbrowser|ftp|rtsp|mms)://)';if(!jump_url||!jump_url.match(UrlReg)){document.title='参数错误，正在返回首页...';jump_url=location.origin}setTimeout(function link_jump(){ location.href=jump_url},1000);setTimeout(function(){window.opener=null;window.close()},30000); 页面加载中，请稍候... window.imageLazyLoadSetting = { isSPA: true, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"关于我","date":"2020-05-27T18:02:34.140Z","updated":"2020-05-23T05:21:16.000Z","comments":true,"path":"about/index.html","permalink":"https://blog.wztlink1013.com/about/index.html","excerpt":"","text":"尼采般地抒情 何以 尼采般地抒情 名 渐渐地，我也开始相信那些书本中美好的抒情，更隔蓬山一万重，一切都是为了更好的明天！ 关于我··· 什么都无法舍弃的人，什么都改变不了 阿尔敏·阿诺德《进击的巨人》 [有空再补充···]"},{"title":"archives","date":"2020-02-22T13:14:24.000Z","updated":"2020-02-22T13:14:26.000Z","comments":true,"path":"archives/index.html","permalink":"https://blog.wztlink1013.com/archives/index.html","excerpt":"","text":""},{"title":"相知无远近","date":"2020-07-24T00:38:12.713Z","updated":"2020-07-24T00:38:12.713Z","comments":true,"path":"friends/index.html","permalink":"https://blog.wztlink1013.com/friends/index.html","excerpt":"","text":"💙申 请 友 链💙必选参数可选参数友链示例示例效果 网站名称：尼采般地抒情个人主页：https://wztlink1013.com/个人头像：https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg 博客标签：总结技术；记录生活博客简介：用一种简单的方式抒情卡片颜色： #CC99FF文字颜色： #040963 网站名称：尼采般地抒情个人主页：https://wztlink1013.com/个人头像：https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg博客标签：总结技术；记录生活博客简介：用一种简单的方式抒情卡片颜色： #CC99FF文字颜色： #040963 💙Blogger blog Information💙 网站名称：尼采般地抒情个人主页：https://wztlink1013.com/个人头像：https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg博客简介：总结技术，记录生活 Statement 若申请友链，请先加本站为友链💖 关于期间贵站成为死链或者单向友链，几天后（或者更长时间）删除💔。相逢既是缘，本站不轻易删除已交换的友链💙","author":{"name":"尼采般地抒情","avatar":"https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg","url":"https://wztlink1013.com"}},{"title":"留言板","date":"2020-02-09T14:31:43.000Z","updated":"2020-07-12T13:30:21.328Z","comments":true,"path":"comment/index.html","permalink":"https://blog.wztlink1013.com/comment/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-02-06T12:10:26.000Z","updated":"2020-02-22T13:06:10.000Z","comments":true,"path":"categories/index.html","permalink":"https://blog.wztlink1013.com/categories/index.html","excerpt":"","text":""},{"title":"尼采般地随笔抒情、","date":"2020-07-10T10:03:08.523Z","updated":"2020-07-10T10:03:08.523Z","comments":false,"path":"essay/index.html","permalink":"https://blog.wztlink1013.com/essay/index.html","excerpt":"","text":"var img=\"https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg\"; var appID=\"fHEfdwbbjEMQqFGlCOeLktrO-MdYXbMMI\"; var appKEY=\"Q0M7z93ovXsmj4bB9diYYxz1\"; var per=\"15\"; var username=\"ghosts\"; var placeholder1=\"山里偷得半日的闲、搁这儿 ~ ~\" ; var placeholder2=\"code\"; var bgimg = \"https://cdn.jsdelivr.net/gh/wztlink1013/CDN@1.9/Pictures/blogbackground/giffengye.gif\"; .cbp_tmtimeline>li:nth-child(odd) .cbp_tmlabel { background: url(\"https://cdn.jsdelivr.net/gh/wztlink1013/CDN@1.9/Pictures/blogbackground/giffengye.gif\") 0% 0% / cover; } .cbp_tmtimeline>li .cbp_tmlabel { background: url(\"https://cdn.jsdelivr.net/gh/wztlink1013/CDN@1.9/Pictures/blogbackground/giffengye.gif\") 0% 0% / cover; } .cbp_tmtimeline>li:nth-child(odd) .cbp_tmlabel:after { border-right-color: #6dd0f2 } .cbp_tmtimeline>li .cbp_tmlabel:after { border-right-color: #f59abe } .button { background: '#48abf7' 0% 0% / cover; } window.imageLazyLoadSetting = { isSPA: true, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a","author":{"name":"Zutao Wu","avatar":"https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg","url":"https://wztlink1013.com"}},{"title":"","date":"2020-05-27T18:02:36.847Z","updated":"2020-02-22T13:07:40.000Z","comments":true,"path":"mylist/index.html","permalink":"https://blog.wztlink1013.com/mylist/index.html","excerpt":"","text":""},{"title":"projects","date":"2020-02-22T13:19:15.000Z","updated":"2020-05-22T08:48:06.000Z","comments":true,"path":"projects/index.html","permalink":"https://blog.wztlink1013.com/projects/index.html","excerpt":"","text":"💙所写项目💙 敬请期待！"},{"title":"tags","date":"2020-02-06T12:10:41.000Z","updated":"2020-03-14T15:22:22.000Z","comments":true,"path":"tags/index.html","permalink":"https://blog.wztlink1013.com/tags/index.html","excerpt":"","text":""},{"title":"search","date":"2020-02-26T13:40:36.000Z","updated":"2020-03-14T15:23:38.000Z","comments":true,"path":"search/index.html","permalink":"https://blog.wztlink1013.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"yuque/测试语雀文章","slug":"yuque/测试语雀文章","date":"2020-07-14T06:46:19.000Z","updated":"2020-07-14T07:36:54.240Z","comments":true,"path":"2020/07/14/yuque/测试语雀文章/","link":"","permalink":"https://blog.wztlink1013.com/2020/07/14/yuque/%E6%B5%8B%E8%AF%95%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0/","excerpt":"","text":"一、语雀下载1npm install yuque-hexo --save 二、语雀配置123456789101112131415161718\"yuqueConfig\": &#123; \"baseUrl\": \"https://www.yuque.com/api/v2\", \"login\": \"nicaibandishuqing\", \"repo\": \"or0hey\", \"postPath\": \"source/_posts/yuque\", \"mdNameFormat\": \"title\", \"adapter\": \"markdown\" &#125;, \"scripts\": &#123; \"clean\": \"hexo clean\", \"build\": \"hexo generate\", \"server\": \"hexo server\", \"deploy\": \"hexo deploy\", \"clean:yuque\": \"yuque-hexo clean\", \"publish\": \"npm run clean &amp;&amp; npm run deploy\", \"dev\": \"hexo s\", \"sync\": \"DEBUG=yuque-hexo.* yuque-hexo sync\", \"reset\": \"npm run clean:yuque &amp;&amp; npm run sync\"","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"}],"tags":[{"name":"yuque","slug":"yuque","permalink":"https://blog.wztlink1013.com/tags/yuque/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.wztlink1013.com/tags/hexo/"}]},{"title":"git使用Token连接","slug":"Environment/git使用Token连接","date":"2020-07-08T10:45:16.000Z","updated":"2020-07-12T13:13:13.416Z","comments":true,"path":"2020/07/08/Environment/git使用Token连接/","link":"","permalink":"https://blog.wztlink1013.com/2020/07/08/Environment/git%E4%BD%BF%E7%94%A8Token%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"一、应用多个终端使用，而且没必要配置SSH连接的情况，可以使用GitHub Token来连接使用。还有就是使用GitHub Actions时候用Token情况较SSH方便。 不同的托管平台使用语法会有差异，在此记录下GitHub、Coding、Gitee的使用 二、GitHubGitHub生成一个Token：*** 使用SSH情况：git clone https://github.com/wztlink1013/blog3.0.git 使用Token情况：https://x-access-token:**************@github.com/wztlink1013/blog3.0.git 三、Coding在个人设置中设置一个访问令牌 令牌用户名：#### 令牌Token：***** 使用SSH情况：https://e.coding.net/wztlink1013/project/repo.git使用令牌情况：https://####:***********@e.coding.net/wztlink1013/project/repo.git 四、Gitee头像设置中申请私人令牌：** 使用SSH情况：https://gitee.com/user/repo.git 使用Token情况：https://oauth2:**********@gitee.com/user/repo.git 五、GitHub Actions中的使用1234Github_Pages: github.com/wztlink1013/wztlink1013.github.ioGithub_Token: $&#123;&#123; secrets.token_GithubAPI &#125;&#125;git push --force --quiet \"https://$&#123;Github_Token&#125;@$&#123;Github_Pages&#125;\" 12345Coding_Pages: e.coding.net/wztlink1013/wztlink1013.gitCoding_Token: $&#123;&#123; secrets.token_CodingAPI &#125;&#125;Coding_Username: $&#123;&#123; secrets.Username_Coding &#125;&#125;git push --force --quiet \"https://$&#123;Coding_Username&#125;:$&#123;Coding_Token&#125;@$&#123;Coding_Pages&#125;\"","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[]},{"title":"Modeling-数据挖掘","slug":"DataAnalysis/Modeling-数据挖掘","date":"2020-07-07T00:48:05.000Z","updated":"2020-07-12T13:06:31.534Z","comments":true,"path":"2020/07/07/DataAnalysis/Modeling-数据挖掘/","link":"","permalink":"https://blog.wztlink1013.com/2020/07/07/DataAnalysis/Modeling-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/","excerpt":"","text":"数据挖掘 数据的获取：本地获取、网络爬虫 数据的呈现：词云图数据的处理Why？ 数据的相似相异性&lt;!–stackedit_data:eyJoaXN0b3J5IjpbMTQ3NzQxNTczMiwtMTk0MDQyNDMxN119 -&gt;","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/tags/DataAnalysis/"}]},{"title":"javaweb-开发大作业要求","slug":"Web/JavaWeb开发大作业要求","date":"2020-06-12T14:03:07.000Z","updated":"2020-07-12T13:21:11.779Z","comments":true,"path":"2020/06/12/Web/JavaWeb开发大作业要求/","link":"","permalink":"https://blog.wztlink1013.com/2020/06/12/Web/JavaWeb%E5%BC%80%E5%8F%91%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%A6%81%E6%B1%82/","excerpt":"","text":"一、大作业架构要求基于JSP技术完成一个WEB管理系统的开发。系统内容按以下要求完成 1.网站目录管理建立一个完整的总文件夹，所有系统内容都要包含在建立的这个文件夹内，系统各类元素文件在总文件夹中以子文件夹形式分类清楚。（如图片都放在子文件夹image里，html页都放在pages子文件夹内，数据库文件放在DB文件夹内） 2.系统前台设计（JSP设计）a)页面设计美观，使用方便。 b)如所选题目要求功能较少，需要自己扩充其它功能。 c)使用MVC模式：即JavaBean+JSP+Servlet技术。 3.系统后台管理：普通用户的主要功能模块：登录与注册等。 管理员的主要功能模块：用户信息的管理（添加、删除、修改、查询）。 4.数据库设计用MySql创建后台数据库，并完善数据库的结构和数据。数据库至少包含：用户信息表、相关业务数据表等。 二、大作业实验报告要求附带一份课程设计报告，也放在总文件夹中。 (1) 设计报告参照以下提纲书写： 123456i. 需求分析。ii. 数据库结构设计。iii.程序结构框图。iv. 程序功能说明。v. 系统实现界面。vi. 总结及体会。 (2) 设计报告按照以下格式打印： 123456a) 打印用纸：A4b) 页面设置：上：3.5cm,下:2.5 cm,左:3.0 cm,右:2.4 cm,页眉：2.5 cm，页脚：1.8 cm，行间距：1.25倍行距。c) 字体、字号： 大标题：黑体、三号； 小标题：黑体、四号； 正文部分：宋体、小四； (3) 作业提交要求 1234a) 作品（1组1份）保存到文件夹以压缩文件的形式上交，文件命名：作品名+班级1+学号1+姓名1+班级2+学号2+姓名2...，上交后应自备一份备份，以备教师手中的作品因故无法正常读取时补交。b) 提交网页设计报告电子版（1组1份），文件命名：报告++班级1+学号1+姓名1+班级2+学号2+姓名2...，上交后应自备一份备份，以备教师手中的作品因故无法正常读取时补交。c) 做好自己作品的著作权保护，如果发现抄袭或者雷同现象，一律评为不及格。d) 作品演示之前提交设计报告电子版和作品以班级为单位，由课代表收齐，发送至课代表或U盘拷贝给任课老师，时间预计在教学的17-18周。设计报告纸质版（以班级为单位，由课代表收齐，统一交到学院楼402），纸质版的提交时间根据学校开学情况再行通知。 三、展示要求演示时间安排1演示时间另行通知，预计17-18周上课时间。 汇报要求1234a) 6月4日前，确定分组情况并上报课代表汇总。b) 演示时间：10分钟&#x2F;组，包括6分钟展示，4分钟答疑。c) 材料准备：打印评分表（1人1份）、填写完成的设计报告（1组1份）（见下页），同一小组一并装订，汇报前上交。d) 汇报顺序：随机抽取。组长首先介绍分工，然后各成员分别介绍各自工作。 任务安排123456(1) 项目分组完成（每组1-3人）。每人承担项目的一部分任务，如：总体设计、数据库设计、代码实现、美工、文档等。每组设一位组长，组长负责总体设计和最终代码的整合。负责数据库、美工、文档的同学也要完成项目中部分简单功能模块的代码。（分组项目，培养团队合作的精神、锻炼与他人沟通的能力。）(2) 提交电子版完整的设计报告和源程序。(3) 设计分三阶段 第一阶段: 明确系统功能需求，设计数据库 第二阶段: 系统功能模块分析并用JSP实现相应页面 第三阶段: 整理文档和调试程序，演示答辩。答辩时需要演示项目作品功能，叙述小组分工和每个人的工作量。回答老师提出的问题。答辩，或队员协助演示作品的功能。答辩6分钟，老师提问4分钟。最后老师从作品功能完善性、交互界面美观性、文档规范性、答辩是否流畅等几个方面给出小组答辩成绩。个人最终成绩&#x3D;小组成绩*0.4+个人得分*0.6。 四、评分表 姓名 内容 分值 一、主题与内容（20分） 1.主题鲜明，题材合适，内容能很好为主题服务 2.页面具有较强的个人设计创意,色彩搭配鲜明,内容布局合理 二、常规技术(50分) 1.页面布局合理，页面内容清晰明了，在页面中，插入文字、图片、表格、表单、超级链接、多媒体等各种对象，网页中部分页面可应用行为或者网页特效 2.表单、数据库操作技术 3.Jsp、Servlet技术 三、其他技术(10分) 1.有特色的结束，如有自己制作的动画、JS脚本特效等 四、作业设计报告(20分) 1.项目文档内容详细完整、结构清晰、提交文件名正确 打印说明: 小组成员每人单独打印一份，在第一列表头中填写姓名； 作业答辩时，将评分表装订在作业设计报告前面。","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.wztlink1013.com/categories/Web/"}],"tags":[]},{"title":"Navicat-1045报错","slug":"Bug/Navicat-1045报错","date":"2020-06-11T07:26:52.000Z","updated":"2020-07-24T00:38:12.705Z","comments":true,"path":"2020/06/11/Bug/Navicat-1045报错/","link":"","permalink":"https://blog.wztlink1013.com/2020/06/11/Bug/Navicat-1045%E6%8A%A5%E9%94%99/","excerpt":"","text":"一、报错信息11045-Access denied for user root@localhost(using password:YES) 二、问题分析与解决不被接入，改root密码 在mysql控制台里面改密码 ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;; 刷新数据库 flush privileges; 退出 quit; 重启Navicat再次链接即可。 参考 acoolgiser _张张张i&lt;!–stackedit_data:eyJoaXN0b3J5IjpbLTE1ODY5MjE0NV19 -&gt;","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"}]},{"title":"javaweb-JSP开发模型","slug":"Web/JavaWeb-11JSP开发模型","date":"2020-06-10T09:10:07.000Z","updated":"2020-07-12T13:20:52.141Z","comments":true,"path":"2020/06/10/Web/JavaWeb-11JSP开发模型/","link":"","permalink":"https://blog.wztlink1013.com/2020/06/10/Web/JavaWeb-11JSP%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"一、JSP两种开发模式 JSP Model1 JSP Model2 二、MVC设计模式 三、javaweb开发中的三层架构","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.wztlink1013.com/categories/Web/"}],"tags":[]},{"title":"javaweb-JDBC","slug":"Web/JavaWeb-09JDBC","date":"2020-06-10T08:10:07.000Z","updated":"2020-07-12T13:20:37.294Z","comments":true,"path":"2020/06/10/Web/JavaWeb-09JDBC/","link":"","permalink":"https://blog.wztlink1013.com/2020/06/10/Web/JavaWeb-09JDBC/","excerpt":"","text":"什么是JDBC使用数据库来存储和管理数据 JDBC常用的API 五个接口一个类（唯一的类）","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.wztlink1013.com/categories/Web/"}],"tags":[]},{"title":"javaweb-会话及其会话技术","slug":"Web/JavaWeb-05会话及其会话技术","date":"2020-06-10T07:25:07.000Z","updated":"2020-07-12T13:20:01.560Z","comments":true,"path":"2020/06/10/Web/JavaWeb-05会话及其会话技术/","link":"","permalink":"https://blog.wztlink1013.com/2020/06/10/Web/JavaWeb-05%E4%BC%9A%E8%AF%9D%E5%8F%8A%E5%85%B6%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/","excerpt":"","text":"一、会话技术相当于在客户端和服务器端之间，记录一些用户信息，但是不能用上一章节的，因为那只能保存暂时的信息。servlet还提供两个对象Cookie和Session可以更好地更好地保存会话数据。","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.wztlink1013.com/categories/Web/"}],"tags":[]},{"title":"javaweb-jsp技术","slug":"Web/JavaWeb-06jsp技术","date":"2020-06-10T07:18:07.000Z","updated":"2020-07-12T13:20:17.956Z","comments":true,"path":"2020/06/10/Web/JavaWeb-06jsp技术/","link":"","permalink":"https://blog.wztlink1013.com/2020/06/10/Web/JavaWeb-06jsp%E6%8A%80%E6%9C%AF/","excerpt":"","text":"jsp概述一种新的编写动态网页的技术，虽然本质还是调用了servlet，但是相比前者要简单很多（前者向页面写数据麻烦，复杂），其组成可以简单理解为jsp = html + java + jsp自身 调用servlet过程： 其中jsp生成java文件，编译成class文件所在目录（本来应该在tomcat的work路径下）：D:\\project-java\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\work\\Catalina\\localhost\\demo-jsp\\org\\apache\\jsp 打开java文件之后可以看到相关对sevlet的继承 jsp语法jsp脚本元素 jsp注释 jsp指令page指令 include指令 taglib指令jsp隐式对象","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.wztlink1013.com/categories/Web/"}],"tags":[]},{"title":"yuque-未拉取成功","slug":"Bug/yuque-未拉取成功","date":"2020-06-01T05:00:06.000Z","updated":"2020-07-14T07:38:58.261Z","comments":true,"path":"2020/06/01/Bug/yuque-未拉取成功/","link":"","permalink":"https://blog.wztlink1013.com/2020/06/01/Bug/yuque-%E6%9C%AA%E6%8B%89%E5%8F%96%E6%88%90%E5%8A%9F/","excerpt":"","text":"一、报错信息123456789101112131415$ yuque-hexo sync[INFO] clear previous directory.[INFO] remove yuque posts: D:\\Blog\\blog-wztlink1013-3.0\\source\\yuqueMon, 01 Jun 2020 04:02:22 GMT yuque-hexo deprecated TOKEN of yuque will be required while verion &gt;v1.6.0. at ..\\..\\Develop\\nodejs\\node_global\\node_modules\\yuque-hexo\\lib\\Downloader.js:39:19[INFO] reading from local file: D:\\Blog\\blog-wztlink1013-3.0\\yuque.json[WARNING] Cannot find module 'D:\\Blog\\blog-wztlink1013-3.0\\yuque.json'Require stack:- D:\\Develop\\nodejs\\node_global\\node_modules\\yuque-hexo\\lib\\Downloader.js- D:\\Develop\\nodejs\\node_global\\node_modules\\yuque-hexo\\command\\sync.js- D:\\Develop\\nodejs\\node_global\\node_modules\\yuque-hexo\\node_modules\\common-bin\\lib\\command.js- D:\\Develop\\nodejs\\node_global\\node_modules\\yuque-hexo\\node_modules\\common-bin\\index.js- D:\\Develop\\nodejs\\node_global\\node_modules\\yuque-hexo\\index.js- D:\\Develop\\nodejs\\node_global\\node_modules\\yuque-hexo\\bin\\yuque-hexo.js⚠️ Error: fail to fetch article list, response: &#123;\"status\":401,\"message\":\"Unauthorized\"&#125;⚠️ Command Error, enable `DEBUG=common-bin` for detail 二、分析并解决问题认证出错，应该和下面三个原因有关 客户端将其身份验证凭据发送到服务器，但是服务器由于某种原因拒绝了凭据。 客户端无法在请求中提供任何身份验证凭据。 客户端由于某种原因被禁止。某些应用程序用来限制来自特定IP地址的访问请求，因此，如果身份验证不是问题，则可能是服务器端禁止。401 Unauthorized Errors 也就是身份没有被验证，首先检查用户元信息相关 的确，配置都是没有问题的，然后去issue里面查看相关问题，了解到是语雀官方出于对知识库安全性的调整，需要使用第三方 API 访问知识库，需要传入环境变量 YUQUE_TOKEN。 然后根据两种指导方式，传入参数即可 设置全局的环境变量 YUQUE_TOKEN 命令执行时传入环境变量 mac / linux: YUQUE_TOKEN=xxx yuque-hexo sync windows: set YUQUE_TOKEN=xxx &amp;&amp; yuque-hexo sync 传入之后会有一封邮件发过来，然后新开git bash窗口，重新键入命令即可 成功之后是这个样子的 1234567891011$ yuque-hexo sync[INFO] clear previous directory.[INFO] remove yuque posts: D:\\Blog\\blog-wztlink1013-3.0\\source\\_posts\\yuque[INFO] reading from local file: D:\\Blog\\blog-wztlink1013-3.0\\yuque.json[INFO] article amount: 2[INFO] download articles done![INFO] writing to local file: D:\\Blog\\blog-wztlink1013-3.0\\yuque.json[INFO] create posts directory (if it not exists): D:\\Blog\\blog-wztlink1013-3.0\\source\\_posts\\yuque[INFO] generate post file: D:\\Blog\\blog-wztlink1013-3.0\\source\\_posts\\yuque\\hexo-test.md[INFO] generate post file: D:\\Blog\\blog-wztlink1013-3.0\\source\\_posts\\yuque\\语雀文章测试.md[INFO] yuque-hexo sync done! 相关参考 https://airbrake.io/blog/http-errors/401 U-unauthorized E-error:What It Is and How to Fix It 使用语雀编辑器写静态博客https://www.yuguocong.cn/yuque/eg7hkp.html#Reference windows10环境变量设置及理解环境变量&lt;!–stackedit_data:eyJoaXN0b3J5IjpbLTEzMDExMjgyNjhdfQ== -&gt;","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"},{"name":"yuque","slug":"yuque","permalink":"https://blog.wztlink1013.com/tags/yuque/"}]},{"title":"hexo-生成文章出错","slug":"Bug/hexo-生成文章出错","date":"2020-05-31T08:00:06.000Z","updated":"2020-07-14T07:38:35.932Z","comments":true,"path":"2020/05/31/Bug/hexo-生成文章出错/","link":"","permalink":"https://blog.wztlink1013.com/2020/05/31/Bug/hexo-%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0%E5%87%BA%E9%94%99/","excerpt":"","text":"一、报错信息123456789101112131415161718192021222324hexo gINFO Start processingFATAL Somethings wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) unexpected end of file at Object._prettifyError (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\nunjucks\\src\\lib.js:36:11) at Template.render (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\nunjucks\\src\\environment.js:536:21) at Environment.renderString (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\nunjucks\\src\\environment.js:378:17) at D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\hexo\\lib\\extend\\tag.js:120:48 at tryCatcher (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\util.js:16:23) at Function.Promise.fromNode.Promise.fromCallback (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:209:30) at Tag.render (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\hexo\\lib\\extend\\tag.js:120:18) at Object.onRenderEnd (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\hexo\\lib\\hexo\\post.js:291:22) at D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\hexo\\lib\\hexo\\render.js:79:21 at tryCatcher (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\util.js:16:23) at Promise._settlePromiseFromHandler (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:547:31) at Promise._settlePromise (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:604:18) at Promise._settlePromise0 (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at _drainQueueStep (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\async.js:93:12) at _drainQueue (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\async.js:86:9) at Async._drainQueues (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\async.js:102:5) at Immediate.Async.drainQueues (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\async.js:15:14) at processImmediate (internal/timers.js:456:21) 二、分析并解决问题根据报错信息，包nunjucks、bluebird使用异常 然后进到node_modules文件夹里面分别找到两个包，进入README.md进入官网，numjucks包应该是渲染文章有关，期间出错应该是markdown文章里面所使用的标签与nunjucks模板引擎的标签冲突， 根据文档定位英文大括号的使用，定位文章使用带有大括号的fancybox标签，标签结束忘记加end而导致出错 三、hexo g 出错总结hexo g出错总结多为文件格式出错，主题配置出错，抑或是文章格式出错等 文章头部 hexo相关文章报错，大多数为格式出错，文章头部的使用严格遵循hexo官方文档的使用，但是目录优化插件，使得文章头部的元信息更为简单化 减号-分隔符，注意头部front-matter、markdown行分隔。如果没有加front-matter，文章还用了markdown，会报错 YAMLException: end of the stream or a document separator is expected at line 6, column 1: 目录优化插件的使用 文章体 英文大括号的使用要“有始有终”，Volantis主题的大括号标签使用 空格问题123456789101112131415161718192021222324252627282930313233ERROR Process failed: _posts/yuque/外汇时间序列预测.mdYAMLException: end of the stream or a document separator is expected at line 2, column 11: categories: ^ at generateError (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:167:10) at throwError (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:173:9) at readDocument (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1545:5) at loadDocuments (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1588:5) at Object.load (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1614:19) at parseYAML (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\hexo-front-matter\\lib\\front_matter.js:78:23) at parse (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\hexo-front-matter\\lib\\front_matter.js:54:12) at D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:48:20 at tryCatcher (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\util.js:16:23) at Promise._settlePromiseFromHandler (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:544:35) at Promise._settlePromise (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:604:18) at Promise._settlePromise0 (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at Promise._fulfill (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:673:18) at PromiseArray._resolve (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19) at PromiseArray._promiseFulfilled (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14) at PromiseArray._iterate (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise_array.js:115:31) at PromiseArray.init [as _init] (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise_array.js:79:10) at Promise._settlePromise (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:601:21) at Promise._settlePromise0 (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at Promise._fulfill (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:673:18) at PromiseArray._resolve (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19) at PromiseArray._promiseFulfilled (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14) at Promise._settlePromise (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:609:26) at Promise._settlePromise0 (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at Promise._fulfill (D:\\Blog\\blog-wztlink1013-3.0\\node_modules\\bluebird\\js\\release\\promise.js:673:18)INFO Generating Baidu urls for last 1 posts 奇葩错误，在最上面的三个分隔符后面也要加空格，可能是语雀那边同步过来的文章问题 参考 nunjucks文档","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[]},{"title":"SSH-登录","slug":"Bug/SSH-登录失败","date":"2020-05-31T06:00:06.000Z","updated":"2020-07-14T07:38:54.668Z","comments":true,"path":"2020/05/31/Bug/SSH-登录失败/","link":"","permalink":"https://blog.wztlink1013.com/2020/05/31/Bug/SSH-%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/","excerpt":"","text":"一、报错信息1234remote: Coding 提示: Authentication failed.remote: 认证失败，请确认您输入了正确的账号密码。fatal: Authentication failed for 'https://e.coding.net/wztlink1013/wztlink1013.git/'##[error]Process completed with exit code 128. 二、分析并解决问题自动化部署过程中，coding认证出错，我觉得应该有两个可能性 字面意思账号密码出错 SSH密匙没有匹配到 在GitHub Actions上所配置的Token信息之间也修改了一次，会不会是忘了改用户名 如果是第一种情况，已经进入控制面板中的凭据管理器，更改了coding在本机上的默认永久密码，不弹窗理论没事，但是无效， 根据上次在本机上克隆coding仓库也没有其任何反应，所以问题应该出在ssh密匙上面，进一步回想，自己重装电脑后，当时是打算不使用全局用户没加上global打算使用各个用户，但是最后又换成全局用户，所以生成的.ssh文件夹下的config文件有被删除了，会不会是config里面的coding host被删除，就默认这个电脑只有初始化github用户呢？ 好的，试验了一下，解决了在本地电脑coding“不算用户”的问题，但是自动化部署的问题未解决 最后试一下GitHub Actions上是不是coding用户名之间忘了换一次，的确是…… 参考 一台电脑利用秘钥绑定多个ssh-key账号（实n 源头","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"}]},{"title":"qrcode和myqr花式二维码","slug":"Language/Python-qrcode-myqr二维码","date":"2020-05-29T10:42:05.000Z","updated":"2020-07-12T12:02:32.498Z","comments":true,"path":"2020/05/29/Language/Python-qrcode-myqr二维码/","link":"","permalink":"https://blog.wztlink1013.com/2020/05/29/Language/Python-qrcode-myqr%E4%BA%8C%E7%BB%B4%E7%A0%81/","excerpt":"","text":"一、官方文档https://pypi.org/project/qrcode/ https://pypi.org/project/MyQR/ 二、下载包pip install qrcode #方法多，体量小 pip install myqr #操作简单，功能强大 三、代码qrcode一行字二维码123import qrcodeqrcode.make(\"不睡觉干嘛呢\").get_image().show() #设置URL必须添加http:// qrcode一行字二维码123456import qrcode text = input(\"输入文字或URL：\")img =qrcode.make(text)img.save() #保存图片至本地目录，可以设定路径img.show() qrcode生成logo二维码123456789101112131415161718192021222324252627282930313233343536from PIL import Imageimport qrcode,os def create_qrcode(url,qrcodename): qr = qrcode.QRCode( version=1, # 设置容错率为最高 error_correction=qrcode.ERROR_CORRECT_H, # 用于控制二维码的错误纠正程度 box_size=8, # 控制二维码中每个格子的像素数，默认为10 border=1, # 二维码四周留白，包含的格子数，默认为4 #image_factory=None, 保存在模块根目录的image文件夹下 #mask_pattern=None ) qr.add_data(url) # QRCode.add_data(data)函数添加数据 qr.make(fit=True) # QRCode.make(fit=True)函数生成图片 img = qr.make_image() img = img.convert(\"RGBA\") # 二维码设为彩色 logo = Image.open('xx.jpg') # 传gif生成的二维码也是没有动态效果的 w , h = img.size logo_w , logo_h = logo.size factor = 4 # 默认logo最大设为图片的四分之一 s_w = int(w / factor) s_h = int(h / factor) if logo_w &gt; s_w or logo_h &gt; s_h: logo_w = s_w logo_h = s_h logo = logo.resize((logo_w, logo_h), Image.ANTIALIAS) l_w = int((w - logo_w) / 2) l_h = int((h - logo_h) / 2) logo = logo.convert(\"RGBA\") img.paste(logo, (l_w, l_h), logo) img.show() img.save(os.getcwd()+'/' + qrcodename + '.png', quality=100) myqr动态二维码12345678910相关参数： words：二维码内容，链接或者句子 version：二维码大小，范围为[1,40] level：二维码纠错级别，范围为&#123;L,M,Q,H&#125;，H为最高级，默认。 picture：自定义二维码背景图，支持格式为 .jpg，.png，.bmp，.gif，默认为黑白色 colorized：二维码背景颜色，默认为 False，即黑白色 contrast：对比度，值越高对比度越高，默认为 1.0 brightness：亮度，值越高亮度越高，默认为 1.0，值常和对比度相同 save_name：二维码名称，默认为 qrcode.png save_dir：二维码路径，默认为程序工作路径 12345678910111213141516171819202122# 调用库from MyQR import myqr# 函数部分myqr.run( # 网址 words='https://wztlink1013.com', # 控制边长，范围是1到40，数字越大边长越大，默认边长是取决于你输入的信息的长度和使用的纠错等级 version=5, # 控制纠错水平，范围是L、M、Q、H，从左到右依次升高 level='H', # 将QR二维码图像与一张同目录下的图片相结合，此处设置该图片，可以是gif picture='./input/girl.gif', # 默认是黑白(False)，可以选择彩色(True) colorized=True, # 调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0。 contrast=1.0, # 调节图片的亮度，用法与contrast相同 brightness=1.0, # 输出文件名，格式可以是jpg，png，bmp，gif save_name='girl.gif', save_dir='./output')","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"qrcode","slug":"qrcode","permalink":"https://blog.wztlink1013.com/tags/qrcode/"},{"name":"myqr","slug":"myqr","permalink":"https://blog.wztlink1013.com/tags/myqr/"}]},{"title":"UTC-GMT-GST","slug":"DataAnalysis/UTC-GMT-GST","date":"2020-05-29T07:43:12.000Z","updated":"2020-07-14T05:30:56.672Z","comments":true,"path":"2020/05/29/DataAnalysis/UTC-GMT-GST/","link":"","permalink":"https://blog.wztlink1013.com/2020/05/29/DataAnalysis/UTC-GMT-GST/","excerpt":"","text":"一、三者区别与关系UTC：世界标准时间协调世界时（英：Coordinated Universal Time ，法：Temps Universel Coordonné），又称世界统一时间，世界标准时间，国际协调时间。英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称UTC。 GMT：格林尼治时间世界时UT 即格林尼治时间，格林尼治所在地的标准时间。以地球自转为基础的时间计量系统。地球自转的角度可用地方子午线相对于地球上的基本参考点的运动来度量。为了测量地球自转，人们在地球上选取了两个基本参考点：春分点（见分至点）和平太阳，由此确定的时间分别称为恒星时和平太阳时。 GST：北京时间在数据库中存放，或者给用户看的时间都是GST时间 UTC和GST中国北京市的时间比Coordinated Universal Time早 8 小时 二、UTC与GST之间的转换理解 2020-05-23T01:12:19.602Z T：他表示后面跟的时间 Z：表示UTC统一时间 602：表示毫秒，如果为6020，最后得到的时间，秒会增加1秒。000Z意思就是 0毫秒 utc统一时间 java实现123456789101112131415161718package website;import java.text.*;import java.util.Date;public class UTC_GST &#123; public static void main(String[] args) throws ParseException &#123; String date = \"2020-05-23T20:12:19.602Z\"; date = date.replace(\"Z\", \" UTC\"); System.out.println(\"输入的UTC格式数据为：\"+date); SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS Z\"); Date d = format.parse(date); System.out.println(\"输出的背景格式数据为：\"+d); &#125;&#125; 12输入的UTC格式数据为：2020-05-23T20:12:19.602 UTC输出的背景格式数据为：Sun May 24 04:12:19 CST 2020 1234567891011121314151617181920212223package website;import java.text.SimpleDateFormat;import java.util.Date; public class Format &#123; public static void main(String[] args) &#123; Date ss = new Date(); System.out.println(\"一般日期输出：\" + ss); System.out.println(\"toString日期输出：\" + ss.toString()); System.out.println(\"时间戳：\" + ss.getTime()+\"\\n\"); // getTime返回的是1970年1月1号至今流逝的时间 //Date aw = Calendar.getInstance().getTime();//获得时间的另一种方式，测试效果一样 SimpleDateFormat format0 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); String time = format0.format(ss.getTime());//这个就是把时间戳经过处理得到期望格式的时间 System.out.println(\"格式化结果0：\" + time + \"\\n\"); SimpleDateFormat format1 = new SimpleDateFormat(\"yyyy年MM月dd日 HH时mm分ss秒\"); time = format1.format(ss.getTime()); System.out.println(\"格式化结果1：\" + time + \"\\n\"); &#125;&#125; 1234567一般日期输出：Sat May 23 15:03:25 CST 2020toString日期输出：Sat May 23 15:03:25 CST 2020时间戳：1590217405777格式化结果0：2020-05-23 15:03:25格式化结果1：2020年05月23日 15时03分25秒","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[]},{"title":"Hexo-Volantis写作","slug":"Hexo/Hexo-Volantis写作","date":"2020-05-25T08:56:37.000Z","updated":"2020-07-12T13:15:18.440Z","comments":true,"path":"2020/05/25/Hexo/Hexo-Volantis写作/","link":"","permalink":"https://blog.wztlink1013.com/2020/05/25/Hexo/Hexo-Volantis%E5%86%99%E4%BD%9C/","excerpt":"","text":"主题原生支持丰富多彩的标签。 文本和段落Span &amp; P请将您的 Volantis 升级至 2.5 版本以上使用。 语法格式参数列表示例写法示例效果行内文本 1&#123;% span 样式参数, 文本内容 %&#125; 独立段落 1&#123;% p 样式参数, 文本内容 %&#125;样式参数位置可以写颜色、大小和对齐方向，多个样式参数用空格隔开。 字体 1logo, code 颜色 1red, yellow, green, cyan, blue, gray 大小 1small, h4, h3, h2, h1, large, huge, ultra 对齐方向 1left, center, right彩色文字 example.md:1在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。 超大文字 example.md:1234文档「开始」页面中的标题部分就是超大文字。&#123;% p center logo large, Volantis %&#125;&#123;% p center small, A Wonderful Theme for Hexo %&#125;彩色文字 在一段话中方便插入各种颜色的标签，包括：红色、黄色、绿色、青色、蓝色、灰色。 超大文字 文档「开始」页面中的标题部分就是超大文字。 Volantis A Wonderful Theme for Hexo Note &amp; NoteBlockNoteBlock 是 Blockquote 的增强版，在左边显示图标，并且可以自定颜色。而 Note 是 NoteBlock 的简便写法。请将您的 Volantis 升级至 2.3 版本以上使用。 语法格式参数列表示例写法示例效果Note 1&#123;% note 样式参数, 文本内容 %&#125; NoteBlock 12345&#123;% noteblock 样式参数 %&#125;文本段落&#123;% endnoteblock %&#125;样式参数位置可以写图标和颜色，多个样式参数用空格隔开。 图标 彩色的1quote, info, warning, done/success, error/danger 灰色的，也可以指定颜色1radiation, bug, idea, link, paperclip, todo, msg, guide, download, up, undo 颜色 指定颜色1clear, light, gray, red, yellow, green, cyan, blueNote example.md:123&#123;% note, 为简单的一句话提供的简便写法。 %&#125;&#123;% note success, 支持同样丰富的参数。 %&#125; NoteBlock example.md:1234567891011121314151617181920212223可以在区块中放置一些复杂的结构，支持嵌套。&#123;% noteblock quote %&#125;&#123;% p subtitle, 小标题 %&#125;Windows 10不是為所有人設計,而是為每個人設計&#123;% p subtitle, 嵌套测试 %&#125;&#123;% noteblock %&#125;请坐和放宽，我正在帮你搞定一切...&#123;% endnoteblock %&#125;&#123;% p subtitle, Folding 测试 %&#125;&#123;% folding 点击查看更多 %&#125;&#123;% note warning, 不要说我们没有警告过你 %&#125;&#123;% noteblock bug red %&#125;我们都有不顺利的时候&#123;% endnoteblock %&#125;&#123;% endfolding %&#125;&#123;% endnoteblock %&#125;Note 为简单的一句话提供的简便写法。 支持同样丰富的参数。 NoteBlock 可以在区块中放置一些复杂的结构，支持嵌套。 小标题Windows 10不是為所有人設計,而是為每個人設計嵌套测试 请坐和放宽，我正在帮你搞定一切… Folding 测试 点击查看更多 不要说我们没有警告过你 我们都有不顺利的时候 Checkbox &amp; Radio请将您的 Volantis 升级至 2.6 版本以上使用。 语法格式参数列表示例写法示例效果1&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;颜色 1red, yellow, green, cyan, blue 样式 1plus, minus, times 选中状态 1checkedCheckbox example.md:12345678910&#123;% checkbox 纯文本测试 %&#125;&#123;% checkbox checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;&#123;% checkbox red, 支持自定义颜色 %&#125;&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;&#123;% checkbox plus green checked, 增加 %&#125;&#123;% checkbox minus yellow checked, 减少 %&#125;&#123;% checkbox times red checked, 叉 %&#125; Radio example.md:1234567&#123;% radio 纯文本测试 %&#125;&#123;% radio checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;&#123;% radio red, 支持自定义颜色 %&#125;&#123;% radio green, 绿色 %&#125;&#123;% radio yellow, 黄色 %&#125;&#123;% radio cyan, 青色 %&#125;&#123;% radio blue, 蓝色 %&#125;Checkbox 纯文本测试 支持简单的 markdown 语法 支持自定义颜色 绿色 + 默认选中 黄色 + 默认选中 青色 + 默认选中 蓝色 + 默认选中 增加 减少 叉 Radio 纯文本测试 支持简单的 markdown 语法 支持自定义颜色 绿色 黄色 青色 蓝色 按钮和菜单基础按钮请将您的 Volantis 升级至 2.4 版本以上使用。 语法格式参数列表示例写法示例效果1&#123;% btn 样式参数（可选）, 标题, 链接, 图标（可选） %&#125; 可选的参数可以省略，但是前后顺序不能乱。样式参数 1regular, large, center 图标 第1个或者第2个参数包含 fa- 的那个被识别为图标。example.md:123456789不设置任何参数的 &#123;% btn 按钮, / %&#125; 适合融入段落中。regular 按钮适合独立于段落之外：&#123;% btn regular, 示例博客, https://xaoxuu.com, fas fa-play-circle %&#125;large 按钮更具有强调作用，建议搭配 center 使用：&#123;% btn center large, 开始使用, https://volantis.js.org/v2/getting-started/, fas fa-download %&#125;不设置任何参数的 按钮 适合融入段落中。 regular 按钮适合独立于段落之外： 示例博客 large 按钮更具有强调作用，建议搭配 center 使用： 开始使用 富文本按钮请将您的 Volantis 升级至 2.3 版本以上使用。 语法格式参数列表示例写法示例效果1234&#123;% btns 样式参数 %&#125;&#123;% cell 标题, 链接, 图片或者图标 %&#125;&#123;% cell 标题, 链接, 图片或者图标 %&#125;&#123;% endbtns %&#125;样式参数位置可以写图片样式、布局方式，多个样式参数用空格隔开。 圆角样式 默认为方形 1rounded, circle 布局方式 默认为自动宽度，适合视野内只有一两个的情况。 参数 含义 wide 宽一点的按钮 fill 填充布局，自动铺满至少一行，多了会换行。 center 居中，按钮之间是固定间距。 around 居中分散 grid2 等宽最多2列，屏幕变窄会适当减少列数。 grid3 等宽最多3列，屏幕变窄会适当减少列数。 grid4 等宽最多4列，屏幕变窄会适当减少列数。 grid5 等宽最多5列，屏幕变窄会适当减少列数。 增加文字样式 可以在容器内增加 &lt;b&gt;标题&lt;/b&gt; 和 &lt;p&gt;描述文字&lt;/p&gt;如果需要显示类似「团队成员」之类的一组含有头像的链接： example.md:1234567&#123;% btns circle grid5 %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% endbtns %&#125; 或者含有图标的按钮： example.md:1234&#123;% btns rounded grid5 %&#125;&#123;% cell 下载源码, /, fas fa-download %&#125;&#123;% cell 查看文档, /, fas fa-book-open %&#125;&#123;% endbtns %&#125; 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中 example.md:1234567891011121314&#123;% btns circle center grid5 %&#125;&lt;a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'&gt; &lt;i class='fab fa-apple'&gt;&lt;/i&gt; &lt;b&gt;心率管家&lt;/b&gt; &#123;% p red, 专业版 %&#125; &lt;img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'&gt;&lt;/a&gt;&lt;a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'&gt; &lt;i class='fab fa-apple'&gt;&lt;/i&gt; &lt;b&gt;心率管家&lt;/b&gt; &#123;% p green, 免费版 %&#125; &lt;img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'&gt;&lt;/a&gt;&#123;% endbtns %&#125;如果需要显示类似「团队成员」之类的一组含有头像的链接： xaoxuu xaoxuu xaoxuu xaoxuu xaoxuu 或者含有图标的按钮： 下载源码 查看文档 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中 心率管家 专业版 心率管家 免费版 Menu请将您的 Volantis 升级至 2.4 版本以上使用。 语法格式示例写法示例效果容器 123&#123;% menu 下拉菜单, 图标 %&#125;菜单内容&#123;% endmenu %&#125; 菜单内容 菜单项 1&#123;% menuitem 文本, 链接, 图标 %&#125; 分割线 1&#123;% menuitem hr %&#125; 子菜单 123&#123;% submenu 嵌套菜单, 图标 %&#125;菜单内容&#123;% endsubmenu %&#125;12345678910&#123;% menu 下拉菜单 %&#125;&#123;% menuitem 主题源码, https://github.com/xaoxuu/hexo-theme-volantis/, fas fa-file-code %&#125;&#123;% menuitem 更新日志, https://github.com/xaoxuu/hexo-theme-volantis/releases/, fas fa-clipboard-list %&#125;&#123;% menuitem hr %&#125;&#123;% submenu 有疑问？, fas fa-question-circle %&#125;&#123;% menuitem 看 FAQ, /faqs/ %&#125;&#123;% menuitem 看 本站源码, https://github.com/xaoxuu/volantis-docs/ %&#125;&#123;% menuitem 提 Issue, https://github.com/xaoxuu/hexo-theme-volantis/issues/ %&#125;&#123;% endsubmenu %&#125;&#123;% endmenu %&#125; 下拉菜单 主题源码 更新日志 有疑问？ 看 FAQ 看 本站源码 提 Issue 容器Tab此插件移植自 NexT #tabs 。请将您的 Volantis 升级至 2.1 版本以上使用。 语法格式参数列表123456789101112131415&#123;% tabs tab-id %&#125;&lt;!-- tab tab-name --&gt;![](https://i.loli.net/2020/03/18/f5PQlWisvm9zbgK.jpg)&lt;!-- endtab --&gt;&lt;!-- tab tab-name --&gt;这里面写内容，支持的语法格式有限，请尽量&lt;u&gt;不要&lt;/u&gt;写太过复杂的东西。&lt;!-- endtab --&gt;&#123;% endtabs %&#125;tab-id 必填，如果一个页面有多个 tabs 时，tab-id 不能重复。 tab-name 标签文本。 Folding请将您的 Volantis 升级至 2.3 版本以上使用。 语法格式参数列表示例写法示例效果12345&#123;% folding 参数（可选）, 标题 %&#125;![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endfolding %&#125;参数位置可以填写颜色和状态，多个参数用空格隔开。 颜色 1blue, cyan, green, yellow, red 状态 状态填写 open 代表默认打开。123456789101112131415161718192021222324252627282930313233343536&#123;% folding 查看图片测试 %&#125;![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-wallpaper&#x2F;abstract&#x2F;41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endfolding %&#125;&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;这是一个默认打开的折叠框。&#123;% endfolding %&#125;&#123;% folding green, 查看代码测试 %&#125;&#123;% endfolding %&#125;&#123;% folding yellow, 查看列表测试 %&#125;- haha- hehe&#123;% endfolding %&#125;&#123;% folding red, 查看嵌套测试 %&#125;&#123;% folding blue, 查看嵌套测试2 %&#125;&#123;% folding 查看嵌套测试3 %&#125;hahaha &lt;span&gt;&lt;img src&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;emoji&#x2F;tieba&#x2F;%E6%BB%91%E7%A8%BD.png&#39; style&#x3D;&#39;height:24px&#39;&gt;&lt;&#x2F;span&gt;&#123;% endfolding %&#125;&#123;% endfolding %&#125;&#123;% endfolding %&#125; 查看图片测试 查看默认打开的折叠框 这是一个默认打开的折叠框。 查看代码测试 12345&#123;% folding green, 查看代码测试 %&#125;查看代码测试&#123;% endfolding %&#125; 查看列表测试 hahahehe 查看嵌套测试 查看嵌套测试2 查看嵌套测试3 hahaha 多媒体包括图片、音频、视频。 ImageImage 标签是一种针对单个图片应用场景的标签，支持图片描述文字和指定宽度。请将您的 Volantis 升级至 2.6 版本以上使用。 语法格式参数列表示例写法示例效果1&#123;% image 链接, 宽度（可选）, 描述（可选） %&#125;图片宽度 阿拉伯数字 + px example:1300px 图片描述 纯文本，不能包含引号。example.md:1234567891011添加描述：&#123;% image https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg, 每天下课回宿舍的路，承载了太多记忆。 %&#125;指定宽度：&#123;% image https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg, 300px %&#125;指定宽度并添加描述：&#123;% image https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg, 300px, 每天下课回宿舍的路，承载了太多记忆。 %&#125;添加描述： 指定宽度： 指定宽度并添加描述： FancyboxFancybox 标签是一种针对一组图片应用场景的标签。请将您的 Volantis 升级至 2.2 版本以上使用。 语法格式参数列表示例写法示例效果1234&#123;% fancybox 参数, 列数 %&#125;![图片描述](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg)![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg)&#123;% endfancybox %&#125;对齐方向 1left, center, right 缩放 1stretch 列数 逗号后面直接写列数，支持 2 ～ 8 列。设定列列数之后就是「多行多图」布局，此时图片默认左对齐。为了避免图片大小不一，建议搭配 stretch 来时图片放大填充。一行一个图片 example.md:123&#123;% fancybox %&#125;![图片描述](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endfancybox %&#125; 一行多个图片（不换行） example.md:12345&#123;% fancybox %&#125;![图片描述](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg)![图片描述](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg)![图片描述](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/00E0F0ED-9F1C-407A-9AA6-545649D919F4.jpeg)&#123;% endfancybox %&#125; 多行多个图片（每行2～8个图片） example.md:12345678910&#123;% fancybox stretch, 4 %&#125;![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B951AE18-D431-417F-B3FE-A382403FF21B.jpeg)![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/AEB33F9D-7294-4CF1-B8C5-3020748A9D45.jpeg)![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/250662D4-5A21-4AAA-BB63-CD25CF97CFF1.jpeg)![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/10A0FCE5-36A1-4AD0-8CF0-019259A89E03.jpeg)![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B951AE18-D431-417F-B3FE-A382403FF21B.jpeg)![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/AEB33F9D-7294-4CF1-B8C5-3020748A9D45.jpeg)![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/250662D4-5A21-4AAA-BB63-CD25CF97CFF1.jpeg)![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/10A0FCE5-36A1-4AD0-8CF0-019259A89E03.jpeg)&#123;% endfancybox %&#125;一行一个图片 一行多个图片（不换行） 多行多个图片（每行2～8个图片） Audio请将您的 Volantis 升级至 2.4 版本以上使用。 语法格式示例写法示例效果example.md:1&#123;% audio 音频链接 %&#125;example.md:1&#123;% audio https://github.com/xaoxuu/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;Your browser does not support the audio tag. Video请将您的 Volantis 升级至 2.3 版本以上使用。 语法格式参数列表示例写法示例效果单个视频 example.md:1&#123;% video 视频链接 %&#125; 多个视频 example.md:12345&#123;% videos 对齐方向, 列数 %&#125;&#123;% video 视频链接 %&#125;&#123;% video 视频链接 %&#125;&#123;% video 视频链接 %&#125;&#123;% endvideos %&#125;对齐方向 1left, center, right 列数 逗号后面直接写列数，支持 1 ～ 4 列。100%宽度 example.md:1&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125; 50%宽度 example.md:123456&#123;% videos, 2 %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% endvideos %&#125; 25%宽度 example.md:12345678910&#123;% videos, 4 %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% endvideos %&#125;100%宽度 Your browser does not support the video tag. 50%宽度 Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. 25%宽度 Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. APlayer主题对 APlayer 插件的样式进行了兼容。安装插件： 1npm i -S hexo-tag-aplayer 官方文档： hexo-tag-aplayer 公式MathJax公式默认是不渲染的，如果文章内有公式，需要在 front-matter 中设置开启。 example.md:12345678910111213141516171819202122232425---title: 渲染公式（MathJax）date: 2020-02-23mathjax: true # false: 不渲染, true: 渲染, internal: 只在文章内部渲染，文章列表中不渲染---$$t+1=2$$$$\\mbox&#123;积累因子&#125;=\\begin&#123;cases&#125;1+ni &amp; \\mbox&#123;单利&#125;\\\\\\\\(1+i)^n &amp; \\mbox&#123;复利&#125;\\end&#123;cases&#125;$$$$\\begin&#123;equation&#125;\\sum_&#123;i=0&#125;^n F_i \\cdot \\phi (H, p_i) - \\sum_&#123;i=1&#125;^n a_i \\cdot ( \\tilde&#123;x_i&#125;, \\tilde&#123;y_i&#125;) + b_i \\cdot ( \\tilde&#123;x_i&#125;^2 , \\tilde&#123;y_i&#125;^2 )\\end&#123;equation&#125;$$$$\\begin&#123;equation&#125;\\beta^*(D) = \\mathop&#123;argmin&#125; \\limits_&#123;\\beta&#125; \\lambda &#123;||\\beta||&#125;^2 + \\sum_&#123;i=1&#125;^n max(0, 1 - y_i f_&#123;\\beta&#125;(x_i))\\end&#123;equation&#125;$$ 示例效果 $$t+1=2$$$$\\mbox{积累因子}=\\begin{cases}1+ni &amp; \\mbox{单利}\\\\(1+i)^n &amp; \\mbox{复利}\\end{cases}$$$$\\begin{equation}\\sum_{i=0}^n F_i \\cdot \\phi (H, p_i) - \\sum_{i=1}^n a_i \\cdot ( \\tilde{x_i}, \\tilde{y_i}) + b_i \\cdot ( \\tilde{x_i}^2 , \\tilde{y_i}^2 )\\end{equation}$$$$\\begin{equation}\\beta^*(D) = \\mathop{argmin} \\limits_{\\beta} \\lambda {||\\beta||}^2 + \\sum_{i=1}^n max(0, 1 - y_i f_{\\beta}(x_i))\\end{equation}$$ 如果公式仍无法正确渲染可以阅读 @MicDZ 的这篇文章：《在material-x上使用KaTeX》。 Hexo 标签引用块引用书上的句子 Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 代码块123&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;code snippet&#123;% endcodeblock %&#125; 指定语言1[rectangle setX: 10 y: 10 width: 20 height: 20]; example.md:123&#123;% codeblock lang:objc %&#125;[rectangle setX: 10 y: 10 width: 20 height: 20];&#123;% endcodeblock %&#125; 附加说明Array.map1array.map(callback[, thisArg]) example.md:123&#123;% codeblock Array.map %&#125;array.map(callback[, thisArg])&#123;% endcodeblock %&#125; 行标、高亮12345678n=eval(input())if n==0: print(\"Hello World\")elif n&gt;0: print(\"He\\nll\\no \\nWo\\nrl\\nd\")else: for c in \"Hello World\": print(c) example.md:12345678910&#123;% codeblock lang:python line_number:true mark:3,5,8 %&#125;n=eval(input())if n==0: print(\"Hello World\")elif n&gt;0: print(\"He\\nll\\no \\nWo\\nrl\\nd\")else: for c in \"Hello World\": print(c)&#123;% endcodeblock %&#125; Pull Quote在文章中插入 Pull quote example.md:123&#123;% pullquote [class] %&#125;content&#123;% endpullquote %&#125; jsFiddle在文章中嵌入 jsFiddle example.md:1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; Gist在文章中嵌入 Gist，注意：在国内无法加载。 example.md:1&#123;% gist gist_id [filename] %&#125; iframe在文章中插入 iframe example.md:1&#123;% iframe url [width] [height] %&#125; Image在文章中插入指定大小的图片。 example.md:1&#123;% img [class names] /path/to/image [width] [height] '\"title text\" \"alt text\"' %&#125; Link在文章中插入链接，并自动给外部链接添加 target=&quot;_blank&quot; 属性。 example.md:1&#123;% link text url [external] [title] %&#125; Include Code插入 source/downloads/code 文件夹内的代码文件。source/downloads/code 不是固定的，取决于你在配置文件中 code_dir 的配置。 example.md:1&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125; 示例 嵌入 test.js 文件全文1&#123;% include_code lang:javascript test.js %&#125;只嵌入第 3 行1&#123;% include_code lang:javascript from:3 to:3 test.js %&#125;嵌入第 5 行至第 8 行1&#123;% include_code lang:javascript from:5 to:8 test.js %&#125;嵌入第 5 行至文件结束1&#123;% include_code lang:javascript from:5 test.js %&#125;嵌入第 1 行至第 8 行1&#123;% include_code lang:javascript to:8 test.js %&#125; 引用文章引用其他文章的链接。 12&#123;% post_path filename %&#125;&#123;% post_link filename [title] [escape] %&#125; 示例 引用这篇文章：example.md:1引用这篇文章：&#123;% post_link news/2020-02-22 %&#125; 文章摘要和截断在文章中使用 &lt;!-- more --&gt;，那么 &lt;!-- more --&gt; 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。 更多请见Hexo官方文档：#标签插件 向开发者反馈问题","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/tags/Hexo/"}]},{"title":"bug-解决总结","slug":"Bug/bug-解决总结","date":"2020-05-19T12:00:06.000Z","updated":"2020-07-14T07:38:06.482Z","comments":true,"path":"2020/05/19/Bug/bug-解决总结/","link":"","permalink":"https://blog.wztlink1013.com/2020/05/19/Bug/bug-%E8%A7%A3%E5%86%B3%E6%80%BB%E7%BB%93/","excerpt":"","text":"一、关于bug在编写程序过程中，总会出现各种各样的bug，按bug得类型来分的话 程序的逻辑出错 程序语法出错编译器不能通过 对待bug的心态要端正，对bug，不能抵触不能畏惧不能怕麻烦，要想着解bug就是这个职业的要务之一，要有耐心，积极主动的去解决问题。一步一步的解决问题，所有的技术都是熟能生巧、 二、解决bug的一些方法报错信息+理论知识当一个bug摆在面前，首先要做的就是要认真阅读展现出来的出错信息，这里面有几点需要注意 提高英语 专业词汇的积累、阅读能力等 运用底层知识 学会运行所学过的理论知识，比如在编程过程中，出现路径相关的错误，首先是根据报错可以直接在代码里面更改为正确可运行代码，然后可以利用所学过的操作系统相关文件管理知识等来进一步底层分析之，最后可以旁通自己之前搭建环境过程种总是要配的环境变量，一起思考一起分析，发散性思考，触类旁通所学知识，运用之 IDE的Debug或print通法 熟悉各种开发环境的debug 搜索引擎 一个原则：“遇事不决，大事谷歌，小事百度” 谷歌需要一些手段才能进行，总结下来就是搭建一个机场，方便，安全 百度解决一些小问题，抑或是 “烂大街的易错知识” 相关编程论坛，比如Stack Overflow、CSDN、博客园等（还是要用谷歌） 结果择优原则 环境统一：解决办法的环境需要和自己的bug的环境需要一致 非毁灭性原则：尽量不要做全局性的修改，比如用命令删除git的两个文件来改一个小bug，属实挖坑 擅用官方文档 如果说出现的bug抑或是，使用某个知识出错，是在官方文档中能查到的，优先选择官方文档 就比如在使用python数据分析的时候，许多时候，很多包（pandas、numpy、matplotlib等）更新比较快，而网上找的一般都是旧版本的指导。同时官方文档讲解更加全面，不过这过程中，要注意提高自身英语水平！ “思维冥想体” 地阶 运用万能学习方法，去复现一个学习（复现代码）过程，复盘bug之前的工作，来从中找出可能有哪些细节会导致出现该bug。 天阶 按照思路重写代码！再不行重装系统！ 重构，让你的代码更优美和简洁~ 重装，让你的世界焕然一新~ 三、多记录多总结多仔细 bug遇见的多了，也就由“形同陌路”转变为“日久生情”了! 良好的编程习惯加快解决速度 做事情还是粗心，百分之九十的bug都来源于粗心， 四、持续补充 在利用搜索引擎找到解决办法时候，不要 吃着嘴里的，想着锅里的 ，找到一个办法，先将其解决办法看懂看透彻，不要这个方法还没看透彻就看下一个答案。 学会提取关键词来搜索，能提高很大效率","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"}]},{"title":"JAVA-常用类","slug":"Language/JAVA-常用类","date":"2020-05-16T06:45:47.000Z","updated":"2020-07-14T05:30:56.676Z","comments":true,"path":"2020/05/16/Language/JAVA-常用类/","link":"","permalink":"https://blog.wztlink1013.com/2020/05/16/Language/JAVA-%E5%B8%B8%E7%94%A8%E7%B1%BB/","excerpt":"","text":"Date类Random类 Point2D类","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://blog.wztlink1013.com/tags/JAVA/"}]},{"title":"git常见使用总结","slug":"Environment/git常见使用总结","date":"2020-04-06T12:19:02.000Z","updated":"2020-07-14T05:30:56.673Z","comments":true,"path":"2020/04/06/Environment/git常见使用总结/","link":"","permalink":"https://blog.wztlink1013.com/2020/04/06/Environment/git%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"git小总结","text":"git小总结 一、Git安装和本地用户全局配置官网下载并且安装 查看是否安装成功win + R输入git，出现git命令指南，则安装成功 全局配置本地用户，在git Bash中进行下面配置（尽量仔细，检查一遍），下面的账号名字和邮箱都是github的账号所使用的 12git config --global user.name &quot;wztlink1013&quot;git config --global user.email &quot;2550374815@qq.com&quot; 其中：global表示全局可用，如果要设置局部可用，则只需要删除global即可 验证是否配置成功：git config --global --list 二、利用SSH绑定Git和GitHub生成输入ssh-keygen -t rsa，然后回车三下 （有些时候要回车四下） 然后在用户管理员文件夹下生成两个文件夹id_rsa和id_rsa.pub,将后者内容添加到GitHub上即可。 添加在github上的setting上添加新的ssh即可 验证在git Bash输入：ssh -T git@github.com 如果出现Hi name !you are……证明绑定成功。 如果报错，则是因为少了一个文件，使用过程中直接点yes。具体解决原理 三、Git向GitHub提交代码了解pull和push git push origin master git pull origin master 提交情况1：clone本地没有git仓库，也没有git init操作，需要先从GitHub下载 选定仓库克隆 git clone https://github.com/wztlink1013/Python_DataAnalysis.git 对本地文件夹进行一系列更改之后，执行命令： 12345git status #查看仓库命令状态git add . #文件提交到文件缓冲区git commmit -m &quot;描述本次修改信息&quot; #提交仓库并且添加提交信息git log #查看修改日志git status #再次查看 push到远程仓库 首次推送：git push -u origin master 非首次推送：git push origin master 提交情况2：pull这种情况是，本地有git仓库，指之前已经进行git init等一系列命令对该文件夹操作过。新建一个例子： git init初始化本地仓库 git remote add origin https://github.com/guobinhit/springmvc-tutorial.git关联远程仓库 git pull origin master同步远程仓库和本地仓库 假如在本地新加文件： 执行git status等命令 再执行git push origin master将本地新内容提交到远程仓库 注意！：在进行本地仓库和远程仓库的文件交互时，一定要先pull再push，不然会出未知错误。 四、常用命令总结1234567891011git init git statusgit addgit commitgit loggit branch #查看分支git checkout #切换分支git merge #合并分支git branch -d #删除分支git tag #给分支添加标签git remote -v #查看相关信息 五、部署多个github/+coding等账号思路好处：一台设备可以使用多个github账号/github+coding等等多平台托管/搭建两个静态博客 取消全局用户配置（每建立一个新文件夹，需要输入使用账号），建立多个ssh密匙（如果是github账号+coding账号+gitee账号等） SSH的公钥是GitHub连接本地仓库和远程仓库的标识，一个公钥只能对应一个GitHub账户，一个相同的公钥不能上传到不同的GitHub账户 一台电脑，可以生成多对公私钥，可以通过配置，将不同的公钥上传到不同的GitHub账号，那么就不存在单个公钥绑定多个GitHub账号的情况存在了 多密匙生成 先进来该文件夹（忽略图片上写的字） 创建新密匙方法一（首选） ssh-keygen -t rsa -f ~/.ssh/这里是新密钥名称 -C &quot;这里是你的邮箱&quot; 注意区别新密钥名称和旧密钥名称，不要相同！！ 创建新密匙方法二 输入这个：ssh-keygen -t rsa -C &quot;这里是你的邮箱&quot; 出现这两句：Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): 注意此时需要你输入新密钥的名称，同样要注意区别新密钥名称和旧密钥名称，不要相同，之后再两次回车。 配置config.ssh根文件夹下没有config文件，需要新建 新建config文件方法一 在.ssh根路径下键入该命令touch config 新建config文件方法二 记事本新建文件config文件！！没有后缀 输入内容 1234567891011#第一个账号，默认使用的账号，不用做任何更改Host github.com HostName github.com User git IdentityFile ~&#x2F;.ssh&#x2F;id_rsa #第二个新账号，#&quot;xxxxxx&quot;为前缀名，可以任意设置，要记住，后面需要用到Host xxxxxx.github.com HostName github.com User git IdentityFile ~&#x2F;.ssh&#x2F;这里是你创建的新密钥的名称 12345678910111213# one(one@gmail.com)Host one.github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~&#x2F;.ssh&#x2F;id_rsa_oneUser one # two(two@gmail.com)Host two.github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~&#x2F;.ssh&#x2F;id_rsa_twoUser two 123456Host myhost（这里是自定义的host简称，以后连接远程服务器就可以用命令ssh myhost）HostName 主机名可用ip也可以是域名(如:github.com或者bitbucket.org)Port 服务器open-ssh端口（默认：22,默认时一般不写此行）PreferredAuthentications 配置登录时用什么权限认证--可设为publickey,password publickey,keyboard-interactive等IdentityFile 证书文件路径（如~&#x2F;.ssh&#x2F;id_rsa_*)User 登录用户名(如：git) 每个账号单独配置一个Host，每个Host要取一个别名，一般为每个Host主要配置HostName和IdentityFile两个属性，配置完保存即可。 Host的名字可以自定义名字，不过这个会影响git相关命令，例如：Host mygithub 这样定义的话，使用命令git clone git@mygithub:PopFisher/AndroidRotateAnim.git，git@后面紧跟的名字改为mygithub mine 部署SSH key将根文件夹下的wztlink1013.pub文件复制到github上，coding/gitee类似 title可以随便填 清缓存，添agent在根目录下 123ssh-add -Dssh-add xxxxxx #旧密钥名称，一般是id_rsassh-add xxxxxx #新创建的密钥名称 如果执行以上命令出现错误：Could not open a connection to your authentication agent.，那么就需要先执行ssh-agent bash，再执行以上命令 验证是否配置成功一下第一个是之前默认的github账号，默认即可，第二个是添加的 12ssh -T git@github.comssh -T git@xxxxxxx.github.com 出现Hi 你的用户名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.则成功。 使用 取消全局用户名和邮箱配置（如果已经设置了全局的话） 12git config --global --unset user.namegit config --global --unset user.email clone 原来：git clone git@github.com: wztlink1013/learngit.git 现在： 12git clone git@wztlink1013.github.com: wztlink1013&#x2F;learngit.gitgit clone git@twicename.github.com: twicename&#x2F;learngit.git 单独为每个repo设置 用户名/邮箱【以文件夹为单位】12345git config user.name &quot;wztlink1013&quot;git config user.email &quot;2550374815@qq.com&quot;git config user.name &quot;twicename&quot;git config user.email &quot;123456789@qq.com&quot; 如果报错：fatal: not in a git directory，说明没有进入.git目录下，具体路径：其中.git目录是隐藏的，需要你设置隐藏目录可见 执行git config --list查看设置是否成功 六、参考资料 GitHub简单使用https://github.com/guobinhit/cg-blog/blob/master/articles/github/README.md 多账号https://www.itrhx.com/2019/01/18/A16-deploy-two-or-more-hexo-blogs/ 多账号https://blog.csdn.net/u013716535/article/details/78621775 多账号https://blog.csdn.net/IT_xiao_bai/article/details/88563103?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task&lt;!–stackedit_data:eyJoaXN0b3J5IjpbMTUxODQyMDQyOF19 -&gt;","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.wztlink1013.com/tags/git/"}]},{"title":"C++-遗忘知识","slug":"Language/C++-遗忘知识","date":"2020-04-05T13:44:15.000Z","updated":"2020-07-12T11:48:16.906Z","comments":true,"path":"2020/04/05/Language/C++-遗忘知识/","link":"","permalink":"https://blog.wztlink1013.com/2020/04/05/Language/C++-%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86/","excerpt":"","text":"这学期的C++C++语言是一种混合型语言（20世纪80年代兴起），它保留了C语言所有的优点，同时又增添了面向对象的编程机制，我们可以将C++语言视为C语言的改进和扩展。 基于C语言开发的C++语言兼容C语言，因此用C语言编写的程序基本上可以不做改动地用于C++。相对于C语言，C++语言对C语言的功能做了一定的扩充，同时增添了面向对象编程机制。引入面向对象编程机制，主要是为了提高开发效率。 早期C++许多的工作是对于C的强化和净化，并把完全兼容C作为强制性要求。C89、C99中许多的改进正是从C++中所引进。可见，Stroustrup对C语言的贡献非常之大。今天不管你对C++怎么看，C++的确扩展和进化了C，对C造成了深远的影响。 在C++兼容C的过程中遇到了不少设计实现上的麻烦；以及守旧的K&amp;R C程序员对Stroustrup的批评。很多人说C++的恶梦恶梦就是要去兼容于C，这并不无道理（Java就干的比C++彻底得多），但这并不是Stroustrup考虑的，Stroustrup一边在使尽浑身解数来兼容C，另一方面在拼命地优化C。 C++最大的竞争对手正是C，他的目的就是——C能做到的，C++也必须做到，而且要做的更好。大家觉得是不是做到了？有多少做到了，有多少还没有做到？ 对于同时关注的运行效率和开发效率的程序员，Stroustrup多次强调C++的目标是——“在保证效率与C语言相当的情况下，加强程序的组织性；能保证同样功能的程序，C++更短小”，这正是浅封装的核心思想。而不是过渡设计的OO。 《C++演化和设计》这本书中举了很多例子来回应那些批评C++有运行性能问题的人。C++在其第二个版本中，引入了虚函数机制，这是C++效率最大的瓶颈了，但我个人认为虚函数就是多了一次加法运算，但让我们的代码能有更好的组织，极大增加了程序的阅读和降底了维护成本。（注：Lippman的《深入探索C++对象模型》也说明了C++不比C的程序在运行性能低。Bruce的《Think in C++》也说C++和C的性能相差只有5%） 这本书中还讲了一些C++的痛苦的取舍，印象最深的就是多重继承，提出，拿掉，再被提出，反复很多次，大家在得与失中不断地辩论和取舍。这个过程让我最大的收获是——a) 对于任何一种设计都有好有坏，都只能偏重一方，b) 完全否定式的批评是不好的心态，好的心态应该是建设性地批评。 相对运行于虚拟机语言，C/C++直接以静态形式把源程序编译为目标平台的机器码。一般而言，C/C++程序在编译及链接时可进行的优化最丰富，启动时的速度最快，运行时的额外内存开销最少。而C/C++相对动态语言也减少了运行时的动态类型检测。此外，C/C++的运行行为是确定的，且不会有额外行为，也不会有如垃圾收集(GC)而造成的不确定性延迟，而且C/C++的数据结构在内存中的布局也是确定的。有时C++的一些功能会使程序性能优于C，当中以内联和模版最为突出，这两项功能使C++标准库的sort()通常比C标准库的qsort()快多倍(C可用宏或人手编码去解决此问题)。另一方面，C/C++能直接映射机器码，之间没有另一层中间语言，因此可以做底层优化，例如使用内部(intrinsic)函数和嵌入汇编语言。然而，许多C++的性能优点并非免费午餐，代价包括较长的编译链接时间和较易出错，因而增加开发时间和成本。 vectorC++模板知识 函数模板 类模板&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADSTL概述当中，vector容器，顺序容器：向量vector、列表list、双端队列deque https://www.cnblogs.com/mr-wid/archive/2013/01/22/2871105.html","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://blog.wztlink1013.com/tags/C/"},{"name":"C","slug":"C","permalink":"https://blog.wztlink1013.com/tags/C/"}]},{"title":"Eclipse配置Tomcat创建Servlet总结","slug":"Environment/eclipse配置Tomcat创建Servlet总结","date":"2020-04-02T05:03:16.000Z","updated":"2020-07-12T13:12:27.836Z","comments":true,"path":"2020/04/02/Environment/eclipse配置Tomcat创建Servlet总结/","link":"","permalink":"https://blog.wztlink1013.com/2020/04/02/Environment/eclipse%E9%85%8D%E7%BD%AETomcat%E5%88%9B%E5%BB%BAServlet%E6%80%BB%E7%BB%93/","excerpt":"","text":"一、Eclipse的下载与安装与使用下载地址 注意不要下错版本，不然开发不了web环境 二、Tomcat的下载与配置下载地址一直下一步即可 打开浏览器 键入 http://localhost:8080 进入页面则表示安装成功 添加环境变量，以下全在系统环境变量下配置 12345TOMCAT_HOME：C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0CATALINA_BASE：C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0;CATALINA_HOME：C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0;在classpath当中加入%CATALINA_HOME%\\common\\lib\\servlet-api.jar;在path中加入%CATALINA_HOME%\\bin; 打开浏览器 键入 http://localhost:8080 进入页面则表示配置成功 三、Eclipse配置Tomcat让Tomcat服务器显示在控制台上，将Web应用部署到Tomcat中 点击Window → Show View → Servers 也可以在控制台点击Servers双击点击 四、Eclipse使用Servlet创建web工程创建过程中，要记得勾选生成web.xml文件选项 添加相关文件添加下面的四个文件 HelloWordServlet.java 123456789101112131415161718192021222324252627package cn.itcast.firstmyapp.servlet;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class HelloWordServlet extends HttpServlet &#123; protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; System.out.println(\"接受了客户端的请求----------------------------------------------------\"); // 设置响应类型: resp.setContentType(\"text/html\"); // 获取输出流: PrintWriter pw = resp.getWriter(); // 写入响应: pw.write(\"&lt;h1&gt;Hello, world!&lt;/h1&gt;\"); // 最后不要忘记flush强制输出: pw.flush(); &#125;&#125; web.xml 运行并查看结果运行然后查看console部分服务器响应情况 出现下图则说明成功 还可以回到控制台查看请求成功情况 五、过程中出现的问题IDEA上的部署一开始从tomcat部署是完成的，具体参考我的csdn一篇小文章地址。但是在后面使用Servlet的时候，不能成功部署，具体原因【图片内容来自链接！！】 暂时分析：是和idea下的根目录下的某个配置文件的默认配置有关，需要更改相关内容，暂时不折腾了。先记录下，有空再折腾，先学习。还是eclipse好配置··· 对待问题对待所发现的问题，第一要做的不是复制粘贴bug进谷歌百度，而是看待问题本身，找到问题的根源，用自己所学到的知识先加以分析理解，再想办法解决 参考资料 https://blog.csdn.net/weixin_34026276/article/details/93834823?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task https://blog.csdn.net/qq_38190185/article/details/88198794?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task 直接创建Servlet 快捷键：https://www.open-open.com/bbs/view/1320934157953&lt;!–stackedit_data:eyJoaXN0b3J5IjpbMzc5OTkwMzkwXX0= -&gt;","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[{"name":"Eclipse","slug":"Eclipse","permalink":"https://blog.wztlink1013.com/tags/Eclipse/"},{"name":"tomcat","slug":"tomcat","permalink":"https://blog.wztlink1013.com/tags/tomcat/"},{"name":"Servlet","slug":"Servlet","permalink":"https://blog.wztlink1013.com/tags/Servlet/"}]},{"title":"Eclipse的使用总结","slug":"Environment/eclipse使用","date":"2020-04-02T01:03:16.000Z","updated":"2020-07-12T13:12:43.401Z","comments":true,"path":"2020/04/02/Environment/eclipse使用/","link":"","permalink":"https://blog.wztlink1013.com/2020/04/02/Environment/eclipse%E4%BD%BF%E7%94%A8/","excerpt":"","text":"一、Eclipse的下载与安装下载地址 注意不要下错版本，不然开发不了web环境 二、插件 进入：Help Eclipse MarketPlace Plugin1：Waka Time 三、使用样式 字体设置 行数显示 更改工作空间的默认编码 代码增强显示，在设置中的java中的content Assistant中，将.改为.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789导入已存在的项目","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[{"name":"Eclipse","slug":"Eclipse","permalink":"https://blog.wztlink1013.com/tags/Eclipse/"}]},{"title":"java-找不到或无法加载主类","slug":"Bug/java-找不到或无法加载主类","date":"2020-04-01T12:00:06.000Z","updated":"2020-07-14T07:38:42.689Z","comments":true,"path":"2020/04/01/Bug/java-找不到或无法加载主类/","link":"","permalink":"https://blog.wztlink1013.com/2020/04/01/Bug/java-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB/","excerpt":"","text":"https://www.cnblogs.com/wangxiaoha/p/6293340.html https://bbs.csdn.net/topics/391862656?page=1 https://blog.csdn.net/qinshijangshan/article/details/53048342?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1 https://blog.csdn.net/lanchunhui/article/details/76339252 eclipse下的输入参数方式","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"},{"name":"JAVA","slug":"JAVA","permalink":"https://blog.wztlink1013.com/tags/JAVA/"}]},{"title":"javaweb-servlet技术","slug":"Web/JavaWeb-03servlet","date":"2020-04-01T11:56:07.000Z","updated":"2020-07-12T13:19:42.156Z","comments":true,"path":"2020/04/01/Web/JavaWeb-03servlet/","link":"","permalink":"https://blog.wztlink1013.com/2020/04/01/Web/JavaWeb-03servlet/","excerpt":"","text":"一、什么是Servlet什么是ServletServlet就是在服务器端的Java接口或者说是类（叫法有狭义广义之分），处理客户端传来的请求并作出相应的响应这么一个网络模块。 请求：客户端传来的调用或是一系列行为，同时也包含了请求所需要的数据。 响应：服务器根据客户端传来的请求做出响应，实时的展示给客户端。这之中Servlet相当于java类当中的一个接口，以请求来的信息作为输入，然后进行分析，做出相应。 jsp和sevletservlet是控制层，jsp转换为servlet，用servlet来实现http请求。 【1】JSP第一次运行的时候会编译成Servlet，驻留在内存中以供调用。 【2】JSP是web开发技术，Servlet是服务器端运用的小程序，我们访问一个JSP页面时，服务器会将这个JSP页面转变成Servlet小程序运行得到结果后，反馈给用户端的浏览器。 【3】Servlet相当于一个控制层再去调用相应的JavaBean处理数据,最后把结果返回给JSP。 【4】Servlet主要用于转向，将请求转向到相应的JSP页面。 【5】JSP更多的是进行页面显示，Servlet更多的是处理业务，即JSP是页面，Servlet是实现JSP的方法。 【6】Servlet可以实现JSP的所有功能，但由于美工使用Servlet做界面非常困难，后来开发了JSP。 【7】JSP技术开发网站的两种模式：JSP + JavaBean；JSP + Servlet + JavaBean（一般在多层应用中, JSP主要用作表现层,而Servlet则用作控制层,因为在JSP中放太多的代码不利于维护，而把这留给Servlet来实现,而大量的重复代码写在JavaBean中）。 【8】二者之间的差别就是，开发界面是JSP直接可以编写。 比如在JSP中写Table标记：&lt;table&gt;[数据]&lt;/table&gt;； Servlet需要加入：out.println(“&lt;table&gt;[数据]&lt;/table&gt;”)。 JSP文件在被应用服务器(例如：Tomcat、Resin、Weblogic和Websphere),调用过之后，就被编译成为了Servlet文件。也就是说在网页上显示的其实是Servlet文件。Tomcat下面JSP文件编译之后生成的Servlet文件被放在了work文件夹下，JSP中的HTML代码在Servlet都被out出来，而JSP代码按照标签的不同会放在不同的位置。 【9】JSP中嵌入JAVA代码，而Servlet中嵌入HTML代码。 【10】在一个标准的MVC架构中，Servlet作为Controller接受用户请求并转发给相应的Action处理，JSP作为View主要用来产生动态页面，EJB作为Model实现你的业务代码。 二、Servlet一些基础接口及其实现类就是利用利用其类编写相关服务器端的相关运行代码 生命周期分三个阶段：初始化阶段-&gt;运行阶段-&gt;销毁阶段 HttpServlet类一般客户端和服务器之间都回使用http协议，所以Servlet接口中就提供了一个抽象类javax.servlet.http.HttpServlet，他是GernericServlet的一个子类，专门用来处理http协议的servlet；具体程序中就是用该类 HelloWordServlet.java 123456789101112131415161718192021222324252627package cn.itcast.firstmyapp.servlet;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class HelloWordServlet extends HttpServlet &#123; protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; System.out.println(\"接受了客户端的请求-----------------------------\"); // 设置响应类型: resp.setContentType(\"text/html\"); // 获取输出流: PrintWriter pw = resp.getWriter(); // 写入响应: pw.write(\"&lt;h1&gt;Hello, world!&lt;/h1&gt;\"); // 最后不要忘记flush强制输出: pw.flush(); &#125;&#125; 三、Servlet虚拟路径的映射1. 多重映射就相当于多加几个自己指定的访问路径，再web.xml中 2. 映射路径下使用通配符在其中使用通配符，一个目录下的所有路径都可以访问，其中有完全目录匹配，目录匹配，扩展名匹配 3. 缺省通常作用是解决请求的资源找不到的情况，（404：请求的资源找不到） 四、ServletConfig和ServletContext ServletConfig接口 类比于git根文件夹.ssh下的config配置文件，它是servlet的配置对象，目的就是获取与servlet的初始化参数 会使用常用的接口方法，","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.wztlink1013.com/categories/Web/"}],"tags":[]},{"title":"Web-JavaWeb概述","slug":"Web/JavaWeb-02JavaWeb概述","date":"2020-04-01T10:08:20.000Z","updated":"2020-07-12T13:23:35.368Z","comments":true,"path":"2020/04/01/Web/JavaWeb-02JavaWeb概述/","link":"","permalink":"https://blog.wztlink1013.com/2020/04/01/Web/JavaWeb-02JavaWeb%E6%A6%82%E8%BF%B0/","excerpt":"","text":"一、XML也是一种标记性语言，但是不同于html，目的其实就是用于传输数据，但是html的目的就是展示 可以类比，网站建好之后，需要将自己的文章链接提交到百度/谷歌，通过部署生成的baidusitemap.xml和sitemap.xml文件，sitemap提交方式提交以达到目的。 XML语法文档声明：图中最上面一行 元素定义：形式相当于html当中的标签，但不是标签，有根元素（一般只有一个），空元素等之分 属性定义：其中值需要用双引号或者单引号括起来 注释：和html一样 DTD约束有些时候文档内可能内容语义有歧义，所以需要对其xml文件内容尽可能的加以约束，DTD和Schema两种方式。具体语法··· Schema约束二、http协议 生成的web项目和服务器之间的传输协议 其中http1.1版本比1.0版本优化的是对http请求可以同时进行多个请求和响应 http请求消息客户端（web浏览器）向服务器发送请求，通常由请求行、请求头、实体内容三部分组成 请求行：请求方式，资源路径，http协议版本三部分组成。请求方式又有GET（所请求内容会在资源路径后面带上参数值，会有大小限制）和POST（安全，无大小限制）等方式 http响应消息也由三部分组成，有资源状态行、响应消息头、实体内容 资源状态行：协议版本 状态码 状态描述三部分组成。其中状态码有多种，常见的404就是服务器找不到相应请求的的资源 三、Tomcat关于Tomcat 下载安装Tomcat安装等方式参考博客 https://blog.csdn.net/ZTlink1013/article/details/104815639 四、Web应用简述 web应用，就是一项工程，在编写web项目过程中，对文件按照“合乎规矩”的方式放置 IDEA配置Tomcat搭建web开发环境 资源的访问，点击请求的页面跳转设置web.xml中配置 阮一峰的网站当中，有类似域名自动跳转，是否和域名解析有关呢？抑或是对web.xml进行了操作？ 对idea进行web开发 配置https://blog.csdn.net/ZTlink1013/article/details/104815639","categories":[{"name":"Web","slug":"Web","permalink":"https://blog.wztlink1013.com/categories/Web/"}],"tags":[]},{"title":"eb-8080端口被占用","slug":"Bug/javaweb-8080端口被占用","date":"2020-04-01T07:26:52.000Z","updated":"2020-07-14T07:38:46.113Z","comments":true,"path":"2020/04/01/Bug/javaweb-8080端口被占用/","link":"","permalink":"https://blog.wztlink1013.com/2020/04/01/Bug/javaweb-8080%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/","excerpt":"","text":"一、报错信息12345localhost:8080 is already in usePort 8080 required by Tomcat v8.0 Server at localhost is already in use. The server may already be running in another process, or a system process may be using the port. To start this server you will need to stop the other process or change the port number(s).Error running Tomcat8: Address localhost:8080 is already in use 一、分析并解决问题 电脑中8080端口被占用，导致web项目不能运行 任务管理器关闭占用8080端口的程序 netstat -ano tasklist 任务管理器","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"}]},{"title":"SQL-创建/插入表","slug":"Language/SQL-首课","date":"2020-03-29T09:04:37.000Z","updated":"2020-07-12T12:05:08.130Z","comments":true,"path":"2020/03/29/Language/SQL-首课/","link":"","permalink":"https://blog.wztlink1013.com/2020/03/29/Language/SQL-%E9%A6%96%E8%AF%BE/","excerpt":"","text":"一、关于SQL五个特点 二、数据定义三、SQL语法创建表12345678910111213141516171819202122232425262728293031323334Create table student( Sno char(9), Same char(20), Ssex char(2), Sage smallint, Sdept char(20));Create table course( Cno char(4), Cname char(40), Cpno char(4), Ccredit smallint);Create table sc( Sno char(9), Cno char(4), Grade smallint);Insert into student values(&#39;200215121&#39;,&#39;李勇&#39;,&#39;男&#39;,20,&#39;cs&#39;);Insert into student values(&#39;200215122&#39;,&#39;刘晨&#39;,&#39;女&#39;,19,&#39;cs&#39;);Insert into student values(&#39;200215123&#39;,&#39;王敏&#39;,&#39;女&#39;,18,&#39;ma&#39;);Insert into student values(&#39;200515124&#39;,&#39;张立&#39;,&#39;男&#39;,19,&#39;is&#39;); Insert into course values (&#39;1&#39;,&#39;数据库&#39;,&#39;5&#39;,4);Insert into course values (&#39;2&#39;,&#39;数学&#39;,NULL,2); Insert into course values(&#39;3&#39;,&#39;信息系统&#39;,&#39;1&#39;,4);Insert into course values(&#39;4&#39;,&#39;操作系统&#39;,&#39;6&#39;,3);Insert into course values(&#39;5&#39;,&#39;数据结构&#39;,&#39;7&#39;,4);Insert into course values(&#39;6&#39;,&#39;数据处理&#39;,NULL,2);Insert into course values(&#39;7&#39;,&#39;pascal语言&#39;,&#39;6&#39;,4);Insert into sc values(&#39;200215121&#39;,&#39;1&#39;,92);Insert into sc values(&#39;200215121&#39;,&#39;2&#39;,85);Insert into sc values(&#39;200215121&#39;,&#39;3&#39;,88);Insert into sc values(&#39;200215122&#39;,&#39;2&#39;,90);Insert into sc values(&#39;200215122&#39;,&#39;3&#39;,80); 查询表","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://blog.wztlink1013.com/tags/SQL/"}]},{"title":"DataBase-绪论-关系数据库","slug":"DataBase/DataBase-绪论-关系数据库","date":"2020-03-29T07:33:51.000Z","updated":"2020-07-12T13:10:48.077Z","comments":true,"path":"2020/03/29/DataBase/DataBase-绪论-关系数据库/","link":"","permalink":"https://blog.wztlink1013.com/2020/03/29/DataBase/DataBase-%E7%BB%AA%E8%AE%BA-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"一、绪论DBSDBS四个概念数据Data、数据库DataBase、数据库管理系统DBMS、数据库系统DBS 结构化数据和非结构化数据，例如用python处理文本数据抑或是图像数据，再进行数据清洗等规整为结构化数据， DBS数据管理技术的发展数据管理、人工管理、文件系统管理、数据库系统管理 第一次实验报告所使用的就是典型的文件系统管理，两者侧重点不同，数据库相对而言更加方便 DBS特点数据结构化、数据的共享性高，冗余度低，易扩展、数据的独立性高、数据由DBMS统一管理和控制 数据模型概念模型、物理模型、逻辑模型 同时分属两个不同层次，第一个是概念模型（按用户的观点对数据建模），第二个是物理模型和逻辑模型（按计算机的观点对数据建模） 概念模型逻辑模型物理模型DBS的结构和组成二、关系数据库关系数据结构及形式化定义关系操作与关系的完整性关系代数和关系演算","categories":[{"name":"DataBase","slug":"DataBase","permalink":"https://blog.wztlink1013.com/categories/DataBase/"}],"tags":[{"name":"DataBase","slug":"DataBase","permalink":"https://blog.wztlink1013.com/tags/DataBase/"}]},{"title":"ANN神经网络","slug":"MachingLearning/ANN神经网络","date":"2020-03-23T09:19:51.000Z","updated":"2020-07-14T05:30:56.677Z","comments":true,"path":"2020/03/23/MachingLearning/ANN神经网络/","link":"","permalink":"https://blog.wztlink1013.com/2020/03/23/MachingLearning/ANN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/","excerpt":"","text":"一、基本结构 神经网络基本结构 何为深度学习？ 二、感知器和激活函数 感知器 激活函数（其中w和x为向量点乘；b为偏置，w0） 激活函数的选择 三、感知器的训练 四、简单代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879from functools import reduceclass Perceptron(object): ''' 构造函数的初始化 ''' def __init__(self,input_num,activator): ''' 构造函数的初始化 ''' self.activator = activator self.weights = [0.0 for _ in range(input_num)] self.bias = 0.0 def __str__(self): ''' 打印学习后的权重值和偏置项 ''' return 'weights\\t:%s\\nbias\\t:%f\\n' %(self.weights,self.bias) def predict(self,input_vec): ''' 输入向量，输出感知器的计算结果 ''' return self.activator( reduce(lambda a,b: a+b, list(map(lambda x,w: x*w, input_vec,self.weights) ),0.0)+self.bias) def train(self,input_vecs,labels,iteration,rate): ''' 输入训练数据：一组向量、与每个向量对应的label；以及训练轮数、学习率 ''' for i in range(iteration): self._one_iteration(input_vecs,labels,rate) def _one_iteration(self,input_vecs,labels,rate): ''' 迭代，把所有的训练数据过一遍 ''' samples = zip(input_vecs,labels) for (input_vec,label) in samples: output = self.predict(input_vec) self._update_weights(input_vec,output,label,rate) def _update_weights(self,input_vec,output,label,rate): ''' 按照感知器规则更新权重 ''' delta = label - output self.weights = map( lambda x, w:w+rate*delta*x, input_vec,self.weights) self.weights = list(self.weights) self.bias += rate*deltadef f(x): ''' 定义激活函数 ''' return 1 if x&gt;0 else 0def get_training_dataset(): ''' 训练数据 ''' input_vecs = [[1,1],[0,0],[1,0],[0,1]] labels = [1,0,0,0] return input_vecs,labelsdef train_and_perceptron(): ''' 训练感知器 ''' p = Perceptron(2,f) input_vecs,labels = get_training_dataset() p.train(input_vecs,labels,10,0.1) return pif __name__ == '__main__': and_perception = train_and_perceptron() print(and_perception) print('1 and 1 = %d' % and_perception.predict([1,1])) print('0 and 0 = %d' % and_perception.predict([0,0])) print('1 and 0 = %d' % and_perception.predict([1,0])) print('0 and 1 = %d' % and_perception.predict([0,1])) 运行结果：","categories":[{"name":"MachingLearning","slug":"MachingLearning","permalink":"https://blog.wztlink1013.com/categories/MachingLearning/"}],"tags":[{"name":"ANN","slug":"ANN","permalink":"https://blog.wztlink1013.com/tags/ANN/"}]},{"title":"Python-基本常用语法","slug":"Language/Python-基本常用语法","date":"2020-03-22T16:42:05.000Z","updated":"2020-07-12T12:01:18.454Z","comments":true,"path":"2020/03/23/Language/Python-基本常用语法/","link":"","permalink":"https://blog.wztlink1013.com/2020/03/23/Language/Python-%E5%9F%BA%E6%9C%AC%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/","excerpt":"","text":"一、基本语法 大事谷歌；小事百度【建立良好的编程式思维】 PEP8中的一些良好约定【编程规范】 字符串格式化： print(‘%s–%d–%s’%(‘wuzutao’,20,’尼采般地抒情’))a. %i是什么格式的那啥？‘ 强制性类型转换：类C 时间和日期： from datetime import datetime dt=datetime(2019,5,12,9,20) print(dt.year,dt.month,dt.day) 2019 5 12 dt.strftime(‘%Y/%m/%d %H:%M’) #datetime格式转化为字符串‘2019/05/12 09:20’ datetime.strptime(‘20161203’, ‘%Y%m%d’) #字符串转化为datetime格式datetime.datetime(2016, 12, 3, 0, 0) pass函数 def f():#TODO: test pass pass 异常的处理 def test(x,y):try: print(y/x) except: print(&apos;输入的信息有误！&apos;) test(2,8)test(‘e’,8) range和range的区别！！！ 对象传递和拷贝【类似C语言中的指针】 #变量传递、列表传递和C类似 #深拷贝和浅拷贝 import copy a = [[1, 2, 3], [4, 5, 6]] b = a c = copy.copy(a) d = copy.deepcopy(a) print (‘a-id:’,id(a))#id相当于内存里面的地址 print (‘b-id:’,id(b)) print (‘c-id:’,id(c)) print (‘d-id:’,id(d)) a.append(15) a[1][2] = 10 print (a) print (b) print (c) print (d) a-id: 2171119139144 b-id: 2171119139144 c-id: 2171119848136 d-id: 2171119140744 [[1, 2, 3], [4, 5, 10], 15] [[1, 2, 3], [4, 5, 10], 15] [[1, 2, 3], [4, 5, 10]] [[1, 2, 3], [4, 5, 6]] 二、数据结构元组○ #转换为元组（list-&gt;tuple, string-&gt;tuple） l = [1, 2, 3] print (tuple(l)) str = (&apos;Hello ChinaHadoop&apos;) print (tuple(str)) &gt;&gt;&gt;(1, 2, 3) (&apos;H&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos; &apos;, &apos;C&apos;, &apos;h&apos;, &apos;i&apos;, &apos;n&apos;, &apos;a&apos;, &apos;H&apos;, &apos;a&apos;, &apos;d&apos;, &apos;o&apos;, &apos;o&apos;, &apos;p&apos;) ○ tup1 = (1, 2, 3) #嵌套元组: tup2 = ((1, 2, 3), (4, 5)) print (tup2) #合并元组: tup1 + tup2 ○ #拆包 def test_1(): r=(2,4,5,32) return r a, b, _, f=test_1() print(f) &gt;&gt;&gt; 32 ○ # 元组列表迭代 tuple_lst = [(1, 2), (3, 4), (5, 6)] for x, y in tuple_lst: print (x+y) &gt;&gt;&gt;3 7 11 ○ # 计数器 列表/元组.(&apos;需要查找里面的某个对象的个数&apos;)列表○ list里面可以有不同类型的元素 ○ #合并列表 lst_1=[352,2352,3,556] lst_2=[&apos;gew&apos;,&apos;f&apos;] &gt;lst_3 = lst_1 + lst_2 &gt;lst_1.extend(lst_2) ○ #sort函数和sorted函数 list_1=[23,54,346,222,4,1] print(list_1.sort()) #查查版本 print(sorted(list_1)) #sorted是新起的一个列表 lst_6 = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;] lst_6.sort() print (lst_6)【!!!!打印出来是none===查查版本】 &gt;&gt;&gt;[&apos;Analysis&apos;, &apos;Course&apos;, &apos;Data&apos;, &apos;Python&apos;, &apos;Welcome&apos;, &apos;to&apos;] lst_6.sort(key = len, reverse=True) print (lst_6) &gt;&gt;&gt;[&apos;Analysis&apos;, &apos;Welcome&apos;, &apos;Course&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;to&apos;]字典○ #合并字典 dict1 = {1:&apos;huhuhu&apos;} dict2 = {4: &apos;new1&apos;, 5: &apos;news&apos;} dict1.update(dict2) ○ #通过多个列表创建字典 dict_3 = {} l1 = [32,543,6,2,7,4] l2 = reversed(l1) for i1, i2 in zip(l1, l2): dict_3[i1] = i2 print (dict_3) &gt;&gt;&gt;{32: 4, 543: 7, 6: 2, 2: 6, 7: 543, 4: 32} &apos;&apos;&apos;hash函数来判断某个对象是否可以做键&apos;&apos;&apos; ○ &apos;&apos;&apos;位置赋值；默认赋值；关键字赋值——format&apos;&apos;&apos; &apos;&apos;&apos;遍历字典的方式变了：keys，values，items&apos;&apos;&apos; 天行九歌={&apos;韩非&apos;:&apos;逆鳞&apos;,&apos;卫庄&apos;:&apos;鲨齿&apos;,&apos;盖聂&apos;:&apos;渊虹&apos;} print(天行九歌) for ren,jian in 天行九歌.items(): print(&apos;{}--{}&apos;.format(ren,jian)) &gt;&gt;&gt; {&apos;韩非&apos;: &apos;逆鳞&apos;, &apos;卫庄&apos;: &apos;鲨齿&apos;, &apos;盖聂&apos;: &apos;渊虹&apos;} 集合○ a1=[1,3,4,1,35,2352,75] b1=[3,2352,24354,4332432,54] a=set(a1) b=set(b1) print(a) print(b) a | b#并；a &amp; b#交；a - b#呃。。。；a ^ b#呃。。。； a.issubset(b)#判断子集 &gt;&gt;&gt;False a.issuperset(b)#判断父集 &gt;&gt;&gt;False三、高级特性推导式○ str_lst = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;] result = [x.upper() for x in str_lst if len(x) &gt; 4] print (result) &gt;&gt;&gt;[&apos;WELCOME&apos;, &apos;PYTHON&apos;, &apos;ANALYSIS&apos;, &apos;COURSE&apos;]多函数模式○ str_lst = [&apos;$1.123&apos;, &apos; $1123.454&apos;, &apos;$899.12312&apos;] def remove_space(str): &quot;&quot;&quot; remove space &quot;&quot;&quot; str_no_space = str.replace(&apos; &apos;, &apos;&apos;) return str_no_space def remove_dollar(str): &quot;&quot;&quot; remove $ &quot;&quot;&quot; if &apos;$&apos; in str: return str.replace(&apos;$&apos;, &apos;&apos;) else: return str def clean_str_lst(str_lst, operations): &quot;&quot;&quot; clean string list &quot;&quot;&quot; result = [] for item in str_lst: for op in operations: item = op(item) result.append(item) return result clean_operations = [remove_space, remove_dollar] result = clean_str_lst(str_lst, clean_operations) print (result) &gt;&gt;&gt;[&apos;1.123&apos;, &apos;1123.454&apos;, &apos;899.12312&apos;]匿名函数○ str_lst = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;] str_lst.sort(key=lambda x:len(x)) # sort by length print (str_lst) str_lst.sort(key=lambda x:x[-1]) # sort by the last letter print (str_lst) &gt;&gt;&gt; [&apos;to&apos;, &apos;Data&apos;, &apos;Python&apos;, &apos;Course&apos;, &apos;Welcome&apos;, &apos;Analysis&apos;] [&apos;Data&apos;, &apos;Course&apos;, &apos;Welcome&apos;, &apos;Python&apos;, &apos;to&apos;, &apos;Analysis&apos;]迭代器○ def gen_test(): for i in range(3): yield i gen = gen_test() #此时不执行生成器 type(gen) for i in gen: print(i) #用意何在呢？？！！ &gt;&gt;&gt;0 1 2四、常用函数序列函数&amp;zip使用a. enumerate函数 list_11 = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;] for i, item in enumerate(lst_6): print (&apos;%i-%s&apos; %(i, item)) &gt;&gt;&gt; 0-Analysis 1-Welcome 2-Course 3-Python 4-Data 5-to str_dict = dict((i, item) for i, item in enumerate(list_11)) print (str_dict) &gt;&gt;&gt;{0: &apos;Welcome&apos;, 1: &apos;to&apos;, 2: &apos;Python&apos;, 3: &apos;Data&apos;, 4: &apos;Analysis&apos;, 5: &apos;Course&apos;} b. zip压缩 lst_6 = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;] lst_8 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;] zip_lst = zip(lst_6, lst_8) print(list(zip_lst)) #方式一：直接转化为列表 print(dict(list(zip_lst))) #方式二：转化为字典 for i in zip_lst: print (i) #方式三：直接遍历 解压： print(*zip_lst) print(lst_6) c. reversed逆序输出函数式编程a. #函数可以作为变量使用;也可以将函数作为参数使用 import math def func_add(x, y, f): &quot;&quot;&quot; functional addition &quot;&quot;&quot; return f(x) + f(y) print (func_add(4, 25, math.sqrt)) print (func_add(-4, 25, abs)) &gt;&gt;&gt;7.0 29map和reducea. &apos;&apos;&apos;map函数&apos;&apos;&apos; list_1=[1,4,9] aaa = [x**2 for x in list_1] print (aaa) bbb = map(math.sqrt, aaa) print (bbb) &gt;&gt;&gt; [1, 16, 81]&lt;map object at 0x000002145B2B77F0&gt; filter函数a. 天行=[&apos;韩非&apos;,&apos;卫庄&apos;,&apos;张良&apos;,&apos;盖聂&apos;,&apos;逆鳞&apos;] def fx(x): y=[&apos;逆鳞&apos;] if x in y: return x filtered_lst = filter(fx,天行) print(天行) print(list(filtered_lst)) #注意python2和3的区别，很多时候要区别出来列表等序列，加上list很有必要 &gt;&gt;&gt; [&apos;韩非&apos;, &apos;卫庄&apos;, &apos;张良&apos;, &apos;盖聂&apos;, &apos;逆鳞&apos;] [&apos;逆鳞&apos;]","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blog.wztlink1013.com/tags/Python/"}]},{"title":"java-数组越界和格式输出","slug":"Bug/java-数组越界和格式输出","date":"2020-03-22T10:03:46.000Z","updated":"2020-07-14T07:38:39.419Z","comments":true,"path":"2020/03/22/Bug/java-数组越界和格式输出/","link":"","permalink":"https://blog.wztlink1013.com/2020/03/22/Bug/java-%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E5%92%8C%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA/","excerpt":"","text":"一、数组越界1java.lang.ArrayIndexOutOfBoundsException 在进行判断条件的时候，注意java当中的数组“尾巴”不要溢出，数组arr的合法错误范围是[0, arr.length-1] 解决办法 ①debug看数组的尾巴部分输出情况【数组空间小的情况】 ②打印出遍历数组的索引值【通法】 回顾java初始化数组的方式： 静态初始化：初始化时由程序员显式指定每个数组元素的初始值，有系统决定数组的长度 arrayName = new type[]{element1,element2,element3…} 1234int[] intArr;intArr &#x3D; new int[]&#123;1,2,3,4,5,9&#125;;或者String[] strArr &#x3D; &#123;&quot;one&quot;,&quot;two&quot;,&quot;three&quot;&#125;; 动态初始化：初始化时由程序员指定数组的长度，由系统初始化每个数组元素的默认值 arrayName = new type[length]; 1int[] price &#x3D; new int[4]; 二、printf；println；print printf：遇到浮点型数值，继承C语言里面的使用，格式化输出（注意，参数顺序） print：就是一般的标准输出，但是不换行 println：比print多的就是最后会换行 12345int i = 4;double j = 5;System.out.print(\"用print输出i:\"+ i);System.out.println( \"用println输出i:\"+ i);System.out.printf(\"i的值为%d,j的值为%f\", i,j); 12用print输出i:4用println输出i:4i的值为4,j的值为5.000000 printf补充 %.2f的意思是输出两位小数点","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"},{"name":"JAVA","slug":"JAVA","permalink":"https://blog.wztlink1013.com/tags/JAVA/"}]},{"title":"链表","slug":"DataStructure/DataStructure-链表","date":"2020-03-14T10:07:25.000Z","updated":"2020-07-12T13:11:21.661Z","comments":true,"path":"2020/03/14/DataStructure/DataStructure-链表/","link":"","permalink":"https://blog.wztlink1013.com/2020/03/14/DataStructure/DataStructure-%E9%93%BE%E8%A1%A8/","excerpt":"","text":"一、小概念 首元结点：第一个有元素的结点 头结点：一般不放元素，“L” 头指针：指向链表的第一个结点，有头结点则为头结点的指针，反之，指向首元结点的指针 参考资料 二、代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;iomanip&gt;#include&lt;stdlib.h&gt;using namespace std;typedef struct LNode &#123; int data; //结点的数据域 struct LNode *next; //结点的指针域&#125;LNode, *LinkList; //LinkList为指向结构体LNode的指针类型bool InitList_L(LinkList &amp;L)//构造一个空的单链表L//结构体指针类型变量做为函数的形式参数&#123; L=new LNode; //生成新结点作为头结点，用头指针L指向头结点//变量名 = new 类型 if(!L) return false; //生成结点失败 L-&gt;next=NULL; //头结点的指针域置空 return true;&#125;void CreateList_H(LinkList &amp;L)//前插法创建单链表&#123; //输入n个元素的值，建立到头结点的单链表L int n; LinkList s; //定义一个所建立的结构体指针变量 L=new LNode; //生成新结点作为头结点，用头指针L指向头结点 L-&gt;next=NULL; //先建立一个带头结点的空链表 cout &lt;&lt;\"请输入元素个数n：\" &lt;&lt; endl; cin&gt;&gt;n; cout &lt;&lt;\"请依次输入n个元素：\" &lt;&lt;endl; cout &lt;&lt;\"前插法创建单链表...\" &lt;&lt;endl; while(n--) &#123; s=new LNode; //生成新结点s cin&gt;&gt;s-&gt;data; //输入元素值赋给新结点的数据域 s-&gt;next=L-&gt;next; L-&gt;next=s; //将新结点s插入到头结点之后 &#125;&#125;void CreateList_R(LinkList &amp;L)//尾插法创建单链表&#123; //输入n个元素的值，建立带表头结点的单链表L int n; LinkList s, r; L=new LNode; L-&gt;next=NULL; //先建立一个带头结点的空链表 r=L; //尾指针r指向头结点 cout &lt;&lt;\"请输入元素个数n：\" &lt;&lt;endl; cin&gt;&gt;n; cout &lt;&lt;\"请依次输入n个元素：\" &lt;&lt;endl; cout &lt;&lt;\"尾插法创建单链表...\" &lt;&lt;endl; while(n--) &#123; s=new LNode;//生成新结点 cin&gt;&gt;s-&gt;data; //输入元素值赋给新结点的数据域 s-&gt;next=NULL; r-&gt;next=s;//将新结点s插入尾结点*r之后 r=s;//r指向新的尾结点s &#125;&#125;bool GetElem_L(LinkList L, int i, int &amp;e)//单链表的取值&#123; //在带头结点的单链表L中查找第i个元素 //用e记录L中第i个数据元素的值 int j; LinkList p; p=L-&gt;next;//p指向首元结点 j=1; //j为计数器 while (j&lt;i &amp;&amp; p) //顺链域向后扫描，直到p指向第i个元素或p为空 &#123; p=p-&gt;next; //p指向下一个结点 类似结点的自加 j++; //计数器j相应加1 &#125; if (!p || j&gt;i) return false; //i值不合法i＞n或i&lt;=0 e=p-&gt;data; //取第i个结点的数据域 return true;&#125;bool LocateElem_L(LinkList L, int e) //按值查找&#123; //在带头结点的单链表L中查找值为e的元素 LinkList p; p=L-&gt;next; while (p &amp;&amp; p-&gt;data!=e)//顺链域向后扫描，直到p为空或p所指结点的数据域等于e p=p-&gt;next; //p指向下一个结点 if(!p) return false; //查找失败p为NULL return true;&#125;bool ListInsert_L(LinkList &amp;L, int i, int e)//单链表的插入&#123; //在带头结点的单链表L中第i个位置插入值为e的新结点 int j; LinkList p, s; p=L; j=0; while (p&amp;&amp;j&lt;i-1) //查找第i-1个结点，p指向该结点 &#123; p=p-&gt;next; j++; &#125; if (!p || j&gt;i-1)//i＞n+1或者i＜1 return false; s=new LNode; //生成新结点 s-&gt;data=e; //将新结点的数据域置为e s-&gt;next=p-&gt;next; //将新结点的指针域指向结点ai p-&gt;next=s; //将结点p的指针域指向结点s return true;&#125;bool ListDelete_L(LinkList &amp;L, int i) //单链表的删除&#123; //在带头结点的单链表L中，删除第i个位置 LinkList p, q; int j; p=L; j=0; while((p-&gt;next)&amp;&amp;(j&lt;i-1)) //查找第i-1个结点，p指向该结点 &#123; p=p-&gt;next; j++; &#125; if (!(p-&gt;next)||(j&gt;i-1))//当i&gt;n或i&lt;1时，删除位置不合理 return false; q=p-&gt;next; //临时保存被删结点的地址以备释放空间 p-&gt;next=q-&gt;next; //改变删除结点前驱结点的指针域 delete q; //释放被删除结点的空间 return true;&#125;void Listprint_L(LinkList L) //单链表的输出&#123; LinkList p; p=L-&gt;next; while (p) &#123; cout&lt;&lt;p-&gt;data&lt;&lt;\"\\t\"; p=p-&gt;next; &#125; cout&lt;&lt;endl;&#125;int main()&#123; int i,x,e,choose; LinkList L; cout &lt;&lt; \"1. 初始化\\n\"; cout &lt;&lt; \"2. 创建单链表（前插法）\\n\"; cout &lt;&lt; \"3. 创建单链表（尾插法）\\n\"; cout &lt;&lt; \"4. 取值\\n\"; cout &lt;&lt; \"5. 查找\\n\"; cout &lt;&lt; \"6. 插入\\n\"; cout &lt;&lt; \"7. 删除\\n\"; cout &lt;&lt; \"8. 输出\\n\"; cout &lt;&lt; \"0. 退出\\n\"; choose=-1; while (choose!=0) &#123; cout&lt;&lt;\"请输入数字选择:\"; cin&gt;&gt;choose; switch (choose) &#123; case 1: //初始化一个空的单链表 if (InitList_L(L)) cout &lt;&lt; \"初始化一个空的单链表!\\n\"; break; case 2: //创建单链表（前插法） CreateList_H(L); cout &lt;&lt; \"前插法创建单链表输出结果:\\n\"; Listprint_L(L); break; case 3: //创建单链表（尾插法） CreateList_R(L); cout &lt;&lt; \"尾插法创建单链表输出结果:\\n\"; Listprint_L(L); break; case 4: //单链表的按序号取值 cout &lt;&lt; \"请输入一个位置i用来取值:\"; cin &gt;&gt; i; if (GetElem_L(L,i,e)) &#123; cout &lt;&lt; \"查找成功\\n\"; cout &lt;&lt; \"第\" &lt;&lt; i &lt;&lt; \"个元素是：\"&lt;&lt;e&lt;&lt; endl; &#125; else cout &lt;&lt; \"查找失败\\n\\n\"; break; case 5: //单链表的按值查找 cout&lt;&lt;\"请输入所要查找元素x:\"; cin&gt;&gt;x; if (LocateElem_L(L,x)) cout &lt;&lt; \"查找成功\\n\"; else cout &lt;&lt; \"查找失败! \" &lt;&lt;endl; break; case 6: //单链表的插入 cout &lt;&lt; \"请输入插入的位置和元素（用空格隔开）:\"; cin &gt;&gt; i; cin &gt;&gt; x; if (ListInsert_L(L, i, x)) cout &lt;&lt; \"插入成功.\\n\\n\"; else cout &lt;&lt; \"插入失败!\\n\\n\"; break; case 7: //单链表的删除 cout&lt;&lt;\"请输入所要删除的元素位置i:\"; cin&gt;&gt;i; if (ListDelete_L(L, i)) cout&lt;&lt;\"删除成功!\\n\"; else cout&lt;&lt;\"删除失败!\\n\"; break; case 8: //单链表的输出 cout &lt;&lt; \"当前单链表的数据元素分别为:\\n\"; Listprint_L(L); cout &lt;&lt; endl; break; &#125; &#125; system(\"pause\"); return 0;&#125;","categories":[{"name":"DataStructure","slug":"DataStructure","permalink":"https://blog.wztlink1013.com/categories/DataStructure/"}],"tags":[]},{"title":"C-遗忘知识","slug":"Language/C-遗忘知识","date":"2020-03-14T09:57:21.000Z","updated":"2020-07-12T11:48:26.712Z","comments":true,"path":"2020/03/14/Language/C-遗忘知识/","link":"","permalink":"https://blog.wztlink1013.com/2020/03/14/Language/C-%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86/","excerpt":"","text":"指针相关概念的理解容易混淆，记住之前学习理解的一个准则！*p 的理解意义就是p 所指向的那个东西 取地址符&amp; 解引用运算符* https://blog.csdn.net/soonfly/article/details/51131141 结构体 一些概念 结构体:构造（定义新的数据类型） 结构体变量:定义（两种）；结构体变量访问结构体里面的成员：.；指针访问成员的时候-&gt; 结构体数组：变量很多 结构体指针：指向结构体变量的指针，定义：struct Student *p；指向结构体数组的指针 C里面的结构体、共用体、枚举体根据这几类来构造新的数据类型，比如链表的初始实现，就是利用指针和结构体来实现 typedef给结构体制定新的类型名 eg：计数专用变量typedef int Count","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://blog.wztlink1013.com/tags/C/"},{"name":"C","slug":"C","permalink":"https://blog.wztlink1013.com/tags/C/"}]},{"title":"GitHub+PicGo构建免费图床及其高效使用","slug":"Hexo/PicGo和GitHub构建免费图床及使用","date":"2020-02-25T06:55:07.000Z","updated":"2020-07-12T13:26:55.661Z","comments":true,"path":"2020/02/25/Hexo/PicGo和GitHub构建免费图床及使用/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/25/Hexo/PicGo%E5%92%8CGitHub%E6%9E%84%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"一、搭建缘由一开始搭建博客，避免不了要用许多图片，最初使用七牛云来做博客图床，但是后来发现，七牛云只有30天的临时域名，hhhhhhh，果然啊，天下就没有免费的好事啊~后来就发现GitHub配合PicGo可以作图床，而且加上jsDlivr速度可观。 二、GitHub相关配置新建figure图床仓库常规新建仓库方式，命名figure（可以换，下面仓库名也得跟着换） 生成一个Token密匙点击setting 三、PicGo相关配置下载及注意事项下载地址 注意：下载picgo时候，要科学上网，谷歌插件没用，只能用小飞机或其他的软件（得开全局配置下载） 配置 四、高效写博客Snipaste截图软件 常用快捷键【惠普💻+非机械键盘，所以记录下】 fn+f1：截屏（可编辑） esc：退出 结合PicGo使用 PicGo+Snipaste快捷键结合综合使用SOP 按fn+f1截完图按ctrl+c将刚刚截图放到剪贴板 再按ctrl+shift+p使用picgo快捷键将剪贴板上的图片上传同时将此时图片的外链复制到剪贴板 五、相关补充上传失败问题1：有些时候上传picgo时，会出现配置报错的情况 方案1：在picgo的配置中，改一下文件夹名字（相当于在仓库下新建一个文件夹），就比如本来存到blogarticle3/文件夹下，改成blogarticle4/就好了 方案2：将下图所示的上传前重命名打开同时设置Server内容开换成关，关换成开，为什么呢？玄学··· 方案3：将PicGo软件叉掉重新运行。玄学···· 关于插件在插件列表里面下载这三个拓展插件，其中两个国内的托管coding和gitee，还有一个github plus版本，不过觉得国内的外链范围肯定是要小一点的应该，最好是优先使用github图床，coding和gitee的作为文章使用，有关博客配置的使用CDN等。 Coding配置 gitee配置 GitHub plus配置","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/tags/Hexo/"},{"name":"PicGo","slug":"PicGo","permalink":"https://blog.wztlink1013.com/tags/PicGo/"}],"author":{"name":"尼采般地抒情","avatar":"https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg","url":"https://wztlink1013.com"}},{"title":"jsDelivr和Github构建免费CDN","slug":"Hexo/jsDelivr和GitHub构建免费CDN","date":"2020-02-25T06:38:25.000Z","updated":"2020-07-14T07:44:04.139Z","comments":true,"path":"2020/02/25/Hexo/jsDelivr和GitHub构建免费CDN/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/25/Hexo/jsDelivr%E5%92%8CGitHub%E6%9E%84%E5%BB%BA%E5%85%8D%E8%B4%B9CDN/","excerpt":"","text":"一、搭建缘由CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科 通俗来说就是提取外链，同时加速访问的好处。Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。 二、GitHub新建CDN（名字自取）仓库在本地电脑进行一系列clone/pull等一系列操作，同时发布版本（最好上传一次就发布依次版本） 三、使用jsDlivrhttps://cdn.jsdelivr.net/gh/wztlink1013/CDN-Volantis@版本号/文件夹/文件名.文件后缀 举个栗子 https://cdn.jsdelivr.net/gh/wztlink1013/CDN@2.4/Pictures/blogbackground/fengbaobao_1.jpg https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4 相关使用✅ 0、具体使用教程 博客：搭建及使用总结 jsdelivr官网网站1、加载任何Github发布、提交或分支https://cdn.jsdelivr.net/gh/user/repo@version/file 2、加载 jQuery v3.2.1https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js 3、使用版本范围而不是特定版本https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js 4、完全省略该版本以获取最新版本https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js 5、将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js 6、在末尾添加 / 以获取资源目录列表https://cdn.jsdelivr.net/gh/jquery/jquery/","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/tags/Hexo/"},{"name":"CDN","slug":"CDN","permalink":"https://blog.wztlink1013.com/tags/CDN/"}]},{"title":"OS-DOS/CMD/Windows/提高开发效率","slug":"OS/DOS-CMD使用总结","date":"2020-02-24T23:51:21.000Z","updated":"2020-07-12T13:17:43.869Z","comments":true,"path":"2020/02/25/OS/DOS-CMD使用总结/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/25/OS/DOS-CMD%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"一、快捷键 很多软件的快捷键使用相通，在不确定的情况下，先试试其他软件的快捷键的使用方法 Windows电脑快捷键 HP惠普笔记本 1234567891011121314win+E 打开文件管器win+D 显示桌面win+L 锁计算机alt+F4 关闭当前程序ctrl+shift+Esc&#x2F;ctrl+alt+delete：任务管理器ctrl+F 文本或网页中查找（退出一般按ESC）ctrl+A 选中所有文本Onenote2016配合插件win+n快速笔记win+shift+n打开onenoteWindows 键+V：打开剪贴板Windows 键+PgUp：在桌面选定左上角软件Windows 键+PgDown：在桌面选定右下角软件 Eclipse快捷键 ctrl+shift+L：eclipse所有快捷键 //注释：ctrl+shift+c（添加和注释都是这样）或者ctrl+/ /**/注释：添加ctrl+shift+/ 取消ctrl+shift+\\ 1234567Alt+方向键：将当前行向上或者向下移动ctrl+m：编辑窗口最大化（反复两次按即取消）ctrl+.及ctrl+1：下一个错误及快速修改Control+O: 快速概要,迅速的跳到一个方法或者属性，只需要输入名字的头几个字母。shift+home&#x2F;end：选中一行ctrl+pgup&#x2F;pgdn：切换页面（浏览器打开的页面&#x2F;编辑器的多窗口） VScode快捷键偶然发现：打开vscode的时候，直接在页面内输入ctrl+shift+c就会直接进入博客根目录下的CMD模式 Pycharm/JetBrains快捷键 12345678Ctrl+F5（左上角）：（return &quot;project&quot;）重新debug该文件F9：（resume program）一个断点接着一个断点走，不按行走（eg：有循环会随着i一步一步走完）F8：（step over） 一行一行走代码F7：（step into） 进入函数内部Alt+shift+F7：（step into mycode）遇到自己函数 进去 shift+F8：（step out）跳出，进入函数后，跳出来Alt+F10：（show execution point）指针显示当前断点旁边**Show Python Prompt**按键,交互式调试命令 二、CMD之常用命令 使用help命令，查看所有的dos命令 找到命令之后，使用 命令+ /?来查看该命令下的其他属性 DOS不区分大小写 d: e: 进入不同的盘 cd: 进入指定文件夹。注意：只在该磁盘才有效 dir 查看当前目录下的所有文件，使用dir /?来查看其它用法 创建和删除目录 cd .. 返回上一级文件夹1234&#x2F;&#x2F;创建目录md 目录名（文件夹）&#x2F;&#x2F;删除目录rd 目录名（文件夹） ipconfig 查看本机ip cls 清除屏幕 复制文件:把一个文件移动（就是剪切+复制）到另一个地方。甚至可以改后缀1move 路径\\文件名 路径\\文件名 删除文件12&#x2F;&#x2F;这个是专门删除文件的，不能删除文件夹del 文件名 ping12&#x2F;&#x2F;用来测试网络是否畅通ping ip(主机名) 其他123复制内容：右键弹出快捷菜单，选择“标记(K)”，然后选中所需复制的内容，然后右键即可粘贴内容：右键弹出快捷菜单，选择“粘贴(P)” 在文件夹空白处按住Shift，然后右键弹出快捷菜单，可以看到“在此处打开命令行窗口” tab补齐功能！！！ 文件及目录名中不能包含下列任何字符：\\ / : * ? “ &lt; &gt; | 三、CMD之默认非utf-8编码运行java程序时候，如果代码中有中文，会出现中文报错乱码情况/ 治标方法CMD 中输入 chcp 65001 进入utf-8模式下的的控制台，再运行程序 治本方法博文1 博文2注意：自己已经再注册表中增加了一行tuf-8编码数据，以后要留意、 四、CMD之运行JAVACMD运行java程序 命令行参数 main主函数可以看成一个普通的方法，也可以传递实参来调用普通方法 向main方法传递字符串 CMD下运行Java中文乱码javac -encoding utf-8 test.java 还是上面的问题，DOS默认使用的编码是GBK,这里需要再编译的时候制定使用的编码 五、笔记本触摸板笔记本触摸屏使用 单指：“确定键” 点击===相当于左键确定 先点击 不放拖动 ===拖拽 双指：“右键、滑动、拉伸旋转键” 点击===相当于右键（鼠标） 先点击 不放左右拖动上下拖动===滑页功能 等比例拉伸或者旋转 三指：“页面切换键” 点击===查找 先点击 不放 上下拖动===多页面模式、纯桌面模式切换 先点击 不放 左右拖动===页面切换类似alt+tab 四指：“设置键”点击===设置/操作中心 实现手写输入功能 第一步：安装SoftStylus手写软件 本身没有预装SoftStylus手写软件的，首先登录HP官方网站，查询并下载手写软件，然后安装手写软件。如果已预装手写软件，建议运行Software Setup软件，将手写软件升级到最新版本，以提高手写识别成功率。 第二步：设置手写识别速度 运行手写软件，点击设置图标进入“参数”界面，然后可根据需要配置识别速度。如果是初次使用手写功能，刚开始建议将识别速度降低，一旦习惯了使用手写功能，应该将识别速度调为最快，这样在QQ聊天或编辑文档时，以应对较快的手写输入连写。 第三步：设置各种热键 此外，替换选项可设置在主窗口上显示最多可选择字符，这个应该根据笔记本屏幕大小而定，例如14英寸屏幕可设置为7，而12英寸屏幕应该设为4，最后建议开启“汉字预览”功能，切换到“热键”选项页，然后可根据需要自定义各种热键。 第四步：设置手写窗口外观 如果经常使用手写功能，建议切换到“一般”选项页，勾寻操作系统起动时运行SoftStylus”复选框，最后切换到“外观”选项页，并调节窗口透明度、画笔宽度和墨色。如果是QQ聊天，建议将画笔宽度调细一点，且墨色应该设为黑色。 第五步：使用手写进行聊天 设置完毕后，单击“确认”按钮，当你在QQ聊天或编辑文档时，如想使用手写输入，只需按下前面设置的快捷键，即可马上弹出手写输入界面。这个时候，就可以用手指在触摸板上比划，文字就会显示在界面里，最后出现在聊天窗口中，很方便。 参考资料 windows常用快捷键与快捷指令","categories":[{"name":"OS","slug":"OS","permalink":"https://blog.wztlink1013.com/categories/OS/"}],"tags":[{"name":"CMD","slug":"CMD","permalink":"https://blog.wztlink1013.com/tags/CMD/"},{"name":"OS","slug":"OS","permalink":"https://blog.wztlink1013.com/tags/OS/"}]},{"title":"Java-chapter9-13面向对象","slug":"Language/JAVA-chapter9-13面向对象","date":"2020-02-16T06:45:47.000Z","updated":"2020-07-14T05:30:56.675Z","comments":true,"path":"2020/02/16/Language/JAVA-chapter9-13面向对象/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/16/Language/JAVA-chapter9-13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"chapter9对象和类OOP阶梯图“OOP阶梯图”——类的多个特性，同时以对象对基础 类的组成数据域和各种各样的方法（包括构造函数）【C++里面是数据成员和成员函数】 类中不能存在可执行语句 构造函数 和类同名 重载：不能误写成普通函数 调用顺序/优先级和C++类似 初始化优先级 静态成员变量初始化顺序高于非静态成员变量 成员变量的初始化顺序优于构造函数 静态成员变量只初始化一次，就是第一次被访问的时候 存在多个静态成员变量的时候，按照次序依次执行 举个例子： 1234567Window(2)Window(1)Window(2)Window(3)House()Window(33)f() 对象的创建和访问通过引用变量访问对象创建的类的对象被内存分配了内存空间，可以用引用变量来访问 new ClassName();使用成员变量和成员函数 mycircle.radiusmycircle.getArea() 对象类型都需要用new来新建 对象调用成员变量，成员函数 调用静态函数，动态函数需要在自己类下面调用自己的函数 TOTO: 关于宿舍关于老师提出来的炸宿舍例子 对象间的赋值和基本类型的赋值，能改变的一定是基本数值类型，所谓的数组名抑或是对象名，都只是地址映射 数据域的默认值对于对象而言，不赋值也会有默认的。之前的数组就是如此/ 按照之前的基本上的默认初值，如果是其他的类，则空 垃圾回收机制System.gc(); 养成一个好的变成习惯：主入口函数和其他功能函数分开，不要再自己类下定义自己的对象 空指针异常 静态变量、常量和方法静态成员变量：静态成员变量可以被类的所有实例共享（比如计数变量用到） 静态方法：不能访问类的实例成员 关于静态变量、静态方法、实例变量、实例方法 可见性修饰符 chapter10面向对象思考chapter11继承和多态chapter12异常处理和文本IOchapter13抽象类和接口概念名词 接口：许多类的共同行为（包含非相关类） 抽象类：就相当于一个父类，该父类包含其子类的共性特征，就像是子类园和子类长方形，两个类可以有一个共同的父类，该父类定义为抽象类，其包含一个抽象方法，比如求面积或是求周长 抽象类的一些要点 抽象类当中的抽象方法要在其子类当中实现，因为抽象类“抽象”的以至于没有实例 包含抽象方法的类必定是抽象类 抽象类的构造函数实现要加上protected，因为其构造函数只被其子类所使用，在创建子类实例的时候，其父类构造函数被调用来初始化该父类的数据域 可见性修饰符抽象类的实现抽象类和抽象方法的实现都需要加上关键字abstract 1234567public abstract class Test()&#123;&#125;public abstract double getTest()&#123;&#125;","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://blog.wztlink1013.com/tags/JAVA/"}]},{"title":"npm使用总结","slug":"Environment/npm","date":"2020-02-14T01:32:23.000Z","updated":"2020-07-12T13:14:18.929Z","comments":true,"path":"2020/02/14/Environment/npm/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/14/Environment/npm/","excerpt":"","text":"一、安装全局安装只需要在下载命令前加上-g即可，其中下载安装的目录是配置node npm时候，环境变量里面配置的路径 记录下自己的搭建环境： yuque-hexo gitbook hexo 本地安装部署好hexo之后，项目目录之下也有包管理文件夹，这里面安装的插件就是本地安装 其中，如果某个项目依赖特定版本，还是要同时结合本地安装特定版本，","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[]},{"title":"Scrapy-爬虫框架","slug":"Spider/Scrapy-爬虫框架","date":"2020-02-12T09:18:39.000Z","updated":"2020-07-12T13:18:46.724Z","comments":true,"path":"2020/02/12/Spider/Scrapy-爬虫框架/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/12/Spider/Scrapy-%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/","excerpt":"","text":"ScrapyScrapy基础 是一个爬虫框架，同时易扩展，可以添加新的模块达到自定义扩展 输出格式多样：json，csv，xml等 自动处理编码Scrapy框架架构图 下载方法以及问题，在anaconda博客中 Scrapy使用使用SOP 创建工程 键入cmd cd到需要下载的目录下 输入scrapy startproject tutorial（最后是项目名字） !此后所有有关命令的操作，均在下一级文件夹下，也有是有cfg文件后缀的文件夹下 定义Item，构造爬取的对象 编写spider，爬虫主体 scrapy genspider amazon_spider https://…… pipelines，默认return item 编写其他配置，其中pipeline用于处理爬取后所得到的结果 执行爬虫 scrapy crawl amazon_spider 常用命令参考 查看其官方文档 简书&lt;!–stackedit_data:eyJoaXN0b3J5IjpbLTEzMzc1NzA1ODhdfQ== -&gt;","categories":[{"name":"Spider","slug":"Spider","permalink":"https://blog.wztlink1013.com/categories/Spider/"}],"tags":[{"name":"scrapy","slug":"scrapy","permalink":"https://blog.wztlink1013.com/tags/scrapy/"},{"name":"spider","slug":"spider","permalink":"https://blog.wztlink1013.com/tags/spider/"}]},{"title":"Data-数据可视化综述","slug":"DataAnalysis/Data-可视化","date":"2020-02-10T09:34:02.000Z","updated":"2020-07-12T13:03:38.444Z","comments":true,"path":"2020/02/10/DataAnalysis/Data-可视化/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/10/DataAnalysis/Data-%E5%8F%AF%E8%A7%86%E5%8C%96/","excerpt":"","text":"查看可视化 设置风格 matplotlib预处理和折线图 matplotlib条形图 matplotlib其他常见类型图 pandas基本画图 seaborn画图1 seaborn画图2 bokeh画图 pyecharts 补充总结","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"python","slug":"python","permalink":"https://blog.wztlink1013.com/tags/python/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://blog.wztlink1013.com/tags/matplotlib/"},{"name":"pandas","slug":"pandas","permalink":"https://blog.wztlink1013.com/tags/pandas/"},{"name":"seaborn","slug":"seaborn","permalink":"https://blog.wztlink1013.com/tags/seaborn/"},{"name":"bokeh","slug":"bokeh","permalink":"https://blog.wztlink1013.com/tags/bokeh/"}]},{"title":"Pandas-分组聚合","slug":"DataAnalysis/pandas-分组聚合","date":"2020-02-10T08:28:49.000Z","updated":"2020-07-12T13:07:33.829Z","comments":true,"path":"2020/02/10/DataAnalysis/pandas-分组聚合/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/10/DataAnalysis/pandas-%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/","excerpt":"","text":"一、分组GroupBy对象 · groupedby函数中的参数： as_index的作用：控制聚合输出是否以组标签为索引值，默认为True，就是分层次的索引，若为False多加一列默认索引索引，相当于非其他数据排序好了。 但是这两组标签索引值不同有什么作用呢？=== 作用就是，根据的一列是否为索引列。 sort_values的作用：对选定的一列数值数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖）12345import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport matplotlib.pyplot %matplotlib inline 12345678dict_obj = &#123;'key1' : ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'a'], 'key2' : ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'data1': np.random.randn(8), 'data2': np.random.randn(8)&#125;df_obj = pd.DataFrame(dict_obj)print (df_obj) key1 key2 data1 data2 0 a one -0.147612 -0.348087 1 b one -0.992986 0.902458 2 a two 0.547541 -0.310040 3 b three 0.458871 -1.895392 4 a two 1.224041 0.220150 5 b two -0.200124 -1.562237 6 a one 1.539144 -0.758716 7 a three 0.385845 0.07430912345'''1. dataframe根据key2进行分组'''print(df_obj.groupby('key2')['key1'].count())print (type(df_obj.groupby('key1')))#没有可视化的输出 key2 one 3 three 2 two 3 Name: key1, dtype: int64 &lt;class &apos;pandas.core.groupby.generic.DataFrameGroupBy&apos;&gt;12'''2. 指定列根据key1进行分组'''print (type(df_obj['data1'].groupby(df_obj['key1']))) &lt;class &apos;pandas.core.groupby.generic.SeriesGroupBy&apos;&gt;123456# 分组运算grouped1 = df_obj.groupby('key1',as_index=False)print (grouped1.mean())grouped2 = df_obj['data1'].groupby(df_obj['key1'])#指定某一列的数据在该索引下进行分组并且加以聚合print (grouped2.mean()) key1 data1 data2 0 a 0.709792 -0.224477 1 b -0.244746 -0.851723 key1 a 0.709792 b -0.244746 Name: data1, dtype: float64123'''3. 按自定义key分组，列表'''self_def_key = [1, 1, 2, 2, 2, 1, 1, 1]df_obj.groupby(self_def_key).mean() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data1 data2 1 0.116853 -0.338455 2 0.743484 -0.661761 1df_obj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 key2 data1 data2 0 a one -0.147612 -0.348087 1 b one -0.992986 0.902458 2 a two 0.547541 -0.310040 3 b three 0.458871 -1.895392 4 a two 1.224041 0.220150 5 b two -0.200124 -1.562237 6 a one 1.539144 -0.758716 7 a three 0.385845 0.074309 123456'''4. 按多个列多层分组 = = = 通过列表'''grouped2 = df_obj.groupby(['key1', 'key2'],as_index=False)print (grouped2.mean())print('--------比较asindex的差异-------')grouped2 = df_obj.groupby(['key1', 'key2'],as_index=True)print (grouped2.mean()) key1 key2 data1 data2 0 a one 0.695766 -0.553401 1 a three 0.385845 0.074309 2 a two 0.885791 -0.044945 3 b one -0.992986 0.902458 4 b three 0.458871 -1.895392 5 b two -0.200124 -1.562237 --------比较asindex的差异------- data1 data2 key1 key2 a one 0.695766 -0.553401 three 0.385845 0.074309 two 0.885791 -0.044945 b one -0.992986 0.902458 three 0.458871 -1.895392 two -0.200124 -1.562237123456# 多层分组按key的顺序进行===和上面的asindex作用一样，把所选取的列数据当成索引，这才是区别之处grouped3 = df_obj.groupby(['key2', 'key1'])print (grouped3.mean())print ('=============================================')'''PS：如果想按照列进行分组聚合运算 === unstack===也可以通过转置'''print (grouped3.mean().unstack()) data1 data2 key2 key1 one a 0.695766 -0.553401 b -0.992986 0.902458 three a 0.385845 0.074309 b 0.458871 -1.895392 two a 0.885791 -0.044945 b -0.200124 -1.562237 ============================================= data1 data2 key1 a b a b key2 one 0.695766 -0.992986 -0.553401 0.902458 three 0.385845 0.458871 0.074309 -1.895392 two 0.885791 -0.200124 -0.044945 -1.562237GroupBy对象遍历迭代1grouped1 &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001AF5B5F9088&gt;123456# 单层分组print(grouped1.head(5))print(\"------------------------------------分割线------------------------------------------\")for group_name, group_data in grouped1: print (group_name) print (group_data['data1']) key1 key2 data1 data2 0 a one -0.147612 -0.348087 1 b one -0.992986 0.902458 2 a two 0.547541 -0.310040 3 b three 0.458871 -1.895392 4 a two 1.224041 0.220150 5 b two -0.200124 -1.562237 6 a one 1.539144 -0.758716 7 a three 0.385845 0.074309 ------------------------------------分割线------------------------------------------ a 0 -0.147612 2 0.547541 4 1.224041 6 1.539144 7 0.385845 Name: data1, dtype: float64 b 1 -0.992986 3 0.458871 5 -0.200124 Name: data1, dtype: float641234# 多层分组for group_name, group_data in grouped2: print (group_name) print (group_data) (&apos;a&apos;, &apos;one&apos;) key1 key2 data1 data2 0 a one -0.147612 -0.348087 6 a one 1.539144 -0.758716 (&apos;a&apos;, &apos;three&apos;) key1 key2 data1 data2 7 a three 0.385845 0.074309 (&apos;a&apos;, &apos;two&apos;) key1 key2 data1 data2 2 a two 0.547541 -0.31004 4 a two 1.224041 0.22015 (&apos;b&apos;, &apos;one&apos;) key1 key2 data1 data2 1 b one -0.992986 0.902458 (&apos;b&apos;, &apos;three&apos;) key1 key2 data1 data2 3 b three 0.458871 -1.895392 (&apos;b&apos;, &apos;two&apos;) key1 key2 data1 data2 5 b two -0.200124 -1.562237123# GroupBy对象转换listprint(grouped1.mean())list(grouped1) key1 data1 data2 0 a 0.709792 -0.224477 1 b -0.244746 -0.851723 [(&apos;a&apos;, key1 key2 data1 data2 0 a one -0.147612 -0.348087 2 a two 0.547541 -0.310040 4 a two 1.224041 0.220150 6 a one 1.539144 -0.758716 7 a three 0.385845 0.074309), (&apos;b&apos;, key1 key2 data1 data2 1 b one -0.992986 0.902458 3 b three 0.458871 -1.895392 5 b two -0.200124 -1.562237)]12# GroupBy对象转换dictdict(list(grouped1)) {&apos;a&apos;: key1 key2 data1 data2 0 a one -0.147612 -0.348087 2 a two 0.547541 -0.310040 4 a two 1.224041 0.220150 6 a one 1.539144 -0.758716 7 a three 0.385845 0.074309, &apos;b&apos;: key1 key2 data1 data2 1 b one -0.992986 0.902458 3 b three 0.458871 -1.895392 5 b two -0.200124 -1.562237}123456# 按列分组print (df_obj.dtypes)# 按数据类型分组df_obj.groupby(df_obj.dtypes, axis=1).size()df_obj.groupby(df_obj.dtypes, axis=1).sum() key1 object key2 object data1 float64 data2 float64 dtype: object其他分组方法 其实列表也是分组的一种方式 ===用到列表时候，一般都是多层索引了 12345df_obj2 = pd.DataFrame(np.random.randint(1, 10, (5,5)), columns=['a', 'b', 'c', 'd', 'e'], index=['A', 'B', 'C', 'D', 'E'])df_obj2.ix[1, 1:4] = np.NaNdf_obj2 C:\\Users\\wztli\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: FutureWarning: .ix is deprecated. Please use .loc for label based indexing or .iloc for positional indexing See the documentation here: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated after removing the cwd from sys.path. .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e A 4 2.0 6.0 5.0 9 B 5 NaN NaN NaN 6 C 2 3.0 8.0 6.0 3 D 9 5.0 6.0 5.0 9 E 4 1.0 6.0 2.0 1 通过字典分组 12345# 通过字典分组mapping_dict = &#123;'A':'python', 'B':'python', 'C':'java', 'D':'C', 'E':'java'&#125;#df_obj2.groupby(mapping_dict, axis=1).size()#df_obj2.groupby(mapping_dict, axis=1).count() # 非NaN的个数print(df_obj2.groupby(mapping_dict, axis=0).sum()) a b c d e C 9 5.0 6.0 5.0 9 java 6 4.0 14.0 8.0 4 python 9 2.0 6.0 5.0 15 通过函数分组 1234567891011121314151617# 通过函数分组df_obj3 = pd.DataFrame(np.random.randint(1, 10, (5,5)), columns=['a', 'b', 'c', 'd', 'e'], index=['AA', 'BBB', 'CC', 'D', 'EE'])#df_obj3def group_key(idx): \"\"\" idx 为列索引或行索引 \"\"\" #return idx return len(idx)df_obj3.groupby(group_key).size()# 以上自定义函数等价于#df_obj3.groupby(len).size() 1 1 2 3 3 1 dtype: int64 通过层级索引级别分组 12345# 通过索引级别分组columns = pd.MultiIndex.from_arrays([['Python', 'Java', 'Python', 'Java', 'Python'], ['A', 'A', 'B', 'C', 'B']], names=['language', 'index'])df_obj4 = pd.DataFrame(np.random.randint(1, 10, (5, 5)), columns=columns)df_obj4 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } language Python Java Python Java Python index A A B C B 0 4 6 8 8 4 1 1 3 2 3 5 2 3 1 1 5 6 3 2 9 3 1 9 4 4 1 5 6 6 123# 根据language进行分组df_obj4.groupby(level='language', axis=1).sum()df_obj4.groupby(level='index', axis=1).sum() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } index A B C 0 10 12 8 1 4 7 3 2 4 7 5 3 11 12 1 4 5 11 6 二、聚合12345678dict_obj = &#123;'key1' : ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'a'], 'key2' : ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'data1': np.random.randint(1,10, 8), 'data2': np.random.randint(1,10, 8)&#125;df_obj5 = pd.DataFrame(dict_obj)print (df_obj5) key1 key2 data1 data2 0 a one 9 4 1 b one 6 7 2 a two 9 4 3 b three 9 6 4 a two 6 2 5 b two 3 3 6 a one 1 1 7 a three 2 6内置的聚合函数1df_obj5 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 key2 data1 data2 0 a one 9 4 1 b one 6 7 2 a two 9 4 3 b three 9 6 4 a two 6 2 5 b two 3 3 6 a one 1 1 7 a three 2 6 12345678910111213141516# 内置的聚合函数#print (df_obj5.groupby('key1').sum())#print (df_obj5.groupby('key1').max())#print (df_obj5.groupby('key1').min())print (df_obj5.groupby('key1').mean())#print (df_obj5.groupby('key1').size())#print (df_obj5.groupby('key1').count())#print (df_obj5.groupby('key1').describe())'''count：分组中非NA的值std：标准差var：方差median：非NA中的中位数mean：非NA的平均值25%||50%||75%是什么意思==不造？''' data1 data2 key1 a 5.4 3.400000 b 6.0 5.333333 &apos;\\ncount：分组中非NA的值\\nstd：标准差\\nvar：方差\\nmedian：非NA中的中位数\\nmean：非NA的平均值\\n25%||50%||75%是什么意思==不造？\\n&apos;自定义聚合函数1234567891011# 自定义聚合函数def peak_range(df): \"\"\" 返回数值范围 \"\"\" #print type(df) #参数为索引所对应的记录 return df.max() - df.min()print (df_obj5.groupby('key1').agg(peak_range))#print df_obj.groupby('key1').agg(lambda df : df.max() - df.min())#默认列名就是函数名。 data1 data2 key1 a 8 5 b 6 4 同时应用多个聚合函数：agg 12# 同时应用多个聚合函数：aggprint (df_obj.groupby('key1').agg(['mean', 'std', 'count'])) data1 data2 mean std count mean std count key1 a 0.709792 0.674293 5 -0.224477 0.385674 5 b -0.244746 0.726957 3 -0.851723 1.528271 31print (df_obj.groupby('key1').agg(['mean', 'std', 'count', ('range', peak_range)])) # 通过元组提供新的列名 data1 data2 mean std count range mean std count range key1 a 0.709792 0.674293 5 1.686756 -0.224477 0.385674 5 0.978865 b -0.244746 0.726957 3 1.451857 -0.851723 1.528271 3 2.7978501234# 每列作用不同的聚合函数dict_mapping = &#123;'data1':'mean', 'data2':'sum'&#125;print (df_obj.groupby('key1').agg(dict_mapping)) data1 data2 key1 a 0.709792 -1.122384 b -0.244746 -2.555170123dict_mapping = &#123;'data1':['mean','max'], 'data2':'sum'&#125;print (df_obj.groupby('key1').agg(dict_mapping)) data1 data2 mean max sum key1 a 0.709792 1.539144 -1.122384 b -0.244746 0.458871 -2.55517012 三、分组运算12import pandas as pdimport numpy as np 分组和对齐1234567s1 = pd.Series(range(10, 20), index = range(10))s2 = pd.Series(range(20, 25), index = range(5))print ('s1: ' )print (s1)print('===========================') print ('s2: ')print (s2) s1: 0 10 1 11 2 12 3 13 4 14 5 15 6 16 7 17 8 18 9 19 dtype: int64 =========================== s2: 0 20 1 21 2 22 3 23 4 24 dtype: int64123# Series 对齐运算s1 + s2print(s1+s2) 0 30.0 1 32.0 2 34.0 3 36.0 4 38.0 5 NaN 6 NaN 7 NaN 8 NaN 9 NaN dtype: float6412345678df1 = pd.DataFrame(np.ones((2,2)), columns = ['a', 'b'])df2 = pd.DataFrame(np.ones((3,3)), columns = ['a', 'b', 'c'])print ('df1: ')print (df1)print ('=================')print ('df2: ')print (df2) df1: a b 0 1.0 1.0 1 1.0 1.0 ================= df2: a b c 0 1.0 1.0 1.0 1 1.0 1.0 1.0 2 1.0 1.0 1.012# DataFrame对齐操作print(df1 + df2) a b c 0 2.0 2.0 NaN 1 2.0 2.0 NaN 2 NaN NaN NaN① 常用运算函数 123# 填充未对齐的数据进行运算print(s1.add(s2, fill_value = -1)) 0 30.0 1 32.0 2 34.0 3 36.0 4 38.0 5 14.0 6 15.0 7 16.0 8 17.0 9 18.0 dtype: float6412df1.sub(df2, fill_value = 2.)#sub函数 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c 0 0.0 0.0 1.0 1 0.0 0.0 1.0 2 1.0 1.0 1.0 123# 填充NaNs3 = s1 + s2print (s3) 0 30.0 1 32.0 2 34.0 3 36.0 4 38.0 5 NaN 6 NaN 7 NaN 8 NaN 9 NaN dtype: float6412s3_filled = s3.fillna(-1)print (s3) 0 30.0 1 32.0 2 34.0 3 36.0 4 38.0 5 NaN 6 NaN 7 NaN 8 NaN 9 NaN dtype: float6412df3 = df1 + df2print (df3) a b c 0 2.0 2.0 NaN 1 2.0 2.0 NaN 2 NaN NaN NaN12df3.fillna(100, inplace = True)print (df3) a b c 0 2.0 2.0 100.0 1 2.0 2.0 100.0 2 100.0 100.0 100.0统计计算VS聚合运算12df_obj1 = pd.DataFrame(np.random.randn(5,4), columns = ['a', 'b', 'c', 'd'])print(df_obj1) a b c d 0 -0.542708 0.201376 1.111431 1.784324 1 0.583422 0.231096 -2.801967 0.568497 2 -0.577329 -1.668581 -0.842126 1.803080 3 -0.128431 -1.769619 2.089983 0.209761 4 0.493981 -1.571405 0.690019 -0.21529212345print(df_obj1.sum(axis=1))print('=====================================')print(df_obj1.max())print('=====================================')print(df_obj1.min(axis=1)) 0 2.554423 1 -1.418952 2 -1.284956 3 0.401694 4 -0.602698 dtype: float64 ===================================== a 0.583422 b 0.231096 c 2.089983 d 1.803080 dtype: float64 ===================================== 0 -0.542708 1 -2.801967 2 -1.668581 3 -1.769619 4 -1.571405 dtype: float64数据分组运算123456789# 分组运算后保持shapedict_obj = &#123;'key1' : ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'a'], 'key2' : ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'data1': np.random.randint(1, 10, 8), 'data2': np.random.randint(1, 10, 8)&#125;df_obj = pd.DataFrame(dict_obj)df_obj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 key2 data1 data2 0 a one 4 3 1 b one 4 4 2 a two 9 6 3 b three 8 2 4 a two 3 3 5 b two 6 2 6 a one 4 1 7 a three 2 2 12345# 按key1分组后，计算data1，data2的统计信息======并附加到原始表格中k1_sum = df_obj.groupby('key1').sum().add_prefix('sum_')print(k1_sum)print('================================')print(df_obj) sum_data1 sum_data2 key1 a 22 15 b 18 8 ================================ key1 key2 data1 data2 0 a one 4 3 1 b one 4 4 2 a two 9 6 3 b three 8 2 4 a two 3 3 5 b two 6 2 6 a one 4 1 7 a three 2 2 merge方法 12# 方法1，使用mergepd.merge(df_obj, k1_sum, left_on='key1', right_index=True) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 key2 data1 data2 sum_data1 sum_data2 0 a one 4 3 22 15 2 a two 9 6 22 15 4 a two 3 3 22 15 6 a one 4 1 22 15 7 a three 2 2 22 15 1 b one 4 4 18 8 3 b three 8 2 18 8 5 b two 6 2 18 8 transform方法 1234# 方法2，使用transformk1_sum_tf = df_obj.groupby('key1').transform(np.sum).add_prefix('sum_')df_obj[k1_sum_tf.columns] = k1_sum_tfdf_obj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 key2 data1 data2 sum_key2 sum_data1 sum_data2 0 a one 4 3 onetwotwoonethree 22 15 1 b one 4 4 onethreetwo 18 8 2 a two 9 6 onetwotwoonethree 22 15 3 b three 8 2 onethreetwo 18 8 4 a two 3 3 onetwotwoonethree 22 15 5 b two 6 2 onethreetwo 18 8 6 a one 4 1 onetwotwoonethree 22 15 7 a three 2 2 onetwotwoonethree 22 15 自定义函数 12345678# 自定义函数传入transformdef diff_mean(s): \"\"\" 返回数据与均值的差值 \"\"\" return s - s.mean()df_obj.groupby('key1').transform(diff_mean) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data1 data2 sum_data1 sum_data2 0 -0.4 0.000000 0 0 1 -2.0 1.333333 0 0 2 4.6 3.000000 0 0 3 2.0 -0.666667 0 0 4 -1.4 0.000000 0 0 5 0.0 -0.666667 0 0 6 -0.4 -2.000000 0 0 7 -2.4 -1.000000 0 0 123dataset_path = './data/starcraft.csv'df_data = pd.read_csv(dataset_path, usecols=['LeagueIndex', 'Age', 'HoursPerWeek', 'TotalHours', 'APM']) apply 1234567def top_n(df, n=3, column='APM'): \"\"\" 返回每个分组按 column 的 top n 数据 \"\"\" return df.sort_values(by=column, ascending=False)[:n]df_data.groupby('LeagueIndex').apply(top_n) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } LeagueIndex Age HoursPerWeek TotalHours APM LeagueIndex 1 2214 1 20.0 12.0 730.0 172.9530 2246 1 27.0 8.0 250.0 141.6282 1753 1 20.0 28.0 100.0 139.6362 2 3062 2 20.0 6.0 100.0 179.6250 3229 2 16.0 24.0 110.0 156.7380 1520 2 29.0 6.0 250.0 151.6470 3 1557 3 22.0 6.0 200.0 226.6554 484 3 19.0 42.0 450.0 220.0692 2883 3 16.0 8.0 800.0 208.9500 4 2688 4 26.0 24.0 990.0 249.0210 1759 4 16.0 6.0 75.0 229.9122 2637 4 23.0 24.0 650.0 227.2272 5 3277 5 18.0 16.0 950.0 372.6426 93 5 17.0 36.0 720.0 335.4990 202 5 37.0 14.0 800.0 327.7218 6 734 6 16.0 28.0 730.0 389.8314 2746 6 16.0 28.0 4000.0 350.4114 1810 6 21.0 14.0 730.0 323.2506 7 3127 7 23.0 42.0 2000.0 298.7952 104 7 21.0 24.0 1000.0 286.4538 1654 7 18.0 98.0 700.0 236.0316 8 3393 8 NaN NaN NaN 375.8664 3373 8 NaN NaN NaN 364.8504 3372 8 NaN NaN NaN 355.3518 12# apply函数接收的参数会传入自定义的函数中df_data.groupby('LeagueIndex').apply(top_n, n=2, column='Age') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } LeagueIndex Age HoursPerWeek TotalHours APM LeagueIndex 1 3146 1 40.0 12.0 150.0 38.5590 3040 1 39.0 10.0 500.0 29.8764 2 920 2 43.0 10.0 730.0 86.0586 2437 2 41.0 4.0 200.0 54.2166 3 1258 3 41.0 14.0 800.0 77.6472 2972 3 40.0 10.0 500.0 60.5970 4 1696 4 44.0 6.0 500.0 89.5266 1729 4 39.0 8.0 500.0 86.7246 5 202 5 37.0 14.0 800.0 327.7218 2745 5 37.0 18.0 1000.0 123.4098 6 3069 6 31.0 8.0 800.0 133.1790 2706 6 31.0 8.0 700.0 66.9918 7 2813 7 26.0 36.0 1300.0 188.5512 1992 7 26.0 24.0 1000.0 219.6690 8 3340 8 NaN NaN NaN 189.7404 3341 8 NaN NaN NaN 287.8128 禁止分组 group_keys=False 1df_data.groupby('LeagueIndex', group_keys=False).apply(top_n) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } LeagueIndex Age HoursPerWeek TotalHours APM 2214 1 20.0 12.0 730.0 172.9530 2246 1 27.0 8.0 250.0 141.6282 1753 1 20.0 28.0 100.0 139.6362 3062 2 20.0 6.0 100.0 179.6250 3229 2 16.0 24.0 110.0 156.7380 1520 2 29.0 6.0 250.0 151.6470 1557 3 22.0 6.0 200.0 226.6554 484 3 19.0 42.0 450.0 220.0692 2883 3 16.0 8.0 800.0 208.9500 2688 4 26.0 24.0 990.0 249.0210 1759 4 16.0 6.0 75.0 229.9122 2637 4 23.0 24.0 650.0 227.2272 3277 5 18.0 16.0 950.0 372.6426 93 5 17.0 36.0 720.0 335.4990 202 5 37.0 14.0 800.0 327.7218 734 6 16.0 28.0 730.0 389.8314 2746 6 16.0 28.0 4000.0 350.4114 1810 6 21.0 14.0 730.0 323.2506 3127 7 23.0 42.0 2000.0 298.7952 104 7 21.0 24.0 1000.0 286.4538 1654 7 18.0 98.0 700.0 236.0316 3393 8 NaN NaN NaN 375.8664 3373 8 NaN NaN NaN 364.8504 3372 8 NaN NaN NaN 355.3518 12","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"pandas","slug":"pandas","permalink":"https://blog.wztlink1013.com/tags/pandas/"}]},{"title":"pandas-索引","slug":"DataAnalysis/pandas-各种索引","date":"2020-02-10T08:26:13.000Z","updated":"2020-07-12T13:07:56.736Z","comments":true,"path":"2020/02/10/DataAnalysis/pandas-各种索引/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/10/DataAnalysis/pandas-%E5%90%84%E7%A7%8D%E7%B4%A2%E5%BC%95/","excerpt":"","text":"一、基本索引12import pandas as pdimport numpy as np Series索引12ser_obj1 = pd.Series(range(5), index = ['a', 'b', 'c', 'd', 'e'])print (ser_obj1.head()) a 0 b 1 c 2 d 3 e 4 dtype: int641234567891011121314151617181920'''1. 行索引'''print('行索引====================================================================')print (ser_obj1['b'])print (ser_obj1[0])print('切片索引====================================================================')'''2. 切片索引'''print (ser_obj1[1:3])print (ser_obj1['b':'d'])print('不连续索引索引====================================================================')#注意会不会包含尾巴。。'''3. 不连续索引'''print (ser_obj1[[0, 2, 4]])print (ser_obj1[['a', 'e']])print('布尔索引====================================================================')'''4. 布尔索引'''#是对里面的值进行判断，不是对索引ser_bool = ser_obj1 &gt; 2print (ser_bool)print (ser_obj1[ser_bool])#运用的方式print (ser_obj1[ser_obj1 &gt; 2]) 行索引==================================================================== 1 0 切片索引==================================================================== b 1 c 2 dtype: int64 b 1 c 2 d 3 dtype: int64 不连续索引索引==================================================================== a 0 c 2 e 4 dtype: int64 a 0 e 4 dtype: int64 布尔索引==================================================================== a False b False c False d True e True dtype: bool d 3 e 4 dtype: int64 d 3 e 4 dtype: int64Dataframe索引12df_obj1 = pd.DataFrame(np.random.randn(5,4), columns = ['a', 'b', 'c', 'd'])print (df_obj1.head()) a b c d 0 -0.720611 -0.002543 -0.084255 -0.583719 1 0.174715 0.288090 -0.254462 -1.669668 2 -1.872654 -0.466842 -0.481040 -1.735558 3 1.147668 1.205686 0.625582 -2.111863 4 1.177882 0.049581 -0.404098 -0.49712512345'''0. 转换成行索引的话===方式一：transpose或者T'''bb=df_obj1.transpose()print(df_obj1.T)print(bb)'''0. 转换成行索引的话===方式二：重构''' 0 1 2 3 4 a -0.720611 0.174715 -1.872654 1.147668 1.177882 b -0.002543 0.288090 -0.466842 1.205686 0.049581 c -0.084255 -0.254462 -0.481040 0.625582 -0.404098 d -0.583719 -1.669668 -1.735558 -2.111863 -0.497125 0 1 2 3 4 a -0.720611 0.174715 -1.872654 1.147668 1.177882 b -0.002543 0.288090 -0.466842 1.205686 0.049581 c -0.084255 -0.254462 -0.481040 0.625582 -0.404098 d -0.583719 -1.669668 -1.735558 -2.111863 -0.497125 &apos;0. 转换成行索引的话===方式二：重构/重塑===还没有完全明白&apos;123456789101112'''1. 列索引=====默认为列索引来操作'''print ('列索引')print(df_obj1.b)#当成属性来获取值print('===================')print (df_obj1['a']) # 返回Series类型print (type(df_obj1['a']))print (df_obj1[['a']]) # 返回DataFrame类型print (type(df_obj1[['a']]))'''2. 不连续索引'''print ('不连续索引')print (df_obj1[['a','c']])print (df_obj1[['a','c']]) 列索引 0 -0.002543 1 0.288090 2 -0.466842 3 1.205686 4 0.049581 Name: b, dtype: float64 =================== 0 -0.720611 1 0.174715 2 -1.872654 3 1.147668 4 1.177882 Name: a, dtype: float64 &lt;class &apos;pandas.core.series.Series&apos;&gt; a 0 -0.720611 1 0.174715 2 -1.872654 3 1.147668 4 1.177882 &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; 不连续索引 a c 0 -0.720611 -0.084255 1 0.174715 -0.254462 2 -1.872654 -0.481040 3 1.147668 0.625582 4 1.177882 -0.404098 a c 0 -0.720611 -0.084255 1 0.174715 -0.254462 2 -1.872654 -0.481040 3 1.147668 0.625582 4 1.177882 -0.404098三种索引方式123print(ser_obj1)print('============================')print(df_obj1) a 0 b 1 c 2 d 3 e 4 dtype: int64 ============================ a b c d 0 -0.720611 -0.002543 -0.084255 -0.583719 1 0.174715 0.288090 -0.254462 -1.669668 2 -1.872654 -0.466842 -0.481040 -1.735558 3 1.147668 1.205686 0.625582 -2.111863 4 1.177882 0.049581 -0.404098 -0.49712512345678'''1. 标签索引 loc===用的是index和column的值索引【标签索引】'''# Seriesprint (ser_obj1['b':'d'])print (ser_obj1.loc['b':'d'])# DataFrameprint (df_obj1[['a']])print (df_obj1.loc[0:2,'a':'c']) b 1 c 2 d 3 dtype: int64 b 1 c 2 d 3 dtype: int64 a 0 -0.720611 1 0.174715 2 -1.872654 3 1.147668 4 1.177882 a b c 0 -0.720611 -0.002543 -0.084255 1 0.174715 0.288090 -0.254462 2 -1.872654 -0.466842 -0.4810401234567'''2. 位置索引 iloc====用的是index和column的默认0，1，2，3···的值索引【位置索引】'''print (ser_obj1[1:3])print (ser_obj1.iloc[1:3])# DataFrameprint (df_obj1.iloc[0:2, 0:2])# 注意和df_obj.loc[0:2, 'a']的区别 = = = 行和列：都不包括尾巴 b 1 c 2 dtype: int64 b 1 c 2 dtype: int64 a b 0 -0.720611 -0.002543 1 0.174715 0.288090123456'''3. 混合索引 ix===先按标签索引loc尝试操作，然后再按位置索引iloc尝试操作'''print (ser_obj1.ix[1:3])print (ser_obj1.ix['b':'c'])# DataFrameprint (df_obj1.ix[0:2, 0:3]) b 1 c 2 dtype: int64 b 1 c 2 dtype: int64 a b c 0 -0.720611 -0.002543 -0.084255 1 0.174715 0.288090 -0.254462 2 -1.872654 -0.466842 -0.481040二、Pandas层级索引构造层级索引12345ser_obj = pd.Series(np.random.randn(12), index=[['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd'], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]])#列表里面的列表print (ser_obj) a 0 -0.373441 1 0.615976 2 0.959092 b 0 1.743670 1 -0.791517 2 -0.774013 c 0 1.271094 1 -0.723264 2 0.253038 d 0 -0.767791 1 0.419253 2 -0.691644 dtype: float64 MultiIndex索引对象 12print (type(ser_obj.index))print (ser_obj.index) &lt;class &apos;pandas.core.indexes.multi.MultiIndex&apos;&gt; MultiIndex([(&apos;a&apos;, 0), (&apos;a&apos;, 1), (&apos;a&apos;, 2), (&apos;b&apos;, 0), (&apos;b&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 0), (&apos;c&apos;, 1), (&apos;c&apos;, 2), (&apos;d&apos;, 0), (&apos;d&apos;, 1), (&apos;d&apos;, 2)], )选取子集12# 外层选取print (ser_obj['c']) 0 1.271094 1 -0.723264 2 0.253038 dtype: float6412# 内层选取print (ser_obj[:, 2]) a 0.959092 b -0.774013 c 0.253038 d -0.691644 dtype: float64交换分层顺序123df_obj2 = pd.DataFrame(np.random.randn(6,4), columns = ['a', 'b', 'c', 'd'],index=[['a', 'a', 'a', 'b', 'b','b'],[1, 2, 3, 1, 2,3]])#print (df_obj1.swaplevel())print (df_obj2) a b c d a 1 0.273776 -0.018659 1.512727 -0.088091 2 -0.410883 -1.488943 0.917268 1.179941 3 -0.237532 -0.823717 0.189495 1.060476 b 1 0.727872 0.323352 0.443786 0.780510 2 -1.407645 -0.059689 1.439843 -1.700740 3 -0.377628 -0.137348 -0.739980 0.122528交换并排序分层12print (df_obj2.swaplevel().sortvalues(by='a'))#Series没有这个内置函数sortlevel===dataframe有 三、透视表和交叉表1234dataset_path = './data/starcraft.csv'df_data = pd.read_csv(dataset_path, usecols=['LeagueIndex', 'Age', 'HoursPerWeek', 'TotalHours', 'APM'])print(df_data.head()) LeagueIndex Age HoursPerWeek TotalHours APM 0 5 27.0 10.0 3000.0 143.7180 1 5 23.0 10.0 5000.0 129.2322 2 4 30.0 10.0 200.0 69.9612 3 3 19.0 20.0 400.0 107.6016 4 3 32.0 10.0 500.0 122.8908透视表1234pd.pivot_table(df_data, index=['Age'], columns=['LeagueIndex'], aggfunc=np.sum) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } APM HoursPerWeek TotalHours LeagueIndex 1 2 3 4 5 6 7 1 2 3 ... 5 6 7 1 2 3 4 5 6 7 Age 16.0 1062.44754 2919.70434 4851.9222 5149.7310 7787.37780 9042.1722 386.7774 324.0 720.0 778.0 ... 1220.0 1280.0 56.0 4307.0 13143.0 29211.0 23581.0 49233.0 51320.0 3000.0 17.0 655.67280 1661.01540 4181.8920 5525.3586 10052.72100 8310.0858 573.8286 184.0 378.0 664.0 ... 1460.0 1116.0 104.0 2044.0 7423.0 16602.0 24005.0 53375.0 45421.0 12700.0 18.0 704.47680 3300.41040 4847.2152 8763.0783 10988.66100 9134.7240 618.5790 204.0 548.0 886.0 ... 1644.0 1194.0 164.0 3570.0 11471.0 21037.0 46034.0 1056486.0 50378.0 3200.0 19.0 734.55600 2216.81880 5183.7888 8030.1960 9271.09260 11955.6030 696.7770 126.0 458.0 950.0 ... 962.0 1642.0 168.0 2355.0 8467.0 31861.0 39705.0 44697.0 70331.0 4166.0 20.0 1624.89660 2147.23200 4211.5686 10596.2070 10871.65440 14291.8692 NaN 328.0 288.0 654.0 ... 1290.0 1816.0 NaN 7212.0 6325.0 20174.0 55083.0 64170.0 105131.0 NaN 21.0 780.67950 1578.02880 3949.3062 8689.8804 11954.91660 13165.7649 867.3474 162.0 270.0 580.0 ... 1446.0 1858.0 62.0 3377.0 7673.0 19095.0 42296.0 68739.0 82061.0 3180.0 22.0 674.59860 2147.50980 4379.3424 7818.7302 10473.28380 10165.8672 493.1586 146.0 372.0 680.0 ... 1304.0 1448.0 112.0 4225.0 10861.0 23030.0 57996.0 84330.0 67069.0 6950.0 23.0 359.65980 1575.06120 4602.7416 7616.9298 8292.86160 6131.1936 1799.6520 46.0 320.0 598.0 ... 998.0 726.0 296.0 896.0 12350.0 23081.0 40025.0 56097.0 43176.0 14290.0 24.0 439.43040 1717.55340 2876.8572 5503.7736 7292.32740 7240.4076 428.6538 116.0 344.0 406.0 ... 668.0 1048.0 36.0 2070.0 9543.0 25421.0 35384.0 36147.0 43114.0 2250.0 25.0 572.61420 1178.02440 2201.6388 4710.9924 6168.19260 2200.6362 361.4550 124.0 166.0 268.0 ... 682.0 256.0 52.0 2440.0 5846.0 11270.0 26610.0 40681.0 14890.0 3300.0 26.0 418.70874 1165.96680 1794.1890 3139.2852 4016.67060 3301.8498 408.2202 96.0 148.0 272.0 ... 418.0 354.0 60.0 1608.0 3417.0 10548.0 16839.0 20100.0 17663.0 2300.0 27.0 359.17320 1164.15960 1426.4550 2850.1320 3498.30300 2040.8454 NaN 40.0 152.0 226.0 ... 340.0 164.0 NaN 1100.0 3615.0 7525.0 15935.0 19770.0 11796.0 NaN 28.0 333.84240 479.34000 1152.5958 2205.8778 1992.60540 521.7666 NaN 28.0 90.0 220.0 ... 186.0 44.0 NaN 466.0 1860.0 7901.0 15370.0 10872.0 2500.0 NaN 29.0 236.74020 695.88480 568.2594 1447.5906 1398.78540 715.9404 NaN 54.0 56.0 80.0 ... 180.0 106.0 NaN 2490.0 2000.0 3816.0 8220.0 10292.0 5950.0 NaN 30.0 125.53740 441.14160 733.6416 743.4468 578.32020 123.3774 NaN 14.0 54.0 76.0 ... 90.0 28.0 NaN 210.0 2440.0 4370.0 6310.0 3440.0 1500.0 NaN 31.0 41.58600 314.92980 659.2626 1166.7606 315.53460 200.1708 NaN 12.0 36.0 68.0 ... 12.0 16.0 NaN 200.0 1300.0 3500.0 8710.0 1050.0 1500.0 NaN 32.0 179.14380 315.54180 457.5174 541.8996 66.19740 NaN NaN 40.0 56.0 68.0 ... 10.0 NaN NaN 1600.0 860.0 2300.0 6040.0 800.0 NaN NaN 33.0 198.77880 153.34680 284.8218 116.7516 245.45166 NaN NaN 32.0 12.0 42.0 ... 60.0 NaN NaN 1200.0 220.0 2065.0 1130.0 2050.0 NaN NaN 34.0 49.11360 276.88260 268.4100 340.7124 174.54540 NaN NaN 12.0 56.0 28.0 ... 14.0 NaN NaN 150.0 3380.0 1150.0 2400.0 2764.0 NaN NaN 35.0 229.31280 54.04680 170.4930 634.7688 115.06440 NaN NaN 54.0 8.0 26.0 ... 12.0 NaN NaN 1350.0 500.0 1950.0 3800.0 800.0 NaN NaN 36.0 NaN 150.13140 333.6474 73.6980 NaN NaN NaN NaN 16.0 40.0 ... NaN NaN NaN NaN 500.0 1950.0 400.0 NaN NaN NaN 37.0 22.05960 49.89600 44.9682 NaN 451.13160 NaN NaN 12.0 30.0 6.0 ... 32.0 NaN NaN 300.0 125.0 600.0 NaN 1800.0 NaN NaN 38.0 71.59500 NaN 334.6878 NaN NaN NaN NaN 16.0 NaN 46.0 ... NaN NaN NaN 300.0 NaN 2280.0 NaN NaN NaN NaN 39.0 29.87640 NaN 53.7690 86.7246 NaN NaN NaN 10.0 NaN 12.0 ... NaN NaN NaN 500.0 NaN 450.0 500.0 NaN NaN NaN 40.0 38.55900 51.83580 107.4684 NaN NaN NaN NaN 12.0 14.0 26.0 ... NaN NaN NaN 150.0 500.0 1080.0 NaN NaN NaN NaN 41.0 NaN 108.45720 77.6472 NaN NaN NaN NaN NaN 12.0 14.0 ... NaN NaN NaN NaN 450.0 800.0 NaN NaN NaN NaN 43.0 NaN 86.05860 NaN NaN NaN NaN NaN NaN 10.0 NaN ... NaN NaN NaN NaN 730.0 NaN NaN NaN NaN NaN 44.0 NaN NaN NaN 89.5266 NaN NaN NaN NaN NaN NaN ... NaN NaN NaN NaN NaN NaN 500.0 NaN NaN NaN 28 rows × 21 columns 12345pd.pivot_table(df_data, index=['Age'], columns=['LeagueIndex'], aggfunc=np.sum, fill_value=-100.) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } APM HoursPerWeek TotalHours LeagueIndex 1 2 3 4 5 6 7 1 2 3 ... 5 6 7 1 2 3 4 5 6 7 Age 16.0 1062.44754 2919.70434 4851.9222 5149.7310 7787.37780 9042.1722 386.7774 324 720 778 ... 1220 1280 56 4307 13143 29211 23581 49233 51320 3000 17.0 655.67280 1661.01540 4181.8920 5525.3586 10052.72100 8310.0858 573.8286 184 378 664 ... 1460 1116 104 2044 7423 16602 24005 53375 45421 12700 18.0 704.47680 3300.41040 4847.2152 8763.0783 10988.66100 9134.7240 618.5790 204 548 886 ... 1644 1194 164 3570 11471 21037 46034 1056486 50378 3200 19.0 734.55600 2216.81880 5183.7888 8030.1960 9271.09260 11955.6030 696.7770 126 458 950 ... 962 1642 168 2355 8467 31861 39705 44697 70331 4166 20.0 1624.89660 2147.23200 4211.5686 10596.2070 10871.65440 14291.8692 -100.0000 328 288 654 ... 1290 1816 -100 7212 6325 20174 55083 64170 105131 -100 21.0 780.67950 1578.02880 3949.3062 8689.8804 11954.91660 13165.7649 867.3474 162 270 580 ... 1446 1858 62 3377 7673 19095 42296 68739 82061 3180 22.0 674.59860 2147.50980 4379.3424 7818.7302 10473.28380 10165.8672 493.1586 146 372 680 ... 1304 1448 112 4225 10861 23030 57996 84330 67069 6950 23.0 359.65980 1575.06120 4602.7416 7616.9298 8292.86160 6131.1936 1799.6520 46 320 598 ... 998 726 296 896 12350 23081 40025 56097 43176 14290 24.0 439.43040 1717.55340 2876.8572 5503.7736 7292.32740 7240.4076 428.6538 116 344 406 ... 668 1048 36 2070 9543 25421 35384 36147 43114 2250 25.0 572.61420 1178.02440 2201.6388 4710.9924 6168.19260 2200.6362 361.4550 124 166 268 ... 682 256 52 2440 5846 11270 26610 40681 14890 3300 26.0 418.70874 1165.96680 1794.1890 3139.2852 4016.67060 3301.8498 408.2202 96 148 272 ... 418 354 60 1608 3417 10548 16839 20100 17663 2300 27.0 359.17320 1164.15960 1426.4550 2850.1320 3498.30300 2040.8454 -100.0000 40 152 226 ... 340 164 -100 1100 3615 7525 15935 19770 11796 -100 28.0 333.84240 479.34000 1152.5958 2205.8778 1992.60540 521.7666 -100.0000 28 90 220 ... 186 44 -100 466 1860 7901 15370 10872 2500 -100 29.0 236.74020 695.88480 568.2594 1447.5906 1398.78540 715.9404 -100.0000 54 56 80 ... 180 106 -100 2490 2000 3816 8220 10292 5950 -100 30.0 125.53740 441.14160 733.6416 743.4468 578.32020 123.3774 -100.0000 14 54 76 ... 90 28 -100 210 2440 4370 6310 3440 1500 -100 31.0 41.58600 314.92980 659.2626 1166.7606 315.53460 200.1708 -100.0000 12 36 68 ... 12 16 -100 200 1300 3500 8710 1050 1500 -100 32.0 179.14380 315.54180 457.5174 541.8996 66.19740 -100.0000 -100.0000 40 56 68 ... 10 -100 -100 1600 860 2300 6040 800 -100 -100 33.0 198.77880 153.34680 284.8218 116.7516 245.45166 -100.0000 -100.0000 32 12 42 ... 60 -100 -100 1200 220 2065 1130 2050 -100 -100 34.0 49.11360 276.88260 268.4100 340.7124 174.54540 -100.0000 -100.0000 12 56 28 ... 14 -100 -100 150 3380 1150 2400 2764 -100 -100 35.0 229.31280 54.04680 170.4930 634.7688 115.06440 -100.0000 -100.0000 54 8 26 ... 12 -100 -100 1350 500 1950 3800 800 -100 -100 36.0 -100.00000 150.13140 333.6474 73.6980 -100.00000 -100.0000 -100.0000 -100 16 40 ... -100 -100 -100 -100 500 1950 400 -100 -100 -100 37.0 22.05960 49.89600 44.9682 -100.0000 451.13160 -100.0000 -100.0000 12 30 6 ... 32 -100 -100 300 125 600 -100 1800 -100 -100 38.0 71.59500 -100.00000 334.6878 -100.0000 -100.00000 -100.0000 -100.0000 16 -100 46 ... -100 -100 -100 300 -100 2280 -100 -100 -100 -100 39.0 29.87640 -100.00000 53.7690 86.7246 -100.00000 -100.0000 -100.0000 10 -100 12 ... -100 -100 -100 500 -100 450 500 -100 -100 -100 40.0 38.55900 51.83580 107.4684 -100.0000 -100.00000 -100.0000 -100.0000 12 14 26 ... -100 -100 -100 150 500 1080 -100 -100 -100 -100 41.0 -100.00000 108.45720 77.6472 -100.0000 -100.00000 -100.0000 -100.0000 -100 12 14 ... -100 -100 -100 -100 450 800 -100 -100 -100 -100 43.0 -100.00000 86.05860 -100.0000 -100.0000 -100.00000 -100.0000 -100.0000 -100 10 -100 ... -100 -100 -100 -100 730 -100 -100 -100 -100 -100 44.0 -100.00000 -100.00000 -100.0000 89.5266 -100.00000 -100.0000 -100.0000 -100 -100 -100 ... -100 -100 -100 -100 -100 -100 500 -100 -100 -100 28 rows × 21 columns 交叉表12pd.crosstab(df_data['LeagueIndex'], df_data['Age']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Age 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 ... 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 43.0 44.0 LeagueIndex 1 18 9 13 12 22 12 12 6 9 11 ... 1 5 0 1 1 1 1 0 0 0 2 38 22 38 32 25 23 28 24 24 18 ... 5 1 2 1 0 0 1 2 1 0 3 48 43 56 53 47 44 47 47 32 26 ... 3 3 5 1 4 1 2 1 0 0 4 45 49 78 71 97 81 75 72 52 45 ... 4 7 1 0 0 1 0 0 0 1 5 55 71 81 68 80 96 81 59 58 51 ... 2 1 0 2 0 0 0 0 0 0 6 50 51 56 73 86 83 68 42 48 15 ... 0 0 0 0 0 0 0 0 0 0 7 2 3 3 4 0 5 3 9 2 2 ... 0 0 0 0 0 0 0 0 0 0 7 rows × 28 columns 12pd.crosstab(df_data['LeagueIndex'], [df_data['Age'], df_data['HoursPerWeek']]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } Age 16.0 ... 39.0 40.0 41.0 43.0 44.0 HoursPerWeek 0.0 2.0 4.0 6.0 8.0 10.0 12.0 14.0 16.0 20.0 ... 12.0 10.0 12.0 14.0 16.0 4.0 8.0 14.0 10.0 6.0 LeagueIndex 1 0 0 0 1 3 1 1 2 3 3 ... 0 0 1 0 0 0 0 0 0 0 2 0 0 2 1 0 9 4 4 3 3 ... 0 0 0 1 0 1 1 0 1 0 3 0 0 1 6 7 6 6 7 2 1 ... 1 1 0 0 1 0 0 1 0 0 4 0 2 5 1 6 4 3 6 3 1 ... 0 0 0 0 0 0 0 0 0 1 5 0 1 2 1 3 8 3 6 3 6 ... 0 0 0 0 0 0 0 0 0 0 6 1 1 4 2 1 1 4 3 1 7 ... 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 7 rows × 325 columns 12","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"pandas","slug":"pandas","permalink":"https://blog.wztlink1013.com/tags/pandas/"}]},{"title":"pandas-基本知识","slug":"DataAnalysis/pandas-基本知识","date":"2020-02-10T08:18:03.000Z","updated":"2020-07-12T13:08:23.823Z","comments":true,"path":"2020/02/10/DataAnalysis/pandas-基本知识/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/10/DataAnalysis/pandas-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/","excerpt":"","text":"一、Pandas数据结构1import pandas as pd Series 通过list构建Series 123ser_obj = pd.Series(range(10, 20,2))print (type(ser_obj))print(ser_obj) &lt;class &apos;pandas.core.series.Series&apos;&gt; 0 10 1 12 2 14 3 16 4 18 dtype: int6412345678910# 获取数据print (ser_obj.values)# 获取索引print (ser_obj.index)#范围索引数据类型# 预览数据print (ser_obj.head(3))#默认输出五行 [10 12 14 16 18] RangeIndex(start=0, stop=5, step=1) 0 10 1 12 2 14 dtype: int64 通过dict构建Series 12345year_data = &#123;2001: 17.8, 2002: 20.1, 2003: 16.5,2004:324,2423:243&#125;ser_obj2 = pd.Series(year_data)print (ser_obj2.head(2))print (ser_obj2.index)print(ser_obj2) 2001 17.8 2002 20.1 dtype: float64 Int64Index([2001, 2002, 2003, 2004, 2423], dtype=&apos;int64&apos;) 2001 17.8 2002 20.1 2003 16.5 2004 324.0 2423 243.0 dtype: float641234# name属性【【【【【出问题了！！！】】】】】ser_obj2.name = '钱'ser_obj2.index.name = 'year'print (ser_obj2.head()) year 2001 17.8 2002 20.1 2003 16.5 2004 324.0 2423 243.0 Name: 钱, dtype: float64DataFrame 通过ndarray构建DataFrame 12345678import numpy as nparray = np.random.rand(5,4)print (array)df_obj = pd.DataFrame(array,columns=['a','b','c','d'])print (df_obj.head())print(df_obj.sort_values(by='a', ascending=False)) [[0.23496522 0.92258429 0.36447462 0.52634697] [0.73743514 0.88175941 0.48944212 0.4173522 ] [0.21214568 0.57148666 0.59496072 0.49490723] [0.7458542 0.74743907 0.70475157 0.28130394] [0.43805937 0.90300134 0.00730653 0.68203725]] a b c d 0 0.234965 0.922584 0.364475 0.526347 1 0.737435 0.881759 0.489442 0.417352 2 0.212146 0.571487 0.594961 0.494907 3 0.745854 0.747439 0.704752 0.281304 4 0.438059 0.903001 0.007307 0.682037 a b c d 3 0.745854 0.747439 0.704752 0.281304 1 0.737435 0.881759 0.489442 0.417352 4 0.438059 0.903001 0.007307 0.682037 0 0.234965 0.922584 0.364475 0.526347 2 0.212146 0.571487 0.594961 0.494907 通过dict构建DataFrame 123456789#一个键值对就相当于一列！！但是具体到字典里面的值所用到的一些函数还是不能很清楚dict_data = &#123;'A': 1., 'B': pd.Timestamp('20161217'), 'C': pd.Series(1, index=list(range(4)),dtype='float32'), 'D': np.array([3] * 4,dtype='int32'), 'E' : pd.Categorical([\"Python\",\"Java\",\"C++\",\"C#\"]), 'F' : 'ChinaHadoop' &#125;df_obj2 = pd.DataFrame(dict_data)print (df_obj2.head()) A B C D E F 0 1.0 2016-12-17 1.0 3 Python ChinaHadoop 1 1.0 2016-12-17 1.0 3 Java ChinaHadoop 2 1.0 2016-12-17 1.0 3 C++ ChinaHadoop 3 1.0 2016-12-17 1.0 3 C# ChinaHadoop12345# 增加列df_obj2['G'] = df_obj2['D'] + 4print (df_obj2.head())xxx = pd.DataFrame(df_obj2,columns=['A','B','C','D','E','F','G','H'],index=[0,1,2,3,4])print(xxx) A B C D E F G 0 1.0 2016-12-17 1.0 3 Python ChinaHadoop 7 1 1.0 2016-12-17 1.0 3 Java ChinaHadoop 7 2 1.0 2016-12-17 1.0 3 C++ ChinaHadoop 7 3 1.0 2016-12-17 1.0 3 C# ChinaHadoop 7 A B C D E F G H 0 1.0 2016-12-17 1.0 3.0 Python ChinaHadoop 7.0 NaN 1 1.0 2016-12-17 1.0 3.0 Java ChinaHadoop 7.0 NaN 2 1.0 2016-12-17 1.0 3.0 C++ ChinaHadoop 7.0 NaN 3 1.0 2016-12-17 1.0 3.0 C# ChinaHadoop 7.0 NaN 4 NaN NaT NaN NaN NaN NaN NaN NaNIndex1234print (type(ser_obj.index))print (type(df_obj2.index))print (df_obj2.index) &lt;class &apos;pandas.core.indexes.range.RangeIndex&apos;&gt; &lt;class &apos;pandas.core.indexes.numeric.Int64Index&apos;&gt; Int64Index([0, 1, 2, 3], dtype=&apos;int64&apos;)12# 索引对象不可变df_obj2.index[0] = 2 --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-10-6367894e76d8&gt; in &lt;module&gt; 1 # 索引对象不可变 ----&gt; 2 df_obj2.index[0] = 2 ~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py in __setitem__(self, key, value) 4258 4259 def __setitem__(self, key, value): -&gt; 4260 raise TypeError(&quot;Index does not support mutable operations&quot;) 4261 4262 def __getitem__(self, key): TypeError: Index does not support mutable operations12 二、Pandas数据操作常用函数总结 ·shape 获取数据的尺寸 获得df的size：df.shape 获得df中的行数：df.shape[0] 获得df中的列数： df.shape[1] 获得行索引信息：df.index 获得列索引信息：df.colomns ·values 获得df中的值===中文没用 df.values === 以列表的形式展现出来，去除了索引===dataframe类型数据转换成array类型 ·setindex和resetindex reset_index可以还原索引，从新变为默认的整型索引 DataFrame.reset_index(level=None, drop=False, inplace=False, col_level=0, col_fill=”) level控制了具体要还原的那个等级的索引 drop为False则索引列会被还原为普通列，否则会丢失 set_index方法，设置单索引和复合索引抑或是添加索引。 DataFrame.set_index(keys, drop=True, append=False, inplace=False, verify_integrity=False) append添加新索引，drop为False，inplace为True时，索引将会还原为列 ·iterrows（）遍历DataFrame中的数据 for index,row in df.iterrows(): ·split(sep,n,expand=false) sep表示用于分割的字符；n表格分割成多少列；expand表示是否展开为数据款，True输出Series，False输出Dataframe。 字段拆分：是指按照固定的字符，拆分已有字符串12import pandas as pdimport numpy as np 匿名函数应用12345# Numpy ufunc 函数df = pd.DataFrame(np.random.randn(5,4) - 1)print (df)print (np.abs(df)) 0 1 2 3 0 0.624016 -2.695175 -1.211426 -0.386151 1 -1.335385 -1.315232 -0.305902 -0.361348 2 -0.349443 -2.032110 0.075995 -0.966725 3 -1.631192 -1.051390 -1.767981 -0.366663 4 -0.786178 -0.335846 -0.797992 -0.931216 0 1 2 3 0 0.624016 2.695175 1.211426 0.386151 1 1.335385 1.315232 0.305902 0.361348 2 0.349443 2.032110 0.075995 0.966725 3 1.631192 1.051390 1.767981 0.366663 4 0.786178 0.335846 0.797992 0.931216123# 使用apply应用行或列数据f = lambda x : x.max()print (df.apply(f)) 0 0.624016 1 -0.335846 2 0.075995 3 -0.361348 dtype: float6412# 指定轴方向print (df.apply(f, axis=1)) 0 0.624016 1 -0.305902 2 0.075995 3 -0.366663 4 -0.335846 dtype: float64123# 使用applymap应用到每个数据f2 = lambda x : '%.2f' % xprint (df.applymap(f2)) 0 1 2 3 0 0.62 -2.70 -1.21 -0.39 1 -1.34 -1.32 -0.31 -0.36 2 -0.35 -2.03 0.08 -0.97 3 -1.63 -1.05 -1.77 -0.37 4 -0.79 -0.34 -0.80 -0.93排序12s4 = pd.Series(range(10, 15), index = np.random.randint(5, size=5))print (s4) 4 10 1 11 4 12 1 13 1 14 dtype: int64 索引排序 12s4.sort_index() 1 11 1 13 1 14 4 10 4 12 dtype: int64123df4 = pd.DataFrame(np.random.randn(3, 4), index=np.random.randint(3, size=3), columns=np.random.randint(4, size=4)) 1df4 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 2 1 3 1 0 0.007031 1.261990 -1.647929 0.176549 1 -2.510698 -0.207659 0.628221 0.441352 0 -0.367051 1.536606 0.167158 -0.236129 12#df4.sort_index(ascending=False)df4.sort_index(axis=1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 1 1 2 3 0 1.261990 0.176549 0.007031 -1.647929 1 -0.207659 0.441352 -2.510698 0.628221 0 1.536606 -0.236129 -0.367051 0.167158 按值排序 1234#df.sortvalues(by='a', ascending=False) === 通过a的值# 作用是对选定的一列数值（'a'）数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖）df4.sort_values(by=1) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-22-36ffa8ddd07d&gt; in &lt;module&gt; 2 #df.sortvalues(by=&apos;a&apos;, ascending=False) === 通过a的值 3 # 作用是对选定的一列数值（&apos;a&apos;）数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖） ----&gt; 4 df4.sort_values(by=1) ~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py in sort_values(self, by, axis, ascending, inplace, kind, na_position) 4991 4992 by = by[0] -&gt; 4993 k = self._get_label_or_level_values(by, axis=axis) 4994 4995 if isinstance(ascending, (tuple, list)): ~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py in _get_label_or_level_values(self, key, axis) 1795 key=key, 1796 label_axis_name=label_axis_name, -&gt; 1797 multi_message=multi_message, 1798 ) 1799 ) ValueError: The column label &apos;1&apos; is not unique.12","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"pandas","slug":"pandas","permalink":"https://blog.wztlink1013.com/tags/pandas/"}]},{"title":"numpy-使用总结","slug":"DataAnalysis/numpy-使用总结","date":"2020-02-10T08:10:05.000Z","updated":"2020-07-12T13:07:04.950Z","comments":true,"path":"2020/02/10/DataAnalysis/numpy-使用总结/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/10/DataAnalysis/numpy-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"一、NumPyndarray 理解多维数组12345678import numpy as np# 生成指定维度的随机多维数据#数学建模应该用不到data = np.random.rand(2, 3)print (data)print (type(data))#type是显示数据类型；shape显示维度；ndim维度个数;type另外的作用 [[0.46686682 0.68844304 0.76663872] [0.70747721 0.47887587 0.25943412]] &lt;class &apos;numpy.ndarray&apos;&gt; ndim, shape 和 dtype 属性 123print ('维度个数', data.ndim)print ('各维度大小: ', data.shape)print ('数据类型: ', data.dtype) 维度个数 2 各维度大小: (2, 3) 数据类型: float64创建ndarray1234567'''1. array创建'''# list转换为 ndarrayl = range(10)data = np.array(l)print (data)print (data.shape)print (data.ndim) [0 1 2 3 4 5 6 7 8 9] (10,) 1123456# 嵌套序列转换为ndarrayl2 = [range(10), range(10)]#就这样形成了一个数组data = np.array(l2)print (data)print (data.shape) [[0 1 2 3 4 5 6 7 8 9] [0 1 2 3 4 5 6 7 8 9]] (2, 10)123456789101112131415161718192021'''2. zeros;ones;empty创建'''# np.zeroszeros_arr = np.zeros((3, 4))#注意元组，这里经常报错# np.onesones_arr = np.ones((2, 3))# np.empty[不全为零，而且是随机的一些数字]empty_arr = np.empty((3, 3))# np.empty 指定数据类型empty_int_arr = np.empty((3, 3), int)print (zeros_arr)print ('-------------')print (ones_arr)print ('-------------')print (empty_arr)print ('-------------')print (empty_int_arr) [[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]] ------------- [[1. 1. 1.] [1. 1. 1.]] ------------- [[0.000e+000 0.000e+000 0.000e+000] [0.000e+000 0.000e+000 2.174e-321] [0.000e+000 0.000e+000 0.000e+000]] ------------- [[0 0 0] [0 0 0] [0 0 0]]123# np.arange()#创建一系列连续的数算是numpy里面类似python里面range的功能print (np.arange(10)) [0 1 2 3 4 5 6 7 8 9]二、操作nddarray矢量化 (vectorization)12345678910# 矢量与矢量运算arr = np.array([[1, 2, 3], [4, 5, 6]])print (\"元素之间相乘：\")#注意区分矩阵之间的运算。这里的矢量原酸相当于是广播式的运算print (arr * arr)print (\"矩阵相加：\")print (arr + arr) 元素之间相乘： [[ 1 4 9] [16 25 36]] 矩阵相加： [[ 2 4 6] [ 8 10 12]]123# 矢量与标量运算print (1. / arr)print (2. * arr) [[1. 0.5 0.33333333] [0.25 0.2 0.16666667]] [[ 2. 4. 6.] [ 8. 10. 12.]]索引与切片12345# 一维数组arr1 = np.arange(10)print (arr1)print (arr1[2:5]) [0 1 2 3 4 5 6 7 8 9] [2 3 4]123456# 多维数组arr2 = np.arange(12).reshape(3,4)#要学会定义多维数组，arange是形成12个随机数，之后的reshape是形成维数#多维数组的空间含义就是比如：3.4.5=长4宽5高3#还有点数就是应用函数print (arr2) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11]]12345print (arr2[1])print (arr2[0:2, 2:])print (arr2[:, 1:3]) [4 5 6 7] [[2 3] [6 7]] [[ 1 2] [ 5 6] [ 9 10]]1234567891011121314151617181920# 条件索引# 找出 data_arr 中 2015年后的数据data_arr = np.random.rand(3,3)print (data_arr)year_arr = np.array([[2000, 2001, 2000], [2005, 2002, 2009], [2001, 2003, 2010]])is_year_after_2005 = year_arr &gt;= 2005#:他会扩展成同类型的数组print (is_year_after_2005, is_year_after_2005.dtype)filtered_arr = data_arr[is_year_after_2005]filtered_arr = data_arr[year_arr &gt;= 2005]print (filtered_arr)#中间的一些语句可以删除#最后生成得是一维数组，进行数据过滤的时候很有用 [[0.61482194 0.0249229 0.28525661] [0.05121173 0.37672803 0.86259463] [0.22648329 0.4581513 0.18620441]] [[False False False] [ True False True] [False False True]] bool [0.05121173 0.86259463 0.18620441]123# 多个条件&amp; |filtered_arr = data_arr[(year_arr &lt;= 2005) &amp; (year_arr % 2 == 0)]print (filtered_arr) [0.61482194 0.28525661 0.37672803]转置 === transpose123arr = np.random.rand(2,3)print (arr)print (arr.transpose()) [[0.01538974 0.47573964 0.90684253] [0.93683601 0.64306611 0.63846634]] [[0.01538974 0.93683601] [0.47573964 0.64306611] [0.90684253 0.63846634]]123456#高维数组的转换(图像里面会用得到转换维度)arr3d = np.random.rand(2,3,4)print (arr3d)print ('----------------------')print (arr3d.transpose((1,0,2))) # 多维数组的转置和定义不会 [[[0.18074837 0.64652003 0.80527972 0.67800268] [0.95766577 0.2498768 0.00304503 0.7058178 ] [0.12523549 0.18796252 0.72463798 0.15352211]] [[0.38808013 0.31075033 0.53082474 0.32254431] [0.6861262 0.02999367 0.70980993 0.09099878] [0.14987301 0.78237398 0.90159408 0.82897071]]] ---------------------- [[[0.18074837 0.64652003 0.80527972 0.67800268] [0.38808013 0.31075033 0.53082474 0.32254431]] [[0.95766577 0.2498768 0.00304503 0.7058178 ] [0.6861262 0.02999367 0.70980993 0.09099878]] [[0.12523549 0.18796252 0.72463798 0.15352211] [0.14987301 0.78237398 0.90159408 0.82897071]]]ndarray数据类型转化 === astype12345678zeros_float_arr = np.zeros((3, 4), dtype=np.float64)print (zeros_float_arr)print (zeros_float_arr.dtype)# astype转换数据类型zeros_int_arr = zeros_float_arr.astype(np.int32)print (zeros_int_arr)print (zeros_int_arr.dtype) [[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]] float64 [[0 0 0 0] [0 0 0 0] [0 0 0 0]] int32文本文件的读取1234567# loadtxtfilename = './presidential_polls.csv'data_array = np.loadtxt(filename, # 文件名 delimiter=',', # 指定里面的元素分隔符 dtype=str, # 指定数据类型 usecols=(0,2,3)) # 指定读取的列索引号print (data_array, data_array.shape) [[&apos;cycle&apos; &apos;type&apos; &apos;matchup&apos;] [&apos;2016&apos; &apos;&quot;polls-plus&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;] [&apos;2016&apos; &apos;&quot;polls-plus&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;] ... [&apos;2016&apos; &apos;&quot;polls-only&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;] [&apos;2016&apos; &apos;&quot;polls-only&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;] [&apos;2016&apos; &apos;&quot;polls-only&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;]] (10237, 3)12345678910# loadtxt, 明确指定每列数据的类型filename = './presidential_polls.csv'data_array = np.loadtxt(filename, # 文件名 delimiter=',', # 分隔符 skiprows=1, dtype=&#123;'names':('cycle', 'type', 'matchup'), 'formats':('i4', 'S15', 'S50')&#125;, # 数据类型 usecols=(0,2,3)) # 指定读取的列索引号print (data_array, data_array.shape) # 读取的结果是一维的数组，每个元素是一个元组 [(2016, b&apos;&quot;polls-plus&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) (2016, b&apos;&quot;polls-plus&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) (2016, b&apos;&quot;polls-plus&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) ... (2016, b&apos;&quot;polls-only&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) (2016, b&apos;&quot;polls-only&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) (2016, b&apos;&quot;polls-only&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;)] (10236,)12 三、np的常用函数转置transpose1import numpy as np 123arr = np.random.rand(2,3)print (arr)print (arr.transpose()) [[0.78485041 0.88817969 0.34809014] [0.32744286 0.97539301 0.94401872]] [[0.78485041 0.32744286] [0.88817969 0.97539301] [0.34809014 0.94401872]]123456#高维数组的转换(图像里面会用得到转换维度)#不懂这里！！！arr3d = np.random.rand(2,3,4)print (arr3d)print ('----------------------')print (arr3d.transpose((1,0,2))) # 多维数组的转置和定义不会 [[[0.28492549 0.60197236 0.45582367 0.21992479] [0.1747163 0.69201365 0.85460359 0.65311699] [0.62189644 0.25217555 0.16347156 0.29831219]] [[0.42826733 0.81396165 0.187138 0.560564 ] [0.10162186 0.66419751 0.03261665 0.06969256] [0.55461652 0.55020586 0.50693591 0.31741807]]] ---------------------- [[[0.28492549 0.60197236 0.45582367 0.21992479] [0.42826733 0.81396165 0.187138 0.560564 ]] [[0.1747163 0.69201365 0.85460359 0.65311699] [0.10162186 0.66419751 0.03261665 0.06969256]] [[0.62189644 0.25217555 0.16347156 0.29831219] [0.55461652 0.55020586 0.50693591 0.31741807]]]ceil和floor和rint和isnan123456789101112arr = np.random.randn(2,3)print (arr)print (np.ceil(arr))#向上最接近的整数print (np.floor(arr))#向下最接近的整数print (np.rint(arr))#四舍五入print (np.isnan(arr))#判断元素是否为NaN#笔记上还有其他的函数 [[ 0.262106 -1.33680008 -1.08562543] [ 0.3990978 0.1410074 0.64278274]] [[ 1. -1. -1.] [ 1. 1. 1.]] [[ 0. -2. -2.] [ 0. 0. 0.]] [[ 0. -1. -1.] [ 0. 0. 1.]] [[False False False] [False False False]]where12345arr = np.random.randn(3,4)print (arr)np.where(arr &gt; 0, 1, -1)#（条件，满足输出，不满足输出） [[ 2.04688394 0.48063737 1.20876913 -0.93412937] [-0.43427472 -1.47755481 0.36882256 -0.08943138] [-0.2847686 0.96915893 0.32641235 0.28346922]] array([[ 1, 1, 1, -1], [-1, -1, 1, -1], [-1, 1, 1, 1]])sum123456arr = np.arange(10).reshape(5,2)print (arr)print (np.sum(arr))print (np.sum(arr, axis=0))print (np.sum(arr, axis=1)) [[0 1] [2 3] [4 5] [6 7] [8 9]] 45 [20 25] [ 1 5 9 13 17]all和any123456789101112import numpy as nparr = np.random.randn(2,3)print (arr)print (np.any(arr &gt; 0))#有一个就对print (np.all(arr &gt; 0))#全部对才对'''·用处就是判断一组数据当中，是否===有点类似布尔类型的·这个也可以应用在pandas中的DataFrame中''' [[-1.020184 -0.48466272 -0.8496271 ] [ 0.88815825 -0.81911857 0.64570539]] True False &apos;\\n·用处就是判断一组数据当中，是否===有点类似布尔类型的\\n·这个也可以应用在pandas中的DataFrame中\\n&apos;unique123arr = np.array([[1, 2, 1], [2, 3, 4]])print (arr)print (np.unique(arr)) [[1 2 1] [2 3 4]] [1 2 3 4]","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"numpy","slug":"numpy","permalink":"https://blog.wztlink1013.com/tags/numpy/"}]},{"title":"Data-清洗和规整","slug":"DataAnalysis/Data-清洗和规整","date":"2020-02-10T07:02:40.000Z","updated":"2020-07-12T13:05:14.174Z","comments":true,"path":"2020/02/10/DataAnalysis/Data-清洗和规整/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/10/DataAnalysis/Data-%E6%B8%85%E6%B4%97%E5%92%8C%E8%A7%84%E6%95%B4/","excerpt":"","text":"一、删除指定行列数据12import pandas as pdimport numpy as np 12345678dict_data = &#123;'A': 1., 'B': pd.Timestamp('20161217'), 'C': pd.Series(1, index=list(range(4)),dtype='float32'), 'D': np.array([3] * 4,dtype='int32'), 'E' : pd.Categorical([\"Python\",\"Java\",\"C++\",\"C#\"]), 'F' : 'ChinaHadoop' &#125;df_obj2 = pd.DataFrame(dict_data)print(df_obj2) A B C D E F 0 1.0 2016-12-17 1.0 3 Python ChinaHadoop 1 1.0 2016-12-17 1.0 3 Java ChinaHadoop 2 1.0 2016-12-17 1.0 3 C++ ChinaHadoop 3 1.0 2016-12-17 1.0 3 C# ChinaHadoopdel 删除列 12del df_obj2['A'] print (df_obj2.head()) B C D E F 0 2016-12-17 1.0 3 Python ChinaHadoop 1 2016-12-17 1.0 3 Java ChinaHadoop 2 2016-12-17 1.0 3 C++ ChinaHadoop 3 2016-12-17 1.0 3 C# ChinaHadoopdrop 删除行/列数据 12345678910dict_data = &#123;'A': 1., 'B': pd.Timestamp('20161217'), 'C': pd.Series(1, index=list(range(4)),dtype='float32'), 'D': np.array([3] * 4,dtype='int32'), 'E' : pd.Categorical([\"Python\",\"Java\",\"C++\",\"C#\"]), 'F' : 'ChinaHadoop' &#125;df_obj3 = pd.DataFrame(dict_data,index = ['sfd','sdfd','wer','rwer'])print (df_obj3.head(7))print(df_obj3.drop('wer'))#删除行print(df_obj3.drop('F',axis=1))#删除列 A B C D E F sfd 1.0 2016-12-17 NaN 3 Python ChinaHadoop sdfd 1.0 2016-12-17 NaN 3 Java ChinaHadoop wer 1.0 2016-12-17 NaN 3 C++ ChinaHadoop rwer 1.0 2016-12-17 NaN 3 C# ChinaHadoop A B C D E F sfd 1.0 2016-12-17 NaN 3 Python ChinaHadoop sdfd 1.0 2016-12-17 NaN 3 Java ChinaHadoop rwer 1.0 2016-12-17 NaN 3 C# ChinaHadoop A B C D E sfd 1.0 2016-12-17 NaN 3 Python sdfd 1.0 2016-12-17 NaN 3 Java wer 1.0 2016-12-17 NaN 3 C++ rwer 1.0 2016-12-17 NaN 3 C#二、处理缺失数据123df_data = pd.DataFrame([np.random.randn(3), [1., np.nan, np.nan], [4., np.nan, np.nan], [1., np.nan, 2.]])df_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 -0.702713 -0.991383 -1.058464 1 1.000000 NaN NaN 2 4.000000 NaN NaN 3 1.000000 NaN 2.000000 判断是否存在缺失值1df_data.isnull() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 False False False 1 False True True 2 False True True 3 False True False 丢弃缺失数据12print(df_data.dropna(axis=0))#0是行；1是列 0 1 2 0 -0.702713 -0.991383 -1.058464填充缺失数据1df_data.fillna(-100.) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 -0.702713 -0.991383 -1.058464 1 1.000000 -100.000000 -100.000000 2 4.000000 -100.000000 -100.000000 3 1.000000 -100.000000 2.000000 三、数据规整-连接-含索引 数据连接 merge 12import pandas as pdimport numpy as np 1234567df_obj1 = pd.DataFrame(&#123;'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1' : ['sfd','fdsf','we',24,3253,234,23]&#125;)df_obj2 = pd.DataFrame(&#123;'key': ['a', 'b', 'd'], 'data2' : np.random.randint(0,10,3)&#125;)print (df_obj1)print (df_obj2) key data1 0 b sfd 1 b fdsf 2 a we 3 c 24 4 a 3253 5 a 234 6 b 23 key data2 0 a 0 1 b 6 2 d 6merge和on 默认将重叠列的列名作为“外键”进行连接 1pd.merge(df_obj1, df_obj2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key data1 data2 0 b sfd 6 1 b fdsf 6 2 b 23 6 3 a we 0 4 a 3253 0 5 a 234 0 12# on显示指定“外键”pd.merge(df_obj1, df_obj2, on='key') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key data1 data2 0 b sfd 6 1 b fdsf 6 2 b 23 6 3 a we 0 4 a 3253 0 5 a 234 0 left-on和right-on12345# left_on，right_on分别指定左侧数据和右侧数据的“外键”# 更改列名df_obj1 = df_obj1.rename(columns=&#123;'key':'key1'&#125;)df_obj2 = df_obj2.rename(columns=&#123;'key':'key2'&#125;) 12print(df_obj1)print(df_obj2) key1 data1 0 b sfd 1 b fdsf 2 a we 3 c 24 4 a 3253 5 a 234 6 b 23 key2 data2 0 a 0 1 b 6 2 d 61pd.merge(df_obj1, df_obj2, left_on='key1', right_on='key2') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 data1 key2 data2 0 b sfd b 6 1 b fdsf b 6 2 b 23 b 6 3 a we a 0 4 a 3253 a 0 5 a 234 a 0 how12# “外连接”pd.merge(df_obj1, df_obj2, left_on='key1', right_on='key2', how='outer') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 data1 key2 data2 0 b sfd b 6.0 1 b fdsf b 6.0 2 b 23 b 6.0 3 a we a 0.0 4 a 3253 a 0.0 5 a 234 a 0.0 6 c 24 NaN NaN 7 NaN NaN d 6.0 12# 左连接pd.merge(df_obj1, df_obj2, left_on='key1', right_on='key2', how='left') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 data1 key2 data2 0 b sfd b 6.0 1 b fdsf b 6.0 2 a we a 0.0 3 c 24 NaN NaN 4 a 3253 a 0.0 5 a 234 a 0.0 6 b 23 b 6.0 12# 右连接pd.merge(df_obj1, df_obj2, left_on='key1', right_on='key2', how='right') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key1 data1 key2 data2 0 b sfd b 6 1 b fdsf b 6 2 b 23 b 6 3 a we a 0 4 a 3253 a 0 5 a 234 a 0 6 NaN NaN d 6 处理重复列名suffixes1234567# 处理重复列名df_obj1 = pd.DataFrame(&#123;'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data' : np.random.randint(0,10,7)&#125;)df_obj2 = pd.DataFrame(&#123;'key': ['a', 'b', 'd'], 'data' : np.random.randint(0,10,3)&#125;)pd.merge(df_obj1, df_obj2, on='key', suffixes=('_left', '_right')) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key data_left data_right 0 b 9 1 1 b 1 1 2 b 6 1 3 a 7 1 4 a 3 1 5 a 4 1 1234# 按索引连接df_obj3 = pd.DataFrame(&#123;'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1' : np.random.randint(0,10,7)&#125;)df_obj4 = pd.DataFrame(&#123;'data2' : np.random.randint(0,10,3)&#125;, index=['a', 'b', 'd']) 12print(df_obj3)print(df_obj4) key data1 0 b 7 1 b 4 2 a 1 3 c 9 4 a 2 5 a 9 6 b 7 data2 a 9 b 4 d 01pd.merge(df_obj3, df_obj4, left_on='key', right_index=True) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key data1 data2 0 b 7 4 1 b 4 4 6 b 7 4 2 a 1 9 4 a 2 9 5 a 9 9 按索引连接right_index1234# 按索引连接df_obj1 = pd.DataFrame(&#123;'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1' : np.random.randint(0,10,7)&#125;)df_obj2 = pd.DataFrame(&#123;'data2' : np.random.randint(0,10,3)&#125;, index=['a', 'b', 'd']) 12print(df_obj1)print(df_obj2) key data1 0 b 0 1 b 2 2 a 7 3 c 3 4 a 1 5 a 1 6 b 6 data2 a 2 b 1 d 11pd.merge(df_obj1, df_obj2, left_on='key', right_index=True) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key data1 data2 0 b 0 1 1 b 2 1 6 b 6 1 2 a 7 2 4 a 1 2 5 a 1 2 四、数据合并 数据合并 concat 按索引连接===right_index 12import numpy as npimport pandas as pd numpy的concat12345arr1 = np.random.randint(0, 10, (3, 4))arr2 = np.random.randint(0, 10, (3, 4))print (arr1)print (arr2) [[6 0 3 2] [5 7 9 8] [5 8 0 3]] [[6 5 7 9] [0 1 0 0] [1 1 1 7]]1np.concatenate([arr1, arr2]) array([[6, 0, 3, 2], [5, 7, 9, 8], [5, 8, 0, 3], [6, 5, 7, 9], [0, 1, 0, 0], [1, 1, 1, 7]])1np.concatenate([arr1, arr2], axis=1) array([[6, 0, 3, 2, 6, 5, 7, 9], [5, 7, 9, 8, 0, 1, 0, 0], [5, 8, 0, 3, 1, 1, 1, 7]])series上的concat1234# index 没有重复的情况ser_obj1 = pd.Series(np.random.randint(0, 10, 5), index=range(0,5))ser_obj2 = pd.Series(np.random.randint(0, 10, 4), index=range(5,9))ser_obj3 = pd.Series(np.random.randint(0, 10, 3), index=range(9,12)) 1pd.concat([ser_obj1, ser_obj2, ser_obj3]) 0 0 1 4 2 5 3 1 4 9 5 7 6 8 7 5 8 0 9 5 10 9 11 0 dtype: int321pd.concat([ser_obj1, ser_obj2, ser_obj3], axis=1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 0.0 NaN NaN 1 4.0 NaN NaN 2 5.0 NaN NaN 3 1.0 NaN NaN 4 9.0 NaN NaN 5 NaN 7.0 NaN 6 NaN 8.0 NaN 7 NaN 5.0 NaN 8 NaN 0.0 NaN 9 NaN NaN 5.0 10 NaN NaN 9.0 11 NaN NaN 0.0 12345678# index 有重复的情况ser_obj1 = pd.Series(np.random.randint(0, 10, 5), index=range(5))ser_obj2 = pd.Series(np.random.randint(0, 10, 4), index=range(4))ser_obj3 = pd.Series(np.random.randint(0, 10, 3), index=range(3))print (ser_obj1)print (ser_obj2)print (ser_obj3) 0 5 1 3 2 0 3 8 4 3 dtype: int32 0 5 1 3 2 2 3 1 dtype: int32 0 5 1 8 2 6 dtype: int321pd.concat([ser_obj1, ser_obj2, ser_obj3]) 0 5 1 3 2 0 3 8 4 3 0 5 1 3 2 2 3 1 0 5 1 8 2 6 dtype: int321pd.concat([ser_obj1, ser_obj2, ser_obj3], axis=1, join='inner') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 5 5 5 1 3 3 8 2 0 2 6 dataframe上的concat123456df_obj1 = pd.DataFrame(np.random.randint(0, 10, (3, 2)), index=['a', 'b', 'c'], columns=['A', 'B'])df_obj2 = pd.DataFrame(np.random.randint(0, 10, (2, 2)), index=['a', 'b'], columns=['C', 'D'])print (df_obj1)print (df_obj2) A B a 4 3 b 8 1 c 6 3 C D a 1 3 b 8 21pd.concat([df_obj1, df_obj2]) C:\\Users\\wztli\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version of pandas will change to not sort by default. To accept the future behavior, pass &apos;sort=False&apos;. To retain the current behavior and silence the warning, pass &apos;sort=True&apos;. &quot;&quot;&quot;Entry point for launching an IPython kernel. .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D a 4.0 3.0 NaN NaN b 8.0 1.0 NaN NaN c 6.0 3.0 NaN NaN a NaN NaN 1.0 3.0 b NaN NaN 8.0 2.0 1pd.concat([df_obj1, df_obj2], axis=1) C:\\Users\\wztli\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version of pandas will change to not sort by default. To accept the future behavior, pass &apos;sort=False&apos;. To retain the current behavior and silence the warning, pass &apos;sort=True&apos;. &quot;&quot;&quot;Entry point for launching an IPython kernel. .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D a 4 3 1.0 3.0 b 8 1 8.0 2.0 c 6 3 NaN NaN 五、数据重构12import numpy as npimport pandas as pd stack12df_obj = pd.DataFrame(np.random.randint(0,10, (5,2)), columns=['data1', 'data2'])df_obj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data1 data2 0 0 4 1 6 2 2 9 8 3 7 0 4 3 1 12stacked = df_obj.stack()print (stacked) 0 data1 0 data2 4 1 data1 6 data2 2 2 data1 9 data2 8 3 data1 7 data2 0 4 data1 3 data2 1 dtype: int3212print (type(stacked))print (type(stacked.index)) &lt;class &apos;pandas.core.series.Series&apos;&gt; &lt;class &apos;pandas.core.indexes.multi.MultiIndex&apos;&gt;unstack12# 默认操作内层索引stacked.unstack() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data1 data2 0 0 4 1 6 2 2 9 8 3 7 0 4 3 1 12# 通过level指定操作索引的级别stacked.unstack(level=0) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 data1 0 6 9 7 3 data2 4 2 8 0 1 六、数据转换12import numpy as npimport pandas as pd 重复数据duplicates函数123df_obj = pd.DataFrame(&#123;'data1' : ['a'] * 4 + ['b'] * 4, 'data2' : np.random.randint(0, 4, 8)&#125;)df_obj .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data1 data2 0 a 3 1 a 2 2 a 2 3 a 1 4 b 0 5 b 2 6 b 2 7 b 1 1df_obj.duplicated() 0 False 1 False 2 True 3 False 4 False 5 False 6 True 7 False dtype: bool1df_obj.drop_duplicates() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data1 data2 0 a 3 1 a 2 3 a 1 4 b 0 5 b 2 7 b 1 1df_obj.drop_duplicates('data2') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data1 data2 0 a 3 1 a 2 3 a 1 4 b 0 map函数12ser_obj = pd.Series(np.random.randint(0,10,10))ser_obj 0 1 1 9 2 1 3 2 4 7 5 2 6 4 7 5 8 4 9 6 dtype: int321ser_obj.map(lambda x : x ** 2) 0 1 1 81 2 1 3 4 4 49 5 4 6 16 7 25 8 16 9 36 dtype: int64数据替换repalce12# 替换单个值ser_obj.replace(0, -100) 0 1 1 9 2 1 3 2 4 7 5 2 6 4 7 5 8 4 9 6 dtype: int3212# 替换多个值ser_obj.replace([0, 2], -100) 0 1 1 9 2 1 3 -100 4 7 5 -100 6 4 7 5 8 4 9 6 dtype: int3212# 替换多个值ser_obj.replace([0, 2], [-100, -200]) 0 1 1 9 2 1 3 -200 4 7 5 -200 6 4 7 5 8 4 9 6 dtype: int64123456789101112ser_obj.map(lambda x : x ** 2)#### 3. 数据替换repalce# 替换单个值ser_obj.replace(0, -100)# 替换多个值ser_obj.replace([0, 2], -100)# 替换多个值ser_obj.replace([0, 2], [-100, -200]) 0 1 1 9 2 1 3 -200 4 7 5 -200 6 4 7 5 8 4 9 6 dtype: int64","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/tags/DataAnalysis/"}]},{"title":"Data-描述数据","slug":"DataAnalysis/Data-描述数据","date":"2020-02-10T06:55:49.000Z","updated":"2020-07-12T13:04:42.537Z","comments":true,"path":"2020/02/10/DataAnalysis/Data-描述数据/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/10/DataAnalysis/Data-%E6%8F%8F%E8%BF%B0%E6%95%B0%E6%8D%AE/","excerpt":"","text":"一、数据预览：tail（）；head（）12345import numpy as npimport pandas as pddf_obj = pd.DataFrame(np.random.randn(5,4), columns = ['a', 'b', 'c', 'd'])print(df_obj.tail())# 数据预览尾巴print(df_obj.head())# 数据预览头部 a b c d 0 -0.507788 0.213237 0.003150 -0.777312 1 -0.896653 -2.188016 -0.114848 0.167057 2 -1.131242 -0.142287 -1.027330 1.861814 3 0.369608 0.823453 1.030830 -0.041778 4 -0.647625 0.056791 -0.394078 -1.347718 a b c d 0 -0.507788 0.213237 0.003150 -0.777312 1 -0.896653 -2.188016 -0.114848 0.167057 2 -1.131242 -0.142287 -1.027330 1.861814 3 0.369608 0.823453 1.030830 -0.041778 4 -0.647625 0.056791 -0.394078 -1.347718二、数据描述：shape；info()1print ('数据集有%i行，%i列' %(df_obj.shape[0], df_obj.shape[1])) 数据集有5行，4列1print(df_obj.info()) &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; RangeIndex: 5 entries, 0 to 4 Data columns (total 4 columns): a 5 non-null float64 b 5 non-null float64 c 5 non-null float64 d 5 non-null float64 dtypes: float64(4) memory usage: 288.0 bytes None三、数据统计：describe()1print(df_obj.describe()) a b c d count 5.000000 5.000000 5.000000 5.000000 mean -0.562740 -0.247365 -0.100455 -0.027587 std 0.573191 1.143294 0.747673 1.215808 min -1.131242 -2.188016 -1.027330 -1.347718 25% -0.896653 -0.142287 -0.394078 -0.777312 50% -0.647625 0.056791 -0.114848 -0.041778 75% -0.507788 0.213237 0.003150 0.167057 max 0.369608 0.823453 1.030830 1.861814四、pandas不完全显示行列1234pd.set_option(&#39;display.max_rows&#39;, 100) &#x2F;&#x2F;显示的最大行数（避免只显示部分行数据）pd.set_option(&#39;display.max_columns&#39;, 1000) &#x2F;&#x2F;显示的最大列数（避免列显示不全）pd.set_option(&quot;display.max_colwidth&quot;, 1000) &#x2F;&#x2F;每一列最大的宽度（避免属性值或列名显示不全）pd.set_option(&#39;display.width&#39;, 1000) &#x2F;&#x2F;每一行的宽度（避免换行）","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/tags/DataAnalysis/"}]},{"title":"Data-读取本地数据","slug":"DataAnalysis/Data-本地读取","date":"2020-02-10T06:46:19.000Z","updated":"2020-07-12T13:00:31.531Z","comments":true,"path":"2020/02/10/DataAnalysis/Data-本地读取/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/10/DataAnalysis/Data-%E6%9C%AC%E5%9C%B0%E8%AF%BB%E5%8F%96/","excerpt":"","text":"一、TXT文件操作读取全部内容12import numpy as npimport pandas as pd 123456789101112txt_filename = './files/python_wiki.txt'# 打开文件file_obj = open(txt_filename,'r')# 读取整个文件内容all_content = file_obj.read()# 关闭文件file_obj.close()print (all_content) Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[24][25] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[26][27] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28] Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.[29] Python interpreters are available for many operating systems, allowing Python code to run on a wide variety of systems. CPython, the reference implementation of Python, is open source software[30] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation.逐行读取12345678txt_filename = './files/python_wiki.txt'# 打开文件file_obj = open(txt_filename, 'r')# 逐行读取line1 = file_obj.readline()print (line1) Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[24][25] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[26][27] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28]123456# 继续读下一行【不会全部读完】line2 = file_obj.readline()print (line2)# 关闭文件file_obj.close() Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.[29]读取全部内容，返回列表123456789101112txt_filename = './files/python_wiki.txt'# 打开文件file_obj = open(txt_filename, 'r')lines = file_obj.readlines()for i, line in enumerate(lines): print ('%i: %s' %(i, line))# 关闭文件file_obj.close() 0: Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[24][25] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[26][27] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28] 1: Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.[29] 2: Python interpreters are available for many operating systems, allowing Python code to run on a wide variety of systems. CPython, the reference implementation of Python, is open source software[30] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation.写操作12345678txt_filename = './files/test_write.txt'# 打开文件file_obj = open(txt_filename, 'w')# 写入全部内容file_obj.write(\"《Python数据分析》\")file_obj.close() 123456789txt_filename = './files/test_write.txt'# 打开文件file_obj = open(txt_filename, 'w')# 写入字符串列表lines = ['这是第%i行\\n' %n for n in range(10)]file_obj.writelines(lines)file_obj.close() with语句123txt_filename = './files/test_write.txt'with open(txt_filename, 'r') as f_obj: print (f_obj.read()) 这是第0行 这是第1行 这是第2行 这是第3行 这是第4行 这是第5行 这是第6行 这是第7行 这是第8行 这是第9行二、CSV文件操作pandas读csv文件 根据路径导入数据以及指定的列 12345import pandas as pdfilename = './files/presidential_polls.csv'df = pd.read_csv(filename, usecols=['cycle', 'type', 'startdate'])#导入指定列print (type(df))print (df.head()) &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cycle type startdate 0 2016 polls-plus 10/25/2016 1 2016 polls-plus 10/27/2016 2 2016 polls-plus 10/27/2016 3 2016 polls-plus 10/20/2016 4 2016 polls-plus 10/20/2016 引用指定的列 123cycle_se = df['cycle']print (type(cycle_se))print (cycle_se.head()) &lt;class &apos;pandas.core.series.Series&apos;&gt; 0 2016 1 2016 2 2016 3 2016 4 2016 Name: cycle, dtype: int64 多层索引成dataframe类型 123filename = './files/presidential_polls.csv'df1 = pd.read_csv(filename,usecols=['cycle', 'type', 'startdate','state','grade'],index_col = ['state','grade'])print(df1.head()) cycle type startdate state grade U.S. B 2016 polls-plus 10/25/2016 A+ 2016 polls-plus 10/27/2016 Virginia A+ 2016 polls-plus 10/27/2016 Florida A 2016 polls-plus 10/20/2016 U.S. B+ 2016 polls-plus 10/20/2016 跳过指定的行 123filename = './files/presidential_polls.csv'df2 = pd.read_csv(filename,usecols=['cycle', 'type', 'startdate','state','grade'],skiprows=[1, 2, 3])print(df2.head()) cycle type state startdate grade 0 2016 polls-plus Florida 10/20/2016 A 1 2016 polls-plus U.S. 10/20/2016 B+ 2 2016 polls-plus U.S. 10/22/2016 A 3 2016 polls-plus U.S. 10/26/2016 A- 4 2016 polls-plus Pennsylvania 10/25/2016 B-pandas写csv文件 ·to_csv里面的index参数作用？===可能是不要索引的意思。 12filename = './files/pandas_output.csv'df.to_csv(filename, index=None) 三、JSON文件操作json读操作12345678import jsonfilename = './files/global_temperature.json'with open(filename, 'r') as f_obj: json_data = json.load(f_obj)# 返回值是dict类型print (type(json_data)) &lt;class &apos;dict&apos;&gt;1print (json_data.keys()) dict_keys([&apos;description&apos;, &apos;data&apos;])json转CSV12#print json_data['data'].keys()print (json_data['data'].values()) dict_values([&apos;-0.1247&apos;, &apos;-0.0707&apos;, &apos;-0.0710&apos;, &apos;-0.1481&apos;, &apos;-0.2099&apos;, &apos;-0.2220&apos;, &apos;-0.2101&apos;, &apos;-0.2559&apos;, &apos;-0.1541&apos;, &apos;-0.1032&apos;, &apos;-0.3233&apos;, &apos;-0.2552&apos;, &apos;-0.3079&apos;, &apos;-0.3221&apos;, &apos;-0.2828&apos;, &apos;-0.2279&apos;, &apos;-0.0971&apos;, &apos;-0.1232&apos;, &apos;-0.2578&apos;, &apos;-0.1172&apos;, &apos;-0.0704&apos;, &apos;-0.1471&apos;, &apos;-0.2535&apos;, &apos;-0.3442&apos;, &apos;-0.4240&apos;, &apos;-0.2967&apos;, &apos;-0.2208&apos;, &apos;-0.3767&apos;, &apos;-0.4441&apos;, &apos;-0.4332&apos;, &apos;-0.3862&apos;, &apos;-0.4367&apos;, &apos;-0.3318&apos;, &apos;-0.3205&apos;, &apos;-0.1444&apos;, &apos;-0.0747&apos;, &apos;-0.2979&apos;, &apos;-0.3193&apos;, &apos;-0.2118&apos;, &apos;-0.2082&apos;, &apos;-0.2152&apos;, &apos;-0.1517&apos;, &apos;-0.2318&apos;, &apos;-0.2161&apos;, &apos;-0.2510&apos;, &apos;-0.1464&apos;, &apos;-0.0618&apos;, &apos;-0.1506&apos;, &apos;-0.1749&apos;, &apos;-0.2982&apos;, &apos;-0.1016&apos;, &apos;-0.0714&apos;, &apos;-0.1214&apos;, &apos;-0.2481&apos;, &apos;-0.1075&apos;, &apos;-0.1445&apos;, &apos;-0.1173&apos;, &apos;-0.0204&apos;, &apos;-0.0318&apos;, &apos;-0.0157&apos;, &apos;0.0927&apos;, &apos;0.1974&apos;, &apos;0.1549&apos;, &apos;0.1598&apos;, &apos;0.2948&apos;, &apos;0.1754&apos;, &apos;-0.0013&apos;, &apos;-0.0455&apos;, &apos;-0.0471&apos;, &apos;-0.0550&apos;, &apos;-0.1579&apos;, &apos;-0.0095&apos;, &apos;0.0288&apos;, &apos;0.0997&apos;, &apos;-0.1118&apos;, &apos;-0.1305&apos;, &apos;-0.1945&apos;, &apos;0.0538&apos;, &apos;0.1145&apos;, &apos;0.0640&apos;, &apos;0.0252&apos;, &apos;0.0818&apos;, &apos;0.0924&apos;, &apos;0.1100&apos;, &apos;-0.1461&apos;, &apos;-0.0752&apos;, &apos;-0.0204&apos;, &apos;-0.0112&apos;, &apos;-0.0282&apos;, &apos;0.0937&apos;, &apos;0.0383&apos;, &apos;-0.0775&apos;, &apos;0.0280&apos;, &apos;0.1654&apos;, &apos;-0.0698&apos;, &apos;0.0060&apos;, &apos;-0.0769&apos;, &apos;0.1996&apos;, &apos;0.1139&apos;, &apos;0.2288&apos;, &apos;0.2651&apos;, &apos;0.3024&apos;, &apos;0.1836&apos;, &apos;0.3429&apos;, &apos;0.1510&apos;, &apos;0.1357&apos;, &apos;0.2308&apos;, &apos;0.3710&apos;, &apos;0.3770&apos;, &apos;0.2982&apos;, &apos;0.4350&apos;, &apos;0.4079&apos;, &apos;0.2583&apos;, &apos;0.2857&apos;, &apos;0.3420&apos;, &apos;0.4593&apos;, &apos;0.3225&apos;, &apos;0.5185&apos;, &apos;0.6335&apos;, &apos;0.4427&apos;, &apos;0.4255&apos;, &apos;0.5455&apos;, &apos;0.6018&apos;, &apos;0.6145&apos;, &apos;0.5806&apos;, &apos;0.6583&apos;, &apos;0.6139&apos;, &apos;0.6113&apos;, &apos;0.5415&apos;, &apos;0.6354&apos;, &apos;0.7008&apos;, &apos;0.5759&apos;, &apos;0.6219&apos;, &apos;0.6687&apos;, &apos;0.7402&apos;, &apos;0.8990&apos;])1234# 转换keyyear_str_lst = json_data['data'].keys()year_lst = [int(year_str) for year_str in year_str_lst]print (year_lst) [1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]1234# 转换valuetemp_str_lst = json_data['data'].values()temp_lst = [float(temp_str) for temp_str in temp_str_lst]print (temp_lst) [-0.1247, -0.0707, -0.071, -0.1481, -0.2099, -0.222, -0.2101, -0.2559, -0.1541, -0.1032, -0.3233, -0.2552, -0.3079, -0.3221, -0.2828, -0.2279, -0.0971, -0.1232, -0.2578, -0.1172, -0.0704, -0.1471, -0.2535, -0.3442, -0.424, -0.2967, -0.2208, -0.3767, -0.4441, -0.4332, -0.3862, -0.4367, -0.3318, -0.3205, -0.1444, -0.0747, -0.2979, -0.3193, -0.2118, -0.2082, -0.2152, -0.1517, -0.2318, -0.2161, -0.251, -0.1464, -0.0618, -0.1506, -0.1749, -0.2982, -0.1016, -0.0714, -0.1214, -0.2481, -0.1075, -0.1445, -0.1173, -0.0204, -0.0318, -0.0157, 0.0927, 0.1974, 0.1549, 0.1598, 0.2948, 0.1754, -0.0013, -0.0455, -0.0471, -0.055, -0.1579, -0.0095, 0.0288, 0.0997, -0.1118, -0.1305, -0.1945, 0.0538, 0.1145, 0.064, 0.0252, 0.0818, 0.0924, 0.11, -0.1461, -0.0752, -0.0204, -0.0112, -0.0282, 0.0937, 0.0383, -0.0775, 0.028, 0.1654, -0.0698, 0.006, -0.0769, 0.1996, 0.1139, 0.2288, 0.2651, 0.3024, 0.1836, 0.3429, 0.151, 0.1357, 0.2308, 0.371, 0.377, 0.2982, 0.435, 0.4079, 0.2583, 0.2857, 0.342, 0.4593, 0.3225, 0.5185, 0.6335, 0.4427, 0.4255, 0.5455, 0.6018, 0.6145, 0.5806, 0.6583, 0.6139, 0.6113, 0.5415, 0.6354, 0.7008, 0.5759, 0.6219, 0.6687, 0.7402, 0.899]12345678910import pandas as pd# 构建 dataframeyear_se = pd.Series(year_lst, name = 'year')temp_se = pd.Series(temp_lst, name = 'temperature')result_df = pd.concat([year_se, temp_se], axis = 1)print (result_df.head())# 保存csvresult_df.to_csv('./files/json_to_csv.csv', index = None) year temperature 0 1880 -0.1247 1 1881 -0.0707 2 1882 -0.0710 3 1883 -0.1481 4 1884 -0.2099写json操作123456book_dict = [&#123;'书名':'无声告白', '作者':'伍绮诗'&#125;, &#123;'书名':'我不是潘金莲', '作者':'刘震云'&#125;, &#123;'书名':'沉默的大多数 (王小波集)', '作者':'王小波'&#125;]filename = './files/json_output.json'with open(filename, 'w') as f_obj: f_obj.write(json.dumps(book_dict, ensure_ascii=False))# 不需要加, encoding='utf-8'参数 四、SQLite基本操作连接数据库1234567import sqlite3db_path = './files/test.sqlite'conn = sqlite3.connect(db_path)cur = conn.cursor()conn.text_factory = str # 处理中文 获取基本信息123cur.execute('SELECT SQLITE_VERSION()')print ('SQLite版本：%s' %str(cur.fetchone()[0])) SQLite版本：3.30.0逐条插入数据12345678910cur.execute(\"DROP TABLE IF EXISTS book\")cur.execute(\"CREATE TABLE book(id INT, name TEXT, price DOUBLE)\")cur.execute(\"INSERT INTO book VALUES(1,'肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷',14.40)\")cur.execute(\"INSERT INTO book VALUES(2,'法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册) (两种封面随机发货)',100.00)\")cur.execute(\"INSERT INTO book VALUES(3,'活着本来单纯:丰子恺散文漫画精品集(收藏本)',30.90)\")cur.execute(\"INSERT INTO book VALUES(4,'自在独行:贾平凹的独行世界',26.80)\")cur.execute(\"INSERT INTO book VALUES(5,'当你的才华还撑不起你的梦想时',23.00)\")cur.execute(\"INSERT INTO book VALUES(6,'巨人的陨落(套装共3册)',84.90)\")cur.execute(\"INSERT INTO book VALUES(7,'孤独深处(收录雨果奖获奖作品《北京折叠》)',21.90)\")cur.execute(\"INSERT INTO book VALUES(8,'世界知名企业员工指定培训教材:所谓情商高,就是会说话',22.00)\") &lt;sqlite3.Cursor at 0x2d2d64e7c00&gt;批量插入数据1234567books = ( (9, '人间草木', 30.00), (10,'你的善良必须有点锋芒', 20.50), (11, '这么慢,那么美', 24.80), (12, '考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版)', 23.90))cur.executemany(\"INSERT INTO book VALUES(?, ?, ?)\", books) &lt;sqlite3.Cursor at 0x2d2d64e7c00&gt;1conn.commit() 查找数据123456cur.execute('SELECT * FROM book')rows = cur.fetchall()# 通过索引号访问for row in rows: print ('序号: %i, 书名: %s, 价格: %.2f' %(row[0], row[1], row[2])) 序号: 1, 书名: 肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷, 价格: 14.40 序号: 2, 书名: 法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册) (两种封面随机发货), 价格: 100.00 序号: 3, 书名: 活着本来单纯:丰子恺散文漫画精品集(收藏本), 价格: 30.90 序号: 4, 书名: 自在独行:贾平凹的独行世界, 价格: 26.80 序号: 5, 书名: 当你的才华还撑不起你的梦想时, 价格: 23.00 序号: 6, 书名: 巨人的陨落(套装共3册), 价格: 84.90 序号: 7, 书名: 孤独深处(收录雨果奖获奖作品《北京折叠》), 价格: 21.90 序号: 8, 书名: 世界知名企业员工指定培训教材:所谓情商高,就是会说话, 价格: 22.00 序号: 9, 书名: 人间草木, 价格: 30.00 序号: 10, 书名: 你的善良必须有点锋芒, 价格: 20.50 序号: 11, 书名: 这么慢,那么美, 价格: 24.80 序号: 12, 书名: 考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版), 价格: 23.9012345678conn.row_factory = sqlite3.Rowcur = conn.cursor() cur.execute('SELECT * FROM book')rows = cur.fetchall()# 通过列名访问for row in rows: print ('序号: %i, 书名: %s, 价格: %.2f' %(row['id'], row['name'], row['price'])) 序号: 1, 书名: 肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷, 价格: 14.40 序号: 2, 书名: 法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册) (两种封面随机发货), 价格: 100.00 序号: 3, 书名: 活着本来单纯:丰子恺散文漫画精品集(收藏本), 价格: 30.90 序号: 4, 书名: 自在独行:贾平凹的独行世界, 价格: 26.80 序号: 5, 书名: 当你的才华还撑不起你的梦想时, 价格: 23.00 序号: 6, 书名: 巨人的陨落(套装共3册), 价格: 84.90 序号: 7, 书名: 孤独深处(收录雨果奖获奖作品《北京折叠》), 价格: 21.90 序号: 8, 书名: 世界知名企业员工指定培训教材:所谓情商高,就是会说话, 价格: 22.00 序号: 9, 书名: 人间草木, 价格: 30.00 序号: 10, 书名: 你的善良必须有点锋芒, 价格: 20.50 序号: 11, 书名: 这么慢,那么美, 价格: 24.80 序号: 12, 书名: 考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版), 价格: 23.901conn.close() 五、SQLite_json操作123456import sqlite3db_path = './files/test_join.sqlite'conn = sqlite3.connect(db_path)cur = conn.cursor() 123456789101112# 建 depaetment 表，并插入数据cur.execute(\"DROP TABLE IF EXISTS department\")cur.execute(\"CREATE TABLE department(\\ id INT PRIMARY KEY NOT NULL, \\ dept CHAR(50) NOT NULL, \\ emp_id INT NOT NULL)\")depts = ( (1, 'IT Builing', 1), (2, 'Engineerin', 2), (3, 'Finance', 7))cur.executemany(\"INSERT INTO department VALUES(?, ?, ?)\", depts) &lt;sqlite3.Cursor at 0x2d2d64f70a0&gt;1conn.commit() CROSS JOIN 交叉连接1234cur.execute(\"SELECT emp_id, name, dept FROM company CROSS JOIN department;\")rows = cur.fetchall()for row in rows: print (row) 123456789101112131415161718# 建 company 表，并插入数据cur.execute(\"DROP TABLE IF EXISTS company\")cur.execute(\"CREATE TABLE company(\\ id INT PRIMARY KEY NOT NULL, \\ name CHAR(50) NOT NULL, \\ age INT NOT NULL, \\ address CHAR(50) NOT NULL,\\ salary DOUBLE NOT NULL)\")companies = ( (1, 'Paul', 32, 'California', 20000.0), (2, 'Allen', 25, 'Texas', 15000.0), (3, 'Teddy', 23, 'Norway', 20000.0), (4, 'Mark', 25, 'Rich-Mond', 65000.0), (5, 'David', 27, 'Texas', 85000.0), (6, 'Kim', 22, 'South-Hall', 45000.0), (7, 'James', 24, 'Houston', 10000.0))cur.executemany(\"INSERT INTO company VALUES (?, ?, ?, ?, ?)\", companies) &lt;sqlite3.Cursor at 0x2d2d64f70a0&gt;INNER JOIN 内连接12345cur.execute(\"SELECT emp_id, name, dept FROM company INNER JOIN department \\ ON company.id = department.emp_id;\")rows = cur.fetchall()for row in rows: print (row) (1, &apos;Paul&apos;, &apos;IT Builing&apos;) (2, &apos;Allen&apos;, &apos;Engineerin&apos;) (7, &apos;James&apos;, &apos;Finance&apos;)OUTER JOIN 外连接123456# 左连接cur.execute(\"SELECT emp_id, name, dept FROM company LEFT OUTER JOIN department \\ ON company.id = department.emp_id;\")rows = cur.fetchall()for row in rows: print (row) (1, &apos;Paul&apos;, &apos;IT Builing&apos;) (2, &apos;Allen&apos;, &apos;Engineerin&apos;) (None, &apos;Teddy&apos;, None) (None, &apos;Mark&apos;, None) (None, &apos;David&apos;, None) (None, &apos;Kim&apos;, None) (7, &apos;James&apos;, &apos;Finance&apos;)123456# 右连接 （目前不支持）cur.execute(\"SELECT emp_id, name, dept FROM company RIGHT OUTER JOIN department \\ ON company.id = department.emp_id;\")rows = cur.fetchall()for row in rows: print (row) --------------------------------------------------------------------------- OperationalError Traceback (most recent call last) &lt;ipython-input-41-ce0fc573748b&gt; in &lt;module&gt; 1 # 右连接 （目前不支持） 2 cur.execute(&quot;SELECT emp_id, name, dept FROM company RIGHT OUTER JOIN department \\ ----&gt; 3 ON company.id = department.emp_id;&quot;) 4 rows = cur.fetchall() 5 for row in rows: OperationalError: RIGHT and FULL OUTER JOINs are not currently supported123456# 右连接，交换两张表cur.execute(\"SELECT emp_id, name, dept FROM department LEFT OUTER JOIN company \\ ON company.id = department.emp_id;\")rows = cur.fetchall()for row in rows: print (row) (1, &apos;Paul&apos;, &apos;IT Builing&apos;) (2, &apos;Allen&apos;, &apos;Engineerin&apos;) (7, &apos;James&apos;, &apos;Finance&apos;)12sqlite&gt; SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID; File &quot;&lt;ipython-input-43-a0833b733075&gt;&quot;, line 1 sqlite&gt; SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT ^ SyntaxError: invalid syntax六、Excel文件操作pandas.read_excel(io, sheet_name=0, header=0, names=None, index_col=None, usecols=None, squeeze=False, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, comment=None, skipfooter=0, convert_float=True, mangle_dupe_cols=True, **kwds) df_fujian = pd.read_excel(“./datafiles/fujian.xlsx”,sheet_name=’日数据’)","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/tags/DataAnalysis/"}]},{"title":"Spider-爬虫python","slug":"Spider/Spider-爬虫python","date":"2020-02-08T07:52:58.000Z","updated":"2020-07-12T13:19:09.664Z","comments":true,"path":"2020/02/08/Spider/Spider-爬虫python/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/08/Spider/Spider-%E7%88%AC%E8%99%ABpython/","excerpt":"","text":"爬虫基本架构url管理模块 就是管理自己爬取的的网页不要重复爬取，避免爬取进入死循环 使用python当中的set数据结构 网页下载模块 将对应的url模块下载到本地或者读入内存 实现方式： 通过url下载12345from urllib.request import urlopen test_url &#x3D; &quot;https:&#x2F;&#x2F;wztlink1013.github.io&quot;response &#x3D; urlopen(test_url)print (response.getcode()) # 200 表示访问成功print (response.read()) 通过Request访问 通过cookie访问网页解析模块 从已经下载的网页中爬取数据 实现方式有： 正则表达式 html.parser BeautifulSoup：结构化解析网页 lxml 结构化解析 DOM（Document Object Model），树形结构，就是html的基本骨架 BeautifulSoup解析网页待会再总结爬虫项目GitHub","categories":[{"name":"Spider","slug":"Spider","permalink":"https://blog.wztlink1013.com/categories/Spider/"}],"tags":[{"name":"spider","slug":"spider","permalink":"https://blog.wztlink1013.com/tags/spider/"},{"name":"beautifulsoup","slug":"beautifulsoup","permalink":"https://blog.wztlink1013.com/tags/beautifulsoup/"}]},{"title":"Python-apply函数和入口函数","slug":"Language/Python-apply函数和入口函数","date":"2020-02-08T07:27:20.000Z","updated":"2020-07-12T12:00:04.928Z","comments":true,"path":"2020/02/08/Language/Python-apply函数和入口函数/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/08/Language/Python-apply%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0/","excerpt":"","text":"pandas之apply函数1DataFrame.apply(func, axis&#x3D;0, broadcast&#x3D;False, raw&#x3D;False, reduce&#x3D;None, args&#x3D;(), **kwds) 第一个参数，这个参数是函数，相当于C/C++的函数指针。 这个函数需要自己实现，函数的传入参数根据axis来定，比如axis = 1，就会把一行数据作为Series的数据结构传入给自己实现的函数中，我们在函数中实现对Series不同属性之间的计算，返回一个结果，则apply函数会自动遍历每一行DataFrame的数据，最后将所有结果组合成一个Series数据结构并返回。 if name == ‘main’参考：知乎用户","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blog.wztlink1013.com/tags/Python/"}]},{"title":"DataAnalysis-SOP","slug":"DataAnalysis/DataAnalysis-SOP","date":"2020-02-08T06:28:48.000Z","updated":"2020-07-12T13:05:39.247Z","comments":true,"path":"2020/02/08/DataAnalysis/DataAnalysis-SOP/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/08/DataAnalysis/DataAnalysis-SOP/","excerpt":"","text":"一、关于数据分析a. 互联网最热职位：研发工程师、产品经理、人力资源、市场营销、运营、数据分析（供不应求）b. 数据分析的步骤：明确目的/思路、数据收集、数据处理、数据分析、数据展现c. 数据分析工具对比 i. Python||R||Matlab||Scala||Sas||Spss ii. python做数据分析是因为库比较多d. 什么是数据分析？：数据分析是一个检查Inspecting、清理Cleansing、转换Tranforming、和建模数据Modeling的过程，其目标是发现有用的信息，提出结论和支持决策。统计、计算、可视化和数据挖掘是数据分析师工作描述的各个方面。数据分析师，一般执行相同的功能，在一定程度上具有相同的资格。然而，特定的企业或行业可以塑造工作职责、技能、资格以及就业和晋升前景。 职位概述：数据分析师专业人员做什么？数据分析师获取、组装并帮助其他人解释和理解数据。要做到这一点，分析师必须培养分析、沟通、计算机、数学和统计方面等的技能。 具体的经济部门可以指导分析人员使用的数据类型。例如，医疗数据分析师的工作描述需要处理不同的信息，如实验室数据、保险索赔、处方记录、办公室或医院访问。在市场营销中，他们处理的是处理客户偏好、销售和统计数据分析中重要部分的客户。 数据分析师工作职责： 使用统计公式计算和分析数据。 验证数据的准确性、完整性和可靠性。 使用记录、报告和调查等资源编译统计信息。 将数据和其他信息输入计算机。 在研究或调查中采访参与者，跟踪或记录他们的回答。 收集或准备图表、图表、表格和其他对数据、调查和发现的描述。 寻找和识别新的数据收集源和方法。 获取客户数据收集需求 数据分析师工作基本技能： 分析能力。数据分析师的工作描述包括识别模式和基于数据呈现其他结论的能力。通过分析技能，数据分析师还可以确定数据、来源和物料的可靠性。 计算机技能。数据分析人员依靠数据库、文字处理器和其他计算机应用程序来计算数据、概率和其他统计数据，并准备显示数据。事实上，软件应用程序包括结构化查询语言(SQL)和其他数据库用户查询产品，以及面向分析或科学方法的查询产品。 数学能力。要分析和计算数据，分析人员必须具备数学技能，例如乘法、除法和使用其他数学操作。计算比率、分数、百分比和各种公式的能力可以帮助数据分析师准备有用的图表、报告和图表。 沟通技巧。倾听和理解参与者的回答有助于确保可靠的调查和结果。沟通还包括清晰而直接地向主管、团队成员以及第三方用户展示结果、结论和其他信息。 成为一名数据分析师 在数据分析师的工作描述中包含了数学、统计学和计算机方面的背景知识，这取决于企业或行业，潜在的数据分析师包括与行业相关的课程和获得资格的工作经验。 工作经验 数据分析师可以从需要使用电子表格、数据库和其他计算机应用程序的工作中获得经验。对于某些公司，数据分析师职位描述要求应聘者具有SQL服务器和其他数据库系统的经验。那些有数据挖掘经验的人也可以提高就业前景。 与教育和培训一样，企业可能更青睐具有特定行业经验的求职者。例如，财产保险公司的数据分析师可能曾为其他保险公司、抵押贷款公司、银行或保险机构工作。在学校环境中，申请人通常会带着以前的工作经历来学习或衡量学生的表现和教学方法。 数据分析师的潜在短缺，就业机会比比皆是。随着公司寻求提高市场份额，寻找客户或控制成本，对数据分析师的需求应该会增加，特别是在营销，销售和医疗保健方面。总而言之，为了帮助组织实现这些目标和其他目标，数据分析师必须确保获取它们的数据和方法可靠且清晰地传达。二、工作环境准备a. python2和python3的差异、2.7和3版本的选用 &apos;&apos;&apos;bytes和str的相互应用&apos;&apos;&apos; ch_str=&apos;python的新特性&apos; #print(ch_str+&apos;\\n&apos;) #print(type(ch_str)) b_str=ch_str.encode(&apos;utf-8&apos;)#字符型转化为字节型 #print(b_str) #print(type(b_str)) ch_str=b_str.decode(&apos;utf-8&apos;)#字节性转化字符型 print(ch_str) print(type(ch_str)) 【有什么作用呢？？】 b. Six库 c. 编码方式的差异：中文编码方式——UTF-8的选加 d. python环境 i. Anaconda：有许多的第三方库 1) Jupyter notebook：想办法把本地的文件开源到GitHub上 ii. IDE：没有最好的，只有适合自己的；全都需要自己配置 1) Eclipse+Pydev完全免费 2) Pycharm部分免费 设置配置python解释器有问题！===配置路径被隐藏的问题 调试：断点调试/交互式调试====不是很会用！！！ 3) spyder完全免费，适合熟悉matlab的开发者 iii. Ipython：简单验证思路===交互式命令的使用 § 在对像后面加一个&apos;?&apos;===显示对象的信息&apos;??&apos;===显示多个信息 Eg：fucktion_name?? ps：不要在后面加注释#否则会出错===我也不知道为啥 § 魔术命令的使用%time %timeit（一条语句） %%time %%timeit(多条语句) Eg：%timeit output&gt;&gt;&gt; 26.9 ns ± 1.8 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)三、建模四个基本模型分类：离散预测值；预先定义的 朴素贝叶斯 人工神经网络回归：连续预测值 Logistic回归聚类：预先没有被定义===未被标记的。 K-Means聚类时序分析： ARIMA时序 四、Code_SOP载入常用包123456789import pandas as pdimport numpy as npimport matplotlibimport matplotlib.pyplot as pltimport seaborn as snsfrom scipy import statsmatplotlib.rcParams[&#39;font.sans-serif&#39;]&#x3D;[&#39;SimHei&#39;]matplotlib.rcParams[&#39;axes.unicode_minus&#39;]&#x3D;False 获取并查看数据123456789data &#x3D; &#39;.&#x2F;data&#x2F;train.csv&#39;data_1 &#x3D; pd.read_csv(data)print (&#39;基本信息有：\\n&#39;)print (data_1.info())print (&#39;数据集有%i行，%i列&#39; %(data_1.shape[0], data_1.shape[1]))print (&#39;数据预览:&#39;)print (data_1.head(10))…… 数据的清洗和规整数据分析数据挖掘","categories":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"}],"tags":[{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/tags/DataAnalysis/"}]},{"title":"python-路径和nltk","slug":"Bug/python-路径和nltk","date":"2020-02-07T04:33:09.000Z","updated":"2020-07-14T07:38:51.178Z","comments":true,"path":"2020/02/07/Bug/python-路径和nltk/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/07/Bug/python-%E8%B7%AF%E5%BE%84%E5%92%8Cnltk/","excerpt":"","text":"一、路径相关路径相关报错信息1IOError: [Errno 2] No such file or directory 1pandas.read_csv() 报错 OSError: Initializing from file failed 1(unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape [duplicate] 1File b'train.csv' does not exist even though file exist 分析与解决问题编写python代码过程中，出现了类似这种一系列路径相关的错误，原因是，自己更改了相关文件夹/文件在电脑中的位置，解决办法就新建一个项目建一个全新路径或者修改现有路径 \\绝对路径 会报错（转义字符）处理：①双引号前面加一个r②\\换成\\\\（硬盘代号后面的第一个） ./相对路径 三种解决方式 r&quot;C:\\Users\\YJG\\Desktop\\pi_digits.txt&quot;&quot;C:\\\\Users\\\\YJG\\\\Desktop\\\\pi_digits.txt&quot;&quot;C:/Users/YJG/Desktop/pi_digits.txt&quot; PS：路径含中文假如路径、文件名都完整，还是报错的原因是这个参数中有中文，即使Python3已经支持中文，但是调用pandas的read_csv()方法时，默认使用C engine作为parser engine，而当文件名中含有中文的时候，用C engine在部分情况下就会出错。所以在调用read_csv()方法时指定engine为Python就可以解决问题。根治：将路径编程全英文，这是必要素养习惯！ da4=pd.read_csv(xxxxxxxxxx,engine=&#39;python&#39;) PS：utf-81UnicodeDecodeError：: &#39;utf-8&#39; codec can&#39;t decode byte 0xc8 in position 0: invalid contin 解决办法：data_1 = pd.read_csv(data1, encoding = &#39;gb2312&#39;)或者gb2312换成gbk参考：https://blog.csdn.net/qq_18888869/article/details/82625343 二、nltk相关nltk下载报错信息1bug:[WinError 10054] 远程主机强迫关闭了一个现有的连接 分析与解决问题原因：模型权重参数文件（.h5）较大，下载出现中断，下载失败 解决办法：手动下载模型，放到指定目录 C:\\Users\\XXX\\AppData\\Roaming 下载地址 （密码9sar） 参考 CSDN-103448420 nltk简书详细讲解","categories":[{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"},{"name":"python","slug":"python","permalink":"https://blog.wztlink1013.com/tags/python/"}]},{"title":"入门机器学习scikit-learn","slug":"MachingLearning/scikit-learn机器学习入门","date":"2020-02-05T07:24:29.000Z","updated":"2020-07-12T13:17:14.507Z","comments":true,"path":"2020/02/05/MachingLearning/scikit-learn机器学习入门/","link":"","permalink":"https://blog.wztlink1013.com/2020/02/05/MachingLearning/scikit-learn%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/","excerpt":"","text":"一、机器学习的一些概念基本概念 特征：一组数据所多个属性 标签：人为指定特征 监督学习：就像分类（离散化的标签），回归（连续性的标签）、【“有标准答案”】 无监督学习：就像聚类【“无标准答案”】 数据：是机器学习的命脉基本框架图二、机器学习的一些阶段/步骤 sklearn相关提及官网scikit-learn 包含聚类、分类、回归等算法 eg：随机森林、k-means、SVM等 包含模型筛选、降维、预处理等算法 要特别注意安装该包使用要注意的细节，具体参考上一篇博客 sklearn处理机器学习的一般化sop 准备数据集 数据分析:（利用np.reshape()成二维(n_samples,n_features)） 划分数据集：train_test_split() 特征工程：特征的提取、特征的归一化nomalization 选择模型 根据不同场景选择合适的模型:scikit-learn的模型选择路线图 分类、聚类、回归…… 在训练集上训练模型，并调整参数 经验选定参数 交叉验证确定最优的参数cross validation 在测试集上测试模型 predict预测、score真实值预测值评分、etc 保存模型 import pickle 主成分分析：将特征降维 统计学相关知识：方差（衡量在一个维度的偏差）、协方差（衡量一个维度是否对另一个维度有影响cov（x，y）） 线代相关知识：特征值、特征向量、协方差向量 PCA 相关代码html页面 三、通过scikit-learn认识机器学习加载示例数据集12345from sklearn import datasetsiris = datasets.load_iris()#用sklearn自身配带的数据digits = datasets.load_digits()# C:\\Users\\wztli\\Anaconda3\\pkgs\\scikit-learn-0.21.3-py37h6288b17_0\\Lib\\site-packages\\sklearn\\datasets\\data# 数据集在电脑中的位置 123456# 查看数据集# irisprint(iris.data[:5])print(iris.data.shape)print(iris.target_names)print(iris.target) [[5.1 3.5 1.4 0.2] [4.9 3. 1.4 0.2] [4.7 3.2 1.3 0.2] [4.6 3.1 1.5 0.2] [5. 3.6 1.4 0.2]] (150, 4) [&apos;setosa&apos; &apos;versicolor&apos; &apos;virginica&apos;] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]12345# digitsprint(digits.data)print(digits.data.shape)print(digits.target_names)print(digits.target) [[ 0. 0. 5. ... 0. 0. 0.] [ 0. 0. 0. ... 10. 0. 0.] [ 0. 0. 0. ... 16. 9. 0.] ... [ 0. 0. 1. ... 6. 0. 0.] [ 0. 0. 2. ... 12. 0. 0.] [ 0. 0. 10. ... 12. 1. 0.]] (1797, 64) [0 1 2 3 4 5 6 7 8 9] [0 1 2 ... 8 9 8]在训练集上训练模型1234567# 手动划分训练集、测试集 n_test = 100 # 测试样本个数train_X = digits.data[:-n_test, :]train_y = digits.target[:-n_test]test_X = digits.data[-n_test:, :]y_true = digits.target[-n_test:] 123456789# 选择SVM模型from sklearn import svmsvm_model = svm.SVC(gamma=0.001, C=100.)# svm_model = svm.SVC(gamma=100., C=1.)# 训练模型svm_model.fit(train_X, train_y)#训练要放入两个参数：样本的特征数据，样本的标签 SVC(C=100.0, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape=&apos;ovr&apos;, degree=3, gamma=0.001, kernel=&apos;rbf&apos;, max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False)123456# 选择LR（逻辑回归）模型from sklearn.linear_model import LogisticRegressionlr_model = LogisticRegression()# 训练模型lr_model.fit(train_X, train_y) C:\\Users\\wztli\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:432: FutureWarning: Default solver will be changed to &apos;lbfgs&apos; in 0.22. Specify a solver to silence this warning. FutureWarning) C:\\Users\\wztli\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:469: FutureWarning: Default multi_class will be changed to &apos;auto&apos; in 0.22. Specify the multi_class option to silence this warning. &quot;this warning.&quot;, FutureWarning) LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, l1_ratio=None, max_iter=100, multi_class=&apos;warn&apos;, n_jobs=None, penalty=&apos;l2&apos;, random_state=None, solver=&apos;warn&apos;, tol=0.0001, verbose=0, warm_start=False)在测试集上测试模型12y_pred_svm = svm_model.predict(test_X)y_pred_lr = lr_model.predict(test_X) 123456789# 查看结果# 评价指标from sklearn.metrics import accuracy_score#print '预测标签：', y_pred#print '真实标签：', y_trueprint('SVM结果：', accuracy_score(y_true, y_pred_svm))print('LR结果：', accuracy_score(y_true, y_pred_lr)) SVM结果： 0.98 LR结果： 0.94保存模型1234import picklewith open('svm_model.pkl', 'wb') as f: pickle.dump(svm_model, f) 1234567891011121314import numpy as np# 重新加载模型进行预测with open('svm_model.pkl', 'rb') as f: model = pickle.load(f)random_samples_index = np.random.randint(0, 1796, 5)random_samples = digits.data[random_samples_index, :]random_targets = digits.target[random_samples_index]random_predict = model.predict(random_samples)print(random_predict)print(random_targets) [2 2 1 3 8] [2 2 1 3 8]12 四、scikit-learn入门准备数据集12import numpy as npfrom sklearn.model_selection import train_test_split 1234567X = np.random.randint(0, 100, (10, 4))y = np.random.randint(0, 4, 10)y.sort()print('样本：')print(X)print('标签：', y) 样本： [[43 43 18 78] [74 24 42 37] [36 69 84 47] [70 62 77 30] [87 38 3 96] [68 67 24 7] [66 36 72 72] [12 94 87 72] [66 5 92 6] [41 59 60 91]] 标签： [0 0 0 2 2 2 2 3 3 3]1234567891011# 分割训练集、测试集# random_state确保每次随机分割得到相同的结果X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3., random_state=7) print('训练集：')print(X_train)print(y_train)print('测试集：')print(X_test)print(y_test) 训练集： [[63 56 7 42] [40 47 17 23] [41 31 26 8] [79 30 22 88] [54 85 48 54] [89 73 77 41]] [0 1 1 0 1 1] 测试集： [[ 3 0 42 86] [42 96 83 38] [33 45 8 37] [ 1 44 75 7]] [1 1 0 0]123456789# 特征归一化from sklearn import preprocessingx1 = np.random.randint(0, 1000, 5).reshape(5,1)x2 = np.random.randint(0, 10, 5).reshape(5, 1)x3 = np.random.randint(0, 100000, 5).reshape(5, 1)X = np.concatenate([x1, x2, x3], axis=1)print(X) [[ 353 4 27241] [ 999 4 34684] [ 911 4 78606] [ 310 6 44593] [ 817 9 6356]]1print(preprocessing.scale(X)) [[-1.12443958 -0.71443451 -0.46550183] [ 1.11060033 -0.71443451 -0.15209341] [ 0.80613669 -0.71443451 1.69736578] [-1.27321159 0.30618622 0.26515287] [ 0.48091416 1.83711731 -1.34492342]]12345678910# 生成分类数据进行验证scale的必要性from sklearn.datasets import make_classificationimport matplotlib.pyplot as plt%matplotlib inlineX, y = make_classification(n_samples=300, n_features=2, n_redundant=0, n_informative=2, random_state=25, n_clusters_per_class=1, scale=100)plt.scatter(X[:,0], X[:,1], c=y)plt.show() 123456789from sklearn import svm# 注释掉以下这句表示不进行特征归一化 X = preprocessing.scale(X)X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3., random_state=7) svm_classifier = svm.SVC()svm_classifier.fit(X_train, y_train)svm_classifier.score(X_test, y_test) C:\\Users\\wztli\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from &apos;auto&apos; to &apos;scale&apos; in version 0.22 to account better for unscaled features. Set gamma explicitly to &apos;auto&apos; or &apos;scale&apos; to avoid this warning. &quot;avoid this warning.&quot;, FutureWarning) 0.25训练模型1234567891011# 回归模型from sklearn import datasetsboston_data = datasets.load_boston()X = boston_data.datay = boston_data.targetprint('样本：')print(X[:5, :])print('标签：')print(y[:5]) 样本： [[6.3200e-03 1.8000e+01 2.3100e+00 0.0000e+00 5.3800e-01 6.5750e+00 6.5200e+01 4.0900e+00 1.0000e+00 2.9600e+02 1.5300e+01 3.9690e+02 4.9800e+00] [2.7310e-02 0.0000e+00 7.0700e+00 0.0000e+00 4.6900e-01 6.4210e+00 7.8900e+01 4.9671e+00 2.0000e+00 2.4200e+02 1.7800e+01 3.9690e+02 9.1400e+00] [2.7290e-02 0.0000e+00 7.0700e+00 0.0000e+00 4.6900e-01 7.1850e+00 6.1100e+01 4.9671e+00 2.0000e+00 2.4200e+02 1.7800e+01 3.9283e+02 4.0300e+00] [3.2370e-02 0.0000e+00 2.1800e+00 0.0000e+00 4.5800e-01 6.9980e+00 4.5800e+01 6.0622e+00 3.0000e+00 2.2200e+02 1.8700e+01 3.9463e+02 2.9400e+00] [6.9050e-02 0.0000e+00 2.1800e+00 0.0000e+00 4.5800e-01 7.1470e+00 5.4200e+01 6.0622e+00 3.0000e+00 2.2200e+02 1.8700e+01 3.9690e+02 5.3300e+00]] 标签： [24. 21.6 34.7 33.4 36.2]1234# 选择线性回顾模型from sklearn.linear_model import LinearRegressionlr_model = LinearRegression() 1234from sklearn.model_selection import train_test_split# 分割训练集、测试集X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3., random_state=7) 12# 训练模型lr_model.fit(X_train, y_train) LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)12# 返回参数lr_model.get_params() {&apos;copy_X&apos;: True, &apos;fit_intercept&apos;: True, &apos;n_jobs&apos;: None, &apos;normalize&apos;: False}1lr_model.score(X_train, y_train) 0.75981324923511141lr_model.score(X_test, y_test) 0.6693852753319398交叉验证123456789101112131415161718192021222324from sklearn import datasetsfrom sklearn.model_selection import train_test_split, cross_val_scorefrom sklearn.neighbors import KNeighborsClassifierimport matplotlib.pyplot as plt%matplotlib inlineiris = datasets.load_iris()X = iris.datay = iris.targetX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3., random_state=10) k_range = range(1, 31)cv_scores = []for n in k_range: knn = KNeighborsClassifier(n) scores = cross_val_score(knn, X_train, y_train, cv=10, scoring='accuracy') # 分类问题使用 #scores = cross_val_score(knn, X_train, y_train, cv=10, scoring='neg_mean_squared_error') # 回归问题使用 cv_scores.append(scores.mean()) plt.plot(k_range, cv_scores)plt.xlabel('K')plt.ylabel('Accuracy')plt.show() 12345# 选择最优的Kbest_knn = KNeighborsClassifier(n_neighbors=5)best_knn.fit(X_train, y_train)print(best_knn.score(X_test, y_test))print(best_knn.predict(X_test)) 0.96 [1 2 0 1 0 1 2 1 0 1 1 2 1 0 0 2 1 0 0 0 2 2 2 0 1 0 1 1 1 2 1 1 2 2 2 0 2 2 2 2 0 0 1 0 1 0 1 2 2 2]12 本文相关链接 scikit-learn中文文档github文中链接为英文文档 解释iris数据集","categories":[{"name":"MachingLearning","slug":"MachingLearning","permalink":"https://blog.wztlink1013.com/categories/MachingLearning/"}],"tags":[{"name":"sklearn","slug":"sklearn","permalink":"https://blog.wztlink1013.com/tags/sklearn/"},{"name":"scikit-learn","slug":"scikit-learn","permalink":"https://blog.wztlink1013.com/tags/scikit-learn/"}]},{"title":"VScode编写C/C++及其他使用","slug":"Environment/vscode","date":"2020-01-28T15:57:31.000Z","updated":"2020-07-12T13:14:37.922Z","comments":true,"path":"2020/01/28/Environment/vscode/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/28/Environment/vscode/","excerpt":"","text":"一、VScode常用插件 Markdown Preview Github Styling Markdown All in One GBKtoUTF8 CodeRunner Chinese (simplified)Language pack for Visual Code C/C++ Bracket Pair Colorrizer 2 【优化大括号】 background 【添加背景图片】 AnsiComment vscode-icons【美化图标】 Path Intellisense【补全】 GitLens 【显示当前行commit信息，管理git】 Git History 【查看commit信息】 Waka Time【记录软件编写各类语言时间分配】 Todo Tree【优化TODO：侧边栏】 Todo Highlight【优化TODO：高亮】 二、VScode编写C和C++https://www.zhihu.com/question/30315894 三、补充vscode可以自定义markdown预览样式，css文件以外链的方式放上 参考 vscode 插件推荐 - 献给所有前端工程师](https://segmentfault.com/a/1190000006697219#item-1) C&amp;C++环境https://www.zhihu.com/question/30315894&lt;!–stackedit_data:eyJoaXN0b3J5IjpbNDM3NTU3ODUwXX0= -&gt;","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[]},{"title":"配置java开发环境","slug":"Environment/java-jdk-jre","date":"2020-01-27T11:45:16.000Z","updated":"2020-07-12T13:13:26.239Z","comments":true,"path":"2020/01/27/Environment/java-jdk-jre/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/27/Environment/java-jdk-jre/","excerpt":"","text":"一、下载https://www.oracle.com/cn/java/technologies/javase-downloads.html 二、环境变量配置在系统变量下 CLASSPATH .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;%CATALINA_HOME%\\common\\lib\\servlet-api.jar; 其中%CATALINA_HOME%\\common\\lib\\servlet-api.jar;为tomcat的加包配置 JAVA_HOME C:\\Program Files\\Java\\jdk1.8.0_181 path %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin 三、测试CMD下输入java -version","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[]},{"title":"HTML-CSS-JavaScript综述","slug":"Language/HTML-CSS-JavaScript综述","date":"2020-01-24T08:11:01.000Z","updated":"2020-07-12T11:50:59.405Z","comments":true,"path":"2020/01/24/Language/HTML-CSS-JavaScript综述/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/24/Language/HTML-CSS-JavaScript%E7%BB%BC%E8%BF%B0/","excerpt":"","text":"一、HTML技术 单标记和双标记 熟悉一些常用标签的使用 文本控制、文本标签、图像标签、表格标签、表单标签、列表标签、超链接标签、div 学会查帮助文档 二、CSS技术 目的：让网页内容和样似分离，便于网站代码后期维护 引入 行内式、内嵌式、链入式、导入式 常用选择器及属性标记选择器、class选择器、id选择器、通配符选择器（优先级：id&gt;class&gt;标记&gt;通配） id属性值唯一，class属性值通用 三、JavaScript技术DOM JavaScript语法知识","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://blog.wztlink1013.com/tags/CSS/"},{"name":"HTML","slug":"HTML","permalink":"https://blog.wztlink1013.com/tags/HTML/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.wztlink1013.com/tags/JavaScript/"}]},{"title":"Pycharm,Anaconda,JetBrains系列app相关总结","slug":"Environment/jetBrains-pycharm-anaconda使用","date":"2020-01-23T08:54:46.000Z","updated":"2020-07-12T13:13:51.525Z","comments":true,"path":"2020/01/23/Environment/jetBrains-pycharm-anaconda使用/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/23/Environment/jetBrains-pycharm-anaconda%E4%BD%BF%E7%94%A8/","excerpt":"","text":"一、Anaconda和Pycharm下载与配置下载Anaconda且配置 （更新）下载了anaconda就不要单独下载python，之前下的也删掉，以此避免路径冲突 方式一：迅雷下载（推荐）；方式二：提取链接网盘下载；方式三：清华镜像下载，下载完安装【直接next即可】 测试：win + R 进入终端输入conda出现conda命令使用指南，即证明成功安装 配置环境变量：在系统变量path路径中加入下面配置（具体路径具体填写） 下载Pycharm且配置 下载版本社区/专业：专业版本需要激活码，社区版本功能基本能应付日常使用 （大学学生时期可以用学生邮箱申请使用JetBrains系列软件） ❗补充：取消上面用学生邮箱去申请JetBrains系列软件使用方法。先去GitHub申请学生包，然后通过GitHub已认证的GitHub账号再去申请JetBrains系列软件较为方便 JetBrains申请链接🔗 Pycharm使用Anaconda的配置 （ ❗补充：下面貌似是社区版本的添加方式，但是专业版本会自动识别 ）： 二、Anaconda环境管理pip,conda,Miniconda,Anaconda pip包管理工具，python官方认证 conda是一种通用包管理系统，旨在构建和管理任何语言和任何类型的软件。包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。 Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，就是把很多常用的不常用的库都给你装好了。同时利用配置/工具/命令conda来进行package和environment的管理。 Miniconda，它只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。就只包含最基本的东西，其他的库得自己装。 Python相关包路径的查看 win+R 输入cmd 输入python 输入import sys 输入sys.path 标准库：anaconda文件夹下的lib文件夹 第三方库：下述代码中的文件夹1C:\\Users\\wztli\\Anaconda3\\Lib\\site-packages Sklearn包安装失败总结安装scikit-learn包，导入sklearn的Bug 1ImportError: DLL load failed: 找不到指定的模块 scikit-learn的下载会对numpy、scipy、joblib三个库相应版本有所要求，总之如果用anaconda的话，全部更新为最新即可（参考whl版本） C:\\Users\\wztli\\Anaconda3\\pkgs\\scikit-learn-0.21.3-py37h6288b17_0\\Lib\\site-packages\\sklearn\\datasets\\data 数据集在电脑中的位置 Scrapy包安装失败总结 pip 下载可能会失败 使用conda（镜像）下载conda install -c scrapinghub scrapy Loadingpip下载/管理经常bug，用conda结合anaconda/miniconda方便使用 三、JetBrains系列软件的高效使用JetBrains之初始配置 界面字体大小、代码字体大小、主题默认（dark）、背景图片（看心情） 字体相关 主题相关 JetBrains之Debug断点调试断点调试是优于打印输出的一种调试程序的一种手段 Ctrl+F5（左上角）：（return “project”）重新debug该文件 F9：（resume program）一个断点接着一个断点走，不按行走（eg：有循环会随着i一步一步走完） F8：（step over） 一行一行走代码 F7：（step into） 进入函数内部 Alt+shift+F7：（step into mycode）遇到自己函数 进去 shift+F8：（step out）跳出，进入函数后，跳出来 Alt+F10：（show execution point）指针显示当前断点旁边 Show Python Prompt按键交互式调试命令 JetBrains之结合GitHub使用 配置Git和GitHub（先连接本地git，然后登录GitHub）页面 依次点击File Setting Version Control GitHub然后登录账户进行配置 将项目新建在GitHub菜单栏 依次点击 VCS Import into Version Control Share Project on GitHub 讲项目克隆在本地 VCS Get from Version Control …… IDEA之破解以及初始用在编译器选择方面，Eclipse和IDEA，还是选择后者···· https://shimo.im/docs/9pJJRJPr6thtPxJd/read https://segmentfault.com/a/1190000021220727 初次运行IDEA编写helloworld程序 新建一个项目 选择SDK 是否需要加入模板（一般不要） 更改路径和命名 在scr目录下新建java类正式编写（注意对类命名要有意义） JetBrains之TODO的使用便于编写大型代码，将注释加上前缀以便分类处理，以下图片展示 参考： TODO的使用官方文档 TODO的用法JetBrains之插件枚举 Waka Time：持续记录自己的IDE以及编程语言的使用时长 JetBrains之初用警告一般下载完开始使用，IDE会报一个 Windows安全中心 的警告 1Windows Defender might be impacting your build performance. PyCharm checked the following directorie 解决：然后再进入排除项添加报错的文件夹即可","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[{"name":"Pycharm","slug":"Pycharm","permalink":"https://blog.wztlink1013.com/tags/Pycharm/"},{"name":"Anaconda","slug":"Anaconda","permalink":"https://blog.wztlink1013.com/tags/Anaconda/"}]},{"title":"Jupyter环境的扩展","slug":"Environment/jupyter","date":"2020-01-22T12:02:30.000Z","updated":"2020-07-12T13:14:04.848Z","comments":true,"path":"2020/01/22/Environment/jupyter/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/22/Environment/jupyter/","excerpt":"","text":"一、Jupyter环境的搭建 pip下载 跟随anaconda下载 二、高效使用，安装扩展插件一般只需要下面两条命令，就可以重新打开就可看见新安装的插件环境。 pip install jupyter_contrib_nbextensions 或者 jupyter contrib nbextension install 但是pip下载完，会出现jupyter_contrib_nbextension扩展功能后不显示Nbextensions标签的bug，在此记录下解决的方式。 三、扩展插件不显示的解决方法 如果之前已经用上述两条命令之一安装了上述包，且用pip list查看的确成功安装，则依次进行下面删除命令（选y）: pip uninstall jupyter_contrib_nbextensions pip uninstall jupyter_nbextensions_configurator 打开Anaconda Prompt窗口，执行第一个命令，用于安装nbextensions: pip install jupyter_contrib_nbextensions 再执行第下面命令，用于安装 javascript and css files: jupyter contrib nbextension install --user 最后执行，用于安装configurator: pip install jupyter_nbextensions_configurator 参考安装的扩展插件参考以下网站： 五个常用插件 - 简书 如何优雅地使用 Jupyter？ - 量子位的回答 - 知乎 jupyter使用技巧&lt;!–stackedit_data:eyJoaXN0b3J5IjpbLTY1ODI1MDI3Nl19 -&gt;","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[{"name":"jupyter","slug":"jupyter","permalink":"https://blog.wztlink1013.com/tags/jupyter/"}]},{"title":"重装系统","slug":"Environment/重装系统","date":"2020-01-18T10:59:24.000Z","updated":"2020-07-12T13:11:49.773Z","comments":true,"path":"2020/01/18/Environment/重装系统/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/18/Environment/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"一、关于重装重装缘由总结几次重装的步骤，为了今后更快地重装。 重装好处电脑重装系统能解决大多数问题（对鄙人能解决100%问题//手动滑稽），在此总结一下自己重装系统过程步骤以及遇到的问题 二、重装系统SOP1. 制作启动盘 法一：MSDN下载①迅雷下载 ②网盘下载 下载完镜像之后，再用 ULtralSO/ rufus软件刻录在U盘（大于4G的U盘） 法二：微软官方下载网速不能太慢，WiFi较快的可以用这个，不过下载的电脑原装版本，不追求专业版本的Windows，最好还是下这个吧 坑1：如果下载的镜像大于4G左右，ULtralSO不能刻录。但是在学校重装为啥就可以，是u盘问题嘛，醉了。 亮2：官方下载，可以匹配自己电脑本来的版本；可以直接刻录在U盘，唯一不足应该就是网速问题。 坑3：U盘如果“身患重伤”，下个相关优化U盘软件处理一下 （更新）法三：快启动先用法一下好镜像。 2. 正式重装 进入bios界面 开机刚要出现HP字样，一直点 esc 键，然后再设置开机进入启动盘 Next Wait即可 格式化C盘→安装→等候→登录微软账号… 3. 磁盘管理 磁盘管理器：根据需求将磁盘分区 问题1：给C盘扩展时不能扩展？磁盘只有相邻卷才能扩展卷：解决办法就是把右边的磁盘删除（状态为未分配空间），然后用左边的磁盘合并之（使用扩展卷） 4. 关于破解首先有条件购买支持正版，支持同行 其次下载自己笔记本出厂Windows版本，则不需要激活码，自带 最后破解之 hwid.kms38.gen.mk6软件 三、Computer谷歌浏览器 谷歌访问助手插件 让谷歌先连上网 然后构建SSR/ ByWave 登录谷歌账号同步书签插件等设置 下载IDM下载器 文件备份及恢复 网盘常用文件夹备份 GitHub同步开发项目 开发环境的搭建 Git：配置全局用户 （非个人电脑配置多用户环境） Nodejs Unix：VMware15 Java：jdkjdk1.8.0_181、jrejdk1.8.0_181 MySQL 通用软件 百度网盘，Dropbox，迅雷 Bandizip PDF：Adobe Acrobat DC /福昕阅读器 有道翻译 Office2019 (已经集成Onenote2016)，再另外下载onenote插件 Potplayer播放器 社交软件QQ、微信、网易邮箱大师、网易云、酷狗 IDE C&amp;C++：VScode(轻量)、Codeblocks(次选)、VS2019(PC空间大则优选) Python：Anaconda、Pycharm(配置nltk、tensorflow等)(关于破解或 学生用户登录) Java/JavaWeb：jdk、IDEA/Eclipse(配置Tomcat) Web：VScode /webstorm DataBase：SQL Server 2008 和 安装教程 、 Navicat Premium 12 OS：CPU Simulator Matlab 研究-CAJViewer 7.3 研究-AxMath 研究-AxGlyph 后期制作Ps、Pr、Ae 、An、Au、EV录频、Format factory格式转换工厂 其他 PicGo （全局代理下载） Snipaste-2.3-64位（网盘） 阿里云的oss-browser HexoClient 火萤桌面视频 Rainmeter","categories":[{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"}],"tags":[{"name":"硬件","slug":"硬件","permalink":"https://blog.wztlink1013.com/tags/%E7%A1%AC%E4%BB%B6/"}]},{"title":"CNN(卷积)和GCN(离散卷积)","slug":"MachingLearning/CNN-卷积和GCN-离散卷积","date":"2020-01-17T16:06:11.000Z","updated":"2020-07-12T13:16:53.847Z","comments":true,"path":"2020/01/18/MachingLearning/CNN-卷积和GCN-离散卷积/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/18/MachingLearning/CNN-%E5%8D%B7%E7%A7%AF%E5%92%8CGCN-%E7%A6%BB%E6%95%A3%E5%8D%B7%E7%A7%AF/","excerpt":"","text":"一、CNN1. 卷积的理解 从数学角度来看，卷积就是一种运算，就好比是线性代数的内积、向量积等。 卷积分两种类型，一种是连续类型，一种是离散类型。 2. Examples 离散卷积===掷骰子 加入同时掷两个骰子，求骰子显现数之和为4的概率为多少？其实就是高中所学的排列组合问题，可以看作是卷积离散形式的显性表现形式。 连续卷积===做馒头 由于时间变化和食物腐败特性，做馒头的同时也会有馒头的腐败，给定相关数据，求一天之中腐败的馒头数量。 3. 卷积在计算机领域简单应用 降噪图像：将图像按照矩阵的形式表达为一个数据集，对目标的一个像素点，进行平均矩阵运算，此时的矩阵表达形式可以映射到卷积的数学表达形式。 二、GCN卷积的区分： 数学运算当中的卷积：“” 深度学习里面的卷积 参考资料 如何通俗易懂地解释卷积？ - 马同学的回答 - 知乎 解释一下卷积神经网络的卷积核？ - superbrother的回答 - 知乎 如何理解 Graph Convolutional Network（GCN）？-superbrother的回答-知乎 复杂网络的解释&lt;!–stackedit_data:eyJoaXN0b3J5IjpbLTUwNzQ0MjY4XX0= -&gt;","categories":[{"name":"MachingLearning","slug":"MachingLearning","permalink":"https://blog.wztlink1013.com/categories/MachingLearning/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://blog.wztlink1013.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"PS","slug":"PostProduction/PS","date":"2020-01-17T01:22:11.000Z","updated":"2020-07-14T05:30:56.678Z","comments":true,"path":"2020/01/17/PostProduction/PS/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/17/PostProduction/PS/","excerpt":"","text":"一、基本工具123456789101112131415161718192021222324252627282930313233343536373839404142434445464748认识PS&#x3D;&#x3D;&#x3D;有许多功能eg：绘画等等准备工作&#x3D;&#x3D;&#x3D;了解菜单栏；工具栏；基本功能1、图层面板的认识图层顺序 上一层遮挡下一层 蒙版也是图层混合模式 就是这层图层与下一层混合叠加的效果@@滤色 就是消去黑色深色只显示白色亮色的部分 案例光晕 用黑背景绘画光晕的图案选择滤色混合样式图层样式不透明创建 删除 解锁2、图片的裁切选框工具不行&#x3D;&#x3D;&#x3D;无法确定像素 不能缩放要显示的区域裁剪工具不行&#x3D;&#x3D;&#x3D;能确定像素 但不能缩放要显示的区域只是同时裁剪图片和画布图像&#x3D;&#x3D;&#x3D;大小不行--只是压缩图片和画布而已 画布大小（前提是图层不是背景层没有被锁定）调整画布的大小+自由变换工具缩放+移动工具我们想要的大小 调整图像等比例缩放 移动到我们要显示的区域3、蒙版作用蒙版只有白和黑 只是在通道建立一个白色的蒙版图层（默认全部显示；有选区时，选区是白色的非选区是黑色的）黑透明，白不透明画笔涂抹 透明度 流量一般用来合成图片对图像擦除的效果 但不影响原始图像的像素 便于后期修改如果用橡皮擦会破坏原始素材4、正确校色图像-调整&#x3D;&#x3D;&#x3D;对图像校色是不可逆的 不适合后期修改创建新的填充和调整图层的按钮 添加带蒙版的调整图层带蒙版的调整图层 是可逆的如果想只对**一个图层作用 右击图层-创建剪切蒙版 5、钢笔工具 点击-点击&#x3D;&#x3D;&#x3D;是直线点击-点击不要松开手&#x3D;&#x3D;&#x3D;拖动 就是曲线勒alt+ 点击瞄点拖拉会产生操纵杆&#x3D;&#x3D;&#x3D;并且把直线变成曲线点击单个操纵杆会单独操纵一边的 crtl+ 移动瞄点属性栏【自动添加&#x2F;删除】打勾时 点击线能添加点 点击点不拖动能删除点描绘到一半的没闭合的图层 要闭合的话就要先ctrl点击最后一点 在点击初始点抠出的区域转为选区 选中图层 点击路径面板-将路径转为选区这时候的选区可以 建立蒙版把他抠出来单独单独显示 这种抠图是可逆的6、修片时用到的工具红眼 &#x3D;&#x3D;&#x3D;记得是整个眼睛污点 &#x3D;&#x3D;&#x3D;可以吧污点附近的像素自动修改污点 但是对麻子脸没用修复画笔 &#x3D;&#x3D;&#x3D;把目标的像素填充涂抹的地方 并且能自动融合边缘修补工具 &#x3D;&#x3D;&#x3D;框选一个目标选区 填充涂抹的地方 并且能自动融合边缘 二、","categories":[{"name":"PostProduction","slug":"PostProduction","permalink":"https://blog.wztlink1013.com/categories/PostProduction/"}],"tags":[]},{"title":"AN","slug":"PostProduction/AN","date":"2020-01-16T15:55:22.000Z","updated":"2020-07-14T05:30:56.677Z","comments":true,"path":"2020/01/16/PostProduction/AN/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/16/PostProduction/AN/","excerpt":"","text":"一、基本功能铅笔工具：属性面板和工具栏下方公共栏都有修改属性设置，笔触颜色， 模式（伸直平滑墨水） 样式下拉菜单中选斑马线测试 线条工具：shift划线，水平垂直45度角 端点 矩形工具：形状，笔触和填充两种颜色 Shift正方形 接合 基本矩形工具：图元，跟形状重合不会破坏，形状之间融合 椭圆工具：不要笔触颜色 不要填充颜色 基本椭圆工具：直接在图上拖动修改 圆环 扇形 多角星形工具：多边形，星形（属性-工具设置-选项-样式-星形） 选择工具： 12341.选择功能：单击填充选填充，双击填充选边框+填充，双击边框选连通边框2.移动功能：选择，按着鼠标移动3.复制功能：选择，ALT+按着鼠标移动可复制4.变形功能：鼠标放在边框上当光标变了，按着鼠标拖动可以做变形 月亮和叶子制作 1234567891011画笔工具（刷子工具）： 有边框无填充矩形，用刷子工具测试刷子模式（画笔模式）。画笔工具（艺术画笔工具）：可点击画笔库按钮打开预设，双击某种画笔，添加到属性面板的样式下拉列表颜料桶工具：修改填充颜色 空隙大小墨水瓶工具：修改笔触颜色 改宽度和样式，细边粗边斑马滴管工具：选择边框，修改笔触颜色，选择填充，修改填充颜色，并同时转换成墨水瓶或颜料桶工具任意变形工具：有点像PS的自由变换 导入外部文件并打散（CTRL+B）做变形渐变变形工具：气球制作（填充颜色选渐变，用颜色调板变换颜色，用颜料桶工具填充）部分选择工具：红心制作（只有填充没有边框的正圆-复制正圆两只圆叠加心的半成品-部分选择工具移动下面锚点成心形）文字工具：七彩文字（颜料桶工具填充为线性渐变） 透视文字（任意变形工具 扭曲） 波浪文字（任意变形工具 封套）3D旋转平移工具：两种工具只对影片剪辑元件起作用（插入讲元件，花元件，对齐面板排列） 时间轴，普通帧，关键帧，空白关键帧 逐帧动画： 导入文件名连续的多张图片，文件-导入-导入到舞台-此文件看起来是图像序列的组成部分，是否导入序列中的所有图像？是-在时间轴上查看，生成若干关键帧，每帧一幅图像，CTRL-Enter测试影片，1帧频2关键帧后插入普通帧放慢速度（选择关键帧-插入-时间轴-普通帧） 小球跳跃，从屏幕左边跳到右边，再跳回来（插入关键帧，每个关键帧中小球改变位置，时间轴上选择所有帧，按着Alt键拖动可复制，对复制帧鼠标右键选翻转帧） Connecting制作二、补间形状动画 小球移动 第一帧画圆-选择时间轴上的帧-鼠标右键-创建补间形状-时间轴上选第25帧创建关键帧，这个关键帧跟前面距离它最近的关键帧一样，把小球移动到右边- CTRL-Enter测试影片 蓝色方形变红色圆 “3 变色文字”实现时注意，文字必须打散为形状，才能做补间形状动画 “4 形状提示“ 同一图中两个不同动画是通过创建图层，不同图层上不同动画；形状提示的添加方法：修改-形状-添加形状提示 三、传统补间动画12345678910111213141516171819202122232425262728293031323334传统补间动画-小球为例子画圆-帧-鼠标右键-创建传统补间-注意圆已经被转换为图形元件-30帧处创建关键帧-圆移动到右边-测试影片-在库中找到自动建立的图形元件，双击修改为径向渐变填充-选择第一帧点击-修改帧属性中的旋转为顺时针，测试影片。-选择第二个关键帧中的圆，在属性中选择色彩效果-样式中的各种选项-测试效果 6-1 动作动画-放大导入图-帧-鼠标右键-创建传统补间-30帧处创建关键帧-放大第二个关键帧中图片元件-选择第一帧-帧属性中缓动设置为-100补间形状和传统补间的区别6-2 动作动画-小人跑步设置舞台颜色-制作路图层-制作小人影片剪辑动画-生成小人走路图层-设置两个关键帧中小人属性读ppt13-ppt17对图形元件和影片剪辑元件属性设置的不同引导动画-小球抛物线要创建运动引导动画，至少需要两个图层：一个是被引导图层，用于存放运动的对象，必须是传统补间动画；另一个是引导层，用于绘制作为对象运动路径的辅助线。使用鼠标右键单击，在弹出的快捷菜单中，选择【添加传统运动引导层】选项，即可添加一个传统运动引导层。创建一个传统补间动画-小球从频幕左边走到右边-在图层左边空白处鼠标右键单击，在弹出的快捷菜单中，选择【添加传统运动引导层】选项，即可添加一个传统运动引导层。用直线工具画直线，小球自动吸附到线上-用选择工具把直线变成抛物线-测试遮罩动画遮罩动画是Flash的一种基本动画方式，制作遮罩动画至少需要2个图层，即遮罩层和被遮罩层。在时间轴上，位于上层的图层是遮罩层，这个遮罩层中的对象就像一个窗口一样，透过它的填充区域可以看到位于其下方的被遮罩层中的区域。而任何的非填充区域都是不透明的，被遮罩层在此区域中的图像将不可见。导入women1照片-建立新图层-画椭圆遮住女孩头部-图层左边空白处鼠标右键单击，在弹出的快捷菜单中，选择【遮罩层】，看效果。补间形状动画 改变的形状 单纯位置的移动传统补间动画 多个属性可以改变：旋转、放大、透明…… 引导层 eg：旋转的字遮罩动画 eg：闪光灯文字效果 影片剪辑动画&#x3D;&#x3D;&#x3D;how？滤镜&#x3D;&#x3D;&#x3D;实现灰色地带帧的种类与差异切割字幕：线条工具&#x2F;铅笔从库那里打开文件，直接拖动，可以保留被拖动的东西属性魔戒：向下滚动的文字&#x3D;&#x3D;不同时间掉下&#x3D;&#x3D;&#x3D;该百年属性，图形原件，各个掉下的文字改成不同的帧数 四、部件动画123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475补间动画 补间动画（CS4开始）是基于对象的，传统补间是基于帧的 生成补间动画方法： ①选择对象，右击，选创建补间动画； ②选择帧，右击选创建补间动画，系统自动生成补间范围，容纳一秒所需帧 创建补间动画后，帧色彩是浅蓝色，与传统补间补间形状比（淡紫色 绿色）（生成一个新图层，创建传统补间，查看颜色） 补间对象可以是元件（图形元件、影片剪辑、按钮）、文本（演示传统补间如何做文字运动，自动把文本转换为图形元件，而补间动画直接对文本做补间） 编辑补间动画范围：补间动画可以方便调整帧数 传统补间不能像补间动画范围那样拉伸或改变大小，只能分别选择这些帧并插入或删除才能拉伸或缩短动画 注意：在时间轴上，第一帧最后一帧边缘按着鼠标拖动，帧们按比例压缩或者增长；如果按着shift键拖动，可保持原来关键帧之间的距离，尾部自动生成普通帧延长动画持续时间，可以将范围左侧边缘或右侧边缘拖动到期望的帧上。 “基于整体范围的选择”（时间轴右上角下拉菜单）勾选时，鼠标拖过希望选择的帧的同时按下ctrl键可以在动画范围内选择一定范围内的帧，（ctrl+鼠标拖动可以同时选多个图层多个帧），选择后拖动可以移动关键帧到图层的新位置，按着Alt的同时拖动是复制帧 选择帧后鼠标右键，拆分动画，产生两个补间范围 eg： 关键帧和属性关键帧？？？不同，关键帧只时间轴上某一帧中元件实例首次出现在舞台上；属性关键帧是flash cs4增加的，指在补间动画中为特定时间或某一帧某个属性定义的一个值添加属性关键帧： 1）手动添加：播放头放在要添加帧的位置，右击-插入关键帧- 2）自动添加:播放头放在要添加帧的位置，属性改变 编辑运动路径 创建&#x2F;修改运动路径：可以用选择工具移动路径（包括对象）、路径变形、用部分选择工具修改路径，可用选择工具重新定位路径也可以用任意变形工具缩放处理路径，还可以菜单修改-变形更多范围处理路径 将播放头定位在路径中间位置，修改对象位置，会自动改变路径 创建复炸路径：新建一个铅笔图层，铅笔工具绘制图在该图层，ctrl+X，选择时间轴内的动画范围或舞台上的对象ctrl+v粘贴，就可以生成路径， Ctrl+shift+V不改变原图形位置复制 注意：路径不能闭合，比如地球绕太阳旋转的题，用补间动画实现时，园必须有缝隙，小球才能在缝隙处开始 Eg：1）飞机头跟着路径走。2）海底海豚 Ø 影片剪辑动画尾巴的摆动：新建元件（影片剪辑），再导入三张海豚图片（改变相关的帧）生成海豚摆尾巴的一个小影片剪辑 Ø 学会导入影片所需要的剪辑动画①同时打开fla文件，库当中导入②文件选项导入到舞台 Ø 还要勾选“调整到路径”补间动画使用并保存为预设动画传统补间不行，只能是补间动画才行动画预设使用：选择动画预设中的相关预设，鼠标右键“在当前位置结束” 自己创建预设：方形从左到右，创建补间动画，在动画预设工具中选左下第一个生成预设命令，或者右上弹出菜单中选“保存”，即可在自定义预设中定义自己的预设 另外，再同样生成传统补间，同样保存，会出现不能创建对话框。 如果画形状（如圆），可直接应用动画预设，但是，注意别只选择元的心或者轮廓，这样，会保留没选择部分为一个图层，选择部分自动生成新图层 位置与颜色效果动画： 1）打开素材，延长帧到117 2）新建图层2，第11帧F6插入关键帧，库中拖动P00元件，到舞台底部，并创建补间动画 3）14帧处右击，插入属性关键帧-全部，向上移动P00，到下面细条一半进入----快速上移 4）25帧插入属性关键帧，Poo上移一点，到细条全显示--慢速上移 5）新建图层3 ，33帧处插入关键帧，元件“按钮1” 拖入放在上端和大字上端齐平，选按钮1，属性面板中设亮度为80%,创建补间动画 6）41帧处插入属性关键帧，向下拖动对象到顶端比上面的细线低不少，亮度设为0% 7) 46帧F6，向上拖动图到最终位置，图像的下端与下面的细条的上端齐平 8）选择补间范围，在“动画预设”面板创建并存储新的动画预设 9）新建图层，36帧处插入关键帧，元件“按钮2” 拖入放在上端和大字上端齐平，将刚创建的动画预设应用到元件上 10）依次创建新图层，拖入按钮3,4，应用动画预设 运动及运动引导动画 1)打开素材文件，把Symboll0拖入场景，转换为影片剪辑运动动画第一帧窗机补间动画，新建图层，绘制曲线，ctrl+X，回到图层一，ctrl+shift+V原位粘贴 2）生成图层3，错后几帧建立关键帧，拖入Symbol0，还是创建补间动画，绘制曲线，复制粘贴 3）生成图层4，重复2） 4）回到场景，图层一背景，图层2放入运动动画，按Alt拖动复制若干，调整位置，使得播放时有更多花瓣飞出摄像头动画创建：时间轴下方&#x2F;左边工具里面在控制台修改属性，补间动画，传统补间还可以左右移动摄像机 五、按钮1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859三种元件 图形 影片剪辑 按钮 按钮 （使用和指针使用有关） 四种状态： 弹起状态 指针点击状态 按下状态 滑过状态 ps：2热区、点击状态 ⚪的制作 四个图层 选择&#x3D;&#x3D;&#x3D;变形&#x3D;&#x3D;&#x3D; Ctrl+x 制作外环&#x3D;&#x3D;&#x3D;在制作成影片剪辑原件（用补间动画制作） 加在一起&#x3D;&#x3D;&#x3D;都选择&#x3D;&#x3D;&#x3D;对齐命令 加入音乐 史努比的实现 抠图&#x3D;&#x3D;&#x3D;魔棒…… 扩大热区游动的鱼 影片剪辑 隐形动画 动作脚本（a来显示） 窗口&#x3D;&#x3D;&#x3D;动画&#x3D;&#x3D;&#x3D;写代码 ①小球停止 ②星球环绕：第二帧跳到第一帧 创建： ①动作里面的 ②代码片段里面 新建一个图层，用其他人的按钮代码片段 经典交互程序 四个商店 声音 选择第一帧，拖动过来 同步：不要选择“事件”，选择“开始”，“数据流”只在选择的的帧出声音 拖动音乐进来之后：插入普通帧不要关键帧文本（歌词） 三种类型： ①静态文本：从头到尾不变 ②动态文本 ③输入文本：交互 按F7（第一个F7之后插入F6），在文本（歌词）图层中， 不同场景按钮： 三个按钮，响应进入另一个场景，插入场景&#x3D;&#x3D;&#x3D;用到代码片段 代码实现","categories":[{"name":"PostProduction","slug":"PostProduction","permalink":"https://blog.wztlink1013.com/categories/PostProduction/"}],"tags":[]},{"title":"OS小结","slug":"OS/OS小结","date":"2020-01-16T08:28:59.000Z","updated":"2020-07-12T13:17:56.906Z","comments":true,"path":"2020/01/16/OS/OS小结/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/16/OS/OS%E5%B0%8F%E7%BB%93/","excerpt":"","text":"学期完一点想法OS学的不深，许多经典算法没有自己实现，只是表层的理解原理而已。 OS的学习以后还有待加强！ 他人的话上大学上的的最有意义的四门课： 操作系统/实习：从零开始写了一个操作系统，从实模式到bash，包括文件系统 计算机网络：从零实现tcp协议栈，以及路由算法 编译原理/实习：从零写python静态类型推导以及runtime库 计算机体系结构：这个没做什么项目，但是了解了cpu的基本原理，发展历史，以及现代处理器的工作模式。 至于这四门课都学完后我的收益是什么？ 任何一个计算机软件层面的问题，我都可以按照这四门课教我的方法，系统性的分析到根源，从未失手过。 目前面试过的人得有100+，感觉985科班出身的会好一些，感觉CS大学教育还是有待加强 java对os的复习计算机的组成 CPU 对内存的数据，执行相关数据 内存 数据是如何存储的？ 外存 硬盘、cd、驱动 输出设备 显示器（分辨率，点距） 输入设备 键盘 调制解调器 程序的本质封装一个极其智能软件 机器语言 汇编语言：对上一语言做了部分封装，所以需要了编译器 高级语言：就想学英语一样（要学好英语，提升词汇量等），也需要编译器来转换机器所能认识的机器语言或虚拟机器语言 javajava能开发很多平台应用，使用范围广泛 java的一些特征","categories":[{"name":"OS","slug":"OS","permalink":"https://blog.wztlink1013.com/categories/OS/"}],"tags":[{"name":"OS","slug":"OS","permalink":"https://blog.wztlink1013.com/tags/OS/"}]},{"title":"MATLAB-概述","slug":"Language/MATLAB-概述","date":"2020-01-16T07:43:11.000Z","updated":"2020-07-12T11:59:05.691Z","comments":true,"path":"2020/01/16/Language/MATLAB-概述/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/16/Language/MATLAB-%E6%A6%82%E8%BF%B0/","excerpt":"","text":"MATLAB概述MATLAB(矩阵实验室)是数字计算，可视化和编程的第四代高级编程语言和交互式环境。MATLAB是由MathWorks开发的。 它允许矩阵操纵，绘制功能和数据; 实现算法; 创建用户界面; 与其他语言编写的程序(包括C语言，C++，Java和FORTRAN)进行交互; 分析数据; 开发算法; 并创建模型和应用程序。 它有许多内置命令和数学函数，可以帮助您进行数学计算，生成图形和执行数值方法。 MATLAB计算数学MATLAB用于计算数学的各个方面，以下是最常用的常用数学计算方法 - 处理矩阵和数组 2D和3D绘图和图形 线性代数 代数方程 非线性函数 统计 数据分析 微积分和微分方程 数值计算 积分 变换 曲线拟合 各种其他特殊功能 MATLAB特点以下是MATLAB的基本特性 - 它是数字计算，可视化和应用程序开发的高级语言。 它还为迭代探索，设计和解决问题提供了一个交互式环境。 它为线性代数，统计学，傅里叶分析，滤波，优化，数值积分和求解常微分方程提供了广泛的数学函数库。 它提供内置的图形，用于可视化数据和工具，用于创建自定义绘图。 MATLAB编程接口提供了开发工具，以提高代码质量的可维护性并最大限度提高性能。 它提供使用自定义图形界面构建应用程序的工具。 它提供了基于MATLAB的算法与外部应用程序和语言(如C语言，Java，.NET和Microsoft Excel)集成的功能。 MATLAB使用MATLAB广泛应用于物理，化学，数学和所有工程流领域的科学与工程计算工具。 它用于一系列应用，包括 - 信号处理和通信 图像和视频处理 控制系统 测试和测量 计算财务 计算生物学","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"MATLAB","slug":"MATLAB","permalink":"https://blog.wztlink1013.com/tags/MATLAB/"}]},{"title":"Hexo-markdown写作","slug":"Hexo/Hexo-markdown写作","date":"2020-01-16T06:56:31.000Z","updated":"2020-07-14T07:47:15.801Z","comments":true,"path":"2020/01/16/Hexo/Hexo-markdown写作/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/16/Hexo/Hexo-markdown%E5%86%99%E4%BD%9C/","excerpt":"","text":"一、Markdown的基本语法标题分六个标题，一般#作为文章的总标题，一篇文章只有一个 字体倾斜文字加粗文字倾斜加粗文字删除线文字 引用 引用 引用+嵌套 添加图片 列表无序列表 第一个无序 第二个无序 第三个无序 有序列表 第一个有序 第二个有序 嵌套列表 父1 子1 子2 父2 子1 表格 表头 表头 表头 内容 内容 内容 内容 内容 内容 没有空格！ 第二行分割表头和内容。有一个就行，为了对齐，多加了几个 文字默认居左 两边加：表示文字居中 右边加：表示文字居右 注：原生的语法两边都要用 | 包起来。此处省略 文字高亮1“&#x3D;&#x3D;高亮&#x3D;&#x3D;” 在线编辑器里面这么使用 展示：==高亮部位== 代码 单行代码import pandas as pd 代码块1（~键构成）12345#include &lt;stdio.h&gt;`int main(void)&#123; printf(\"Hello world\\n\");&#125; 二、写文章图床的搭建MK编辑器选择","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://blog.wztlink1013.com/tags/markdown/"}]},{"title":"Java-chapter1-8基础知识","slug":"Language/JAVA-chapter1-8基础知识","date":"2020-01-16T06:15:47.000Z","updated":"2020-07-12T11:56:05.182Z","comments":true,"path":"2020/01/16/Language/JAVA-chapter1-8基础知识/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/16/Language/JAVA-chapter1-8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"一、关于JAVA何为JAVA c是面向过程的语言。c++和Java都是面向对象的。在c中没有类或者对象的概念。 java运行在虚拟机上，号称与平台无关。也就是你开发的java程序无论是unix，linux还是windows都可以正常运行。但是实际上这是一个良好的愿望，实际跨平台时还会有各种各样的问题。c和c++都是直接编译成可执行文件，是否能跨平台主要看你用到的编译器特性是否有多平台支持。 因为c和c++是直接编译成可执行文件，所以运行效率要比java高。至于c和c++哪个更快，两种语言的拥趸已经吵了很多年。 java因为是运行在虚拟机上，不需要考虑内存管理和垃圾回收机制。也是就你可以声明一个对象而不用考虑释放他，虚拟机帮你做这事情。而c和c++语言本身没有多少内存管理的概念，写c和c++程序如果用到指针就一定要考虑内存申请和释放。内存泄漏是c和c++最头疼的问题。 代码重用：java中有一个根类object，所有的类都是其子类，通过这种方式将容器和算法分离，实现一种操作作用于多种对象，提高代码重用。c++中没有总根对象，但是c++提供了另一个更强大的功能“模板”，同样高效地实现了一种操作作用于多种对象，提供了高效的代码重用方法。 数据结构：java内建了丰富的数据结构：列表，集合等等（很久没用java了，有些记不太清）。而c++则用“模板”同样提供了各种数据结构（容器）。 c语言在一些比较低层，和硬件打交道的地方用得比较多。另外很多开源软件由于unix/linux开发习惯也大多采用c来开发。Java是现在最流行的开发语言，c++比起java稍稍不那么流行一些，但是功能很强大。如能深入掌握，可以写出兼顾效率和美观的优秀代码。 多语言简略对比 Ideas are cheap, show me the code 学到了，学到了，以后就这么怼别人~ 12345代码块：python通过缩进来确定代码块复数：java有，python有，ccplusplus没有python：相对于java，python就是java的压缩版本包、接口、API，我觉得java也好，python也好，正是因为这些模块组件化，才使得这些语言好很好的的健壮性 二、数据类型；运算符；表达式基本数据类型 常量 标识符和变量 好的命名以及编程习惯：①小/大驼峰命名 ②匈牙利命名 ③下划线命名 https://blog.csdn.net/ZCF1002797280/article/details/51495229 https://blog.csdn.net/z_h_s/article/details/24007249 数据类型：JAVA中除了下面8种数据类型其他的都是以对象（或者说类的实例）存在的 String：熟悉常用的函数 boolean（java中需要全部写出来）：会打印出来true false 数值型 关于byte数据类型的二进制运算：反码、补码、原码 运算符和表达式 赋值语句，赋值表达式 输入输出 输入输出，要有记得清除的空间，close的意识！3. 数值运算符4. 逻辑运算符 &amp;&amp; || ! ^(异或：相同才为假) &amp; | ^ 位运算符：会先化成二进制对二进制码进行分析 运算符的优先级 三、三大基本结构顺序结构选择结构 if(){} else{} switch 条件表达式循环结构 while () {} do {} while (); for () {} 关于break（跳出该级别的for循环）和continue（后面的语句不读） 关于return 关于增强的for循环，在模板章节，配合vector使用，并发控制，高效使用缺点：看不见索引 四、方法五、数组创建及初始化声明数组，推荐使用前者，直观。给出数组大小初始化和C是差不多的 相关属性 是一个对象，有自己的属性自己的方法 String里面长度length有()，也就是String里面是方法，而数组没有括号()，理解为成员变量/属性，而不是方法（封装好了许多功能，体现出语言优越性） 创建好编译器会有初始值 相关操作相关注意：引用输入的时候，可以用下面的方式，避免类当中名字冲突的问题 数组的值传递 java核心之一 数组名（数组地址）作为函数参数 java当中是值传递的，没有引用没有指针的概念，所以在做函数参数当中，一直都是值传递，python也是。 Array类 Array类当中的几个数组有关的函数：sort()/parallelSort()、binarySearch()、equals()、fill()、toString() Binary Search二分查找（事先得排好序） import java.util.Arrays;","categories":[{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://blog.wztlink1013.com/tags/JAVA/"}]},{"title":"Hexo同时结合Coding Pages和GitHub Pages双线部署实现国内外访问","slug":"Hexo/Hexo-CodingPages-GitHubPages双线部署","date":"2020-01-06T11:36:05.000Z","updated":"2020-07-12T11:38:13.746Z","comments":true,"path":"2020/01/06/Hexo/Hexo-CodingPages-GitHubPages双线部署/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/06/Hexo/Hexo-CodingPages-GitHubPages%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2/","excerpt":"个人博客网页搭建全过程！（持续更新）","text":"个人博客网页搭建全过程！（持续更新） 零、前言本文章没有太多整理，只是自己搭建过程中自己的备忘总结，日后会整理自己所有使用心得 一、环境安装与配置Node的下载以及安装下载Node.js并安装 目的：安装博客框架，渲染主题等 环境变量的配置 安装hexo npm install -g hexo-cli 安装过程中注意文件夹的本地性|容易出错！ 博客页面GitHub Page申请 安装git【参考“git常用命令总结”博客一文】 在github上申请github pages 创建仓库 wztlink1013.github.io 二、搭建博客创建并初始化文件夹 这里面所有文件就相当于所搭建博客网页所有源文件 进入文件打开git bash输入hexo init出现INFO Start blogging with Hexo!则证明初始化成功，此时blog文件夹里面会有一些站点文件 12345678node_modules：各种插件的安装文件夹scaffolds：模板文件夹（new的对象的模板）source：资源文件夹themes：主题文件夹（相当于“衣裳”）_config.yml：站点配置文件package.json：应用程序的信息…… 创建主题或fork主题框架 方法1：在blog文件夹里面的themes文件里面clone【git如何克隆前面文章有】 https://github.com/wztlink1013/wztlink1013.github.io.git 方法2：直接在GitHub网页上下载zip文件，然后再放到themes文件夹里面 初级配置主题 以【忧郁的弟弟gal】和【melody】两个文档为主进行配置，其他的小细节谷歌/百度搜索解决 在blog文件夹下下载相关npm插件 12345678910①npm install hexo-renderer-sass --save ②npm install hexo-renderer-scss --save③npm install hexo-generator-json-content --save或cnpm install hexo-renderer-sass --savecnpm install hexo-renderer-scss --save或yarn add hexo-renderer-sassyarn add hexo-renderer-scss①②目的：将.scss样式文件渲染成最后的style.css文件 站点文件_config.yml下添加123456789101112131415161718192021jsonContent: dateFormat: MM-DD pages: title: true text: true path: true date: true excerpt: true preview: true posts: title: true text: true path: true date: true excerpt: true tags: [&#123; name: tag.name, slug: tag.slug, permalink: tag.permalink &#125;] preview: true 设置两个必须页面（gal下题设设置了search、404这两个）12hexo new page &quot;search&quot; &#x2F;&#x2F; 搜索功能的必须步骤hexo new page &quot;404&quot; &#x2F;&#x2F; 开启404页面 12hexo new page categories &#x2F;&#x2F;分类hexo new page comment &#x2F;&#x2F;留言板 相关命令12345678910111213141516171819202122常用命令：简写命令&#x3D;&gt;原有形式命令hexo n &quot;博客名称&quot; &#x3D;&gt; hexo new &quot;博客名称&quot; hexo p &#x3D;&gt; hexo publishhexo g &#x3D;&gt; hexo generate #生成hexo s &#x3D;&gt; hexo server #启动服务预览hexo d &#x3D;&gt; hexo deploy #部署服务器相关命令：hexo server #Hexo 会监视文件变动并自动更新，无须重启服务器。【预览：http:&#x2F;&#x2F;localhost:4000&#x2F;】hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义IP【预览：http:&#x2F;&#x2F;localhost:4000&#x2F;】hexo clean #清除缓存，网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署hexo deploy --message &quot;哈哈，hexo deploy --message 双引号内容就可以提交commit信息了&quot;【更新】1. 部署命令不能简写了，因为下载了豆瓣的相关插件，只能hexo deploy2. 将博客根目录源代码备份到git仓库中命令：hexo b或者hexo backup三、主题个性化设置主要参考上述的两个文档【忧郁的弟弟gal】和【melody】，在此记录下自己的相关自定义配置 博客logo【暂未设计】图片的处理【七牛云绑定问题】处理的目的就是通过链接方式减小源文件的渲染量，使网页打开速度更快 图片压缩网站：tinypng✓ 图片存储：七牛✓ 图片存储：cloudinary 存完之后似乎给我删了，但是文章链接似乎一直有效…… 图片存储：外链工厂 七牛：ghostsblog文件夹 background[1~9]：背景滑动图片jpg preview[1~6]：文章随机预览图片jpg touxiang：博客头像png 各类社交化等图标处理 图标icon中文网 评论和流量 Leancloud valine评论系统 可以，可以想办法改改评论栏的界面 gitment：✓ 将所有评论放在GitHub的某个仓库的issue，有一个很大的不足就是只能是github用户评论 百度统计 客流量后台相关数据 隐藏指定文章插件 hexo-hide-posts 百度谷歌站点的开放 百度站点 谷歌站点 参考资料博客 如何让百度谷歌搜索道自己的网页 同上 删掉blog目录下的public文件下的baidu，sitmap两个文件；index下的首行文件也删掉 在head.ejs中放了自动推送的例子，注意。url也换了com域名 绑定域名添加文章目录写长篇博客文章的时候，甚至是经常要添加内容的文章时候，文章的确需要一个目录指引，但是该主题似乎并没有内置这些配置，但可以通过插件方式添加该模块 在博客文件夹下下载插件npm install hexo-toc-dllcn --save（注意这个版本是新的，不能下hexo-toc版本） 在博客根目录下添加配置1234567mdtoc:maxdepth: 3class: tocdecodeEntities: falseanchor: symbol: &#39;#&#39; style: header-anchor 以上具体参考 https://www.npmjs.com/package/hexo-toc-dllcn hexo-toc-dllcn GitHub https://imys.net/20150514/hexo-toc.html https://cloud.tencent.com/developer/article/1144737 另外：要先把根目录下的markdown渲染器删掉，然后下hexo-renderer-markdown-it具体参考 另外：以“#”或“##”为标题的时候（#的链接不能用，#的子标题##可以），标题内最好不要有特殊符号，自己总结就是，大小写不能同时又，括号好像也不行，总之尽量为中文最好， 添加百度统计 百度统计入口 将所提取的代码放到baidustatistic.ejs（新建）中 123456789&lt;script&gt; var _hmt &#x3D; _hmt || []; (function() &#123; var hm &#x3D; document.createElement(&quot;script&quot;); hm.src &#x3D; &quot;https:&#x2F;&#x2F;hm.baidu.com&#x2F;hm.js?b6def8dfc52aa6afd36da773f206fe88&quot;; var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s); &#125;)();&lt;&#x2F;script&gt; footer.ejs文件下添加 123&lt;% if (theme.baidustatistic.enable)&#123; %&gt;&lt;%- partial(&#39;baidustatistic&#39;) %&gt;&lt;% &#125; %&gt; 站点主题配置文件下添加 1234# 百度统计baidustatistic: enable: true siteid: b6def8dfc52aa6afd36da773f206fe88 最后回到百度入口验证即可 参考文章 参考博文1 参考博文2 添加播放器 一如既往，下个插件，npm install --save hexo-tag-aplayer（还是在博客文件夹目录下） 然后去网易音乐取自己想要的歌曲外链复制html代码 在sidebar.ejs文件添加到自己想要的位置即可 如果在文章中添加的话，同样原理 原理：利用了html中的iframe标签/ 参考文章 https://www.zhyong.cn/posts/5d26/ https://deletelibrary.com/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90.html 文章热度统计 配置如wiki上文档配置即可 补充：一定要新建一个class，而且命名一定要为Counter leancloud详细部署 四、BLOG2.0计划参考优秀blog 喵绪~ 域名 绑定且指向github.io之后，马上提交站点地图 百度站点地图：百度屏蔽了GitHub，托管到coding上，等coding和腾讯更新完…… 谷歌站点地图服务器 缘由：github网络不稳定，体验差，迁移到服务器 阿里云 云服务器备案服务号的申请 https://beian.aliyun.com/order/productVerify.htm#/?_k=2387t8 https://blog.csdn.net/weixin_34417635/article/details/89651872百度谷歌站点和codinggithub双线部署【coding不能注册！waiting···】 https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/添加豆瓣【没用】 读书、电影 要自定义两个单独页面双github博客运行【X】 利用github做一个图床【未成功】 picgo 问题已解决，但是有点小问题，链接点进去是无效链接，之后再试试！ 展示不出来 加快网页访问速度使用一个 JS 脚本实现网站预加载，提升页面加载速度：instant.page 使用来必力评论系统自带，comments.ejs文件中，具体看来必应官网 20200424导言github+hexo+coding 部署以及从中的一些操作的全过程还没有全部记录，等这学期学完，自己要好好总结一下 gitbook对于hexo写文章，的确是一个不错的选择，但是平时的零碎知识总是不能很好的记录下来，之前的博客园，的确感觉还行，但是还是麻烦，加上，博客园的markdown界面，着实不能很好地接受， gitbook首先要fanqiang注册一个账号（谷歌或者github），这里面的账号崩塌，以后再调侃吧~ 注册好之后，要连接github仓库，由于自己的账号在崩塌的时候出故障了，所以无奈只能向其他的方法了，突然想到组织，新建一个组织，最高权限管理员为wztlink1013，其次邀请wzutao进组织并且给其仅次于最高管理员权限，然后再让gitbook绑定wzutao的仓库，这样我的终端对原仓库的推送提交丝毫不妨碍文件的推送，nice！！这样的目的就是，只要仓库的文件变动，gitbook那方面自动更新。 下面就是在电脑终端的配置，用npm下载gitbook，就和搭建hexo差不多，更为简单 我将gitbook文件夹放在根文件夹目录里面，这样的好处就是可以随同博客源文件一起利用backup备份到github备份厂库上， 平时写文章，一个可以直接在电脑上写，然后直接按照git push情况推送至仓库（要注意要先pull哦） 还有就是直接在网页点击github按钮，进入仓库，在线编辑，就比如上机情况记录零碎知识， 域名的解析重定向https://mybook.wztlink1013.com阿里云域名解析 在wztlink1013.github.io仓库中source文件夹里面新建一个文件夹gitbook， 不定时将源文件夹里面的gitbook里面的_book文件夹里面的文件放进去， 其实这样的话，意义就在于有可能会引用某个网页的知识，（同时注意，这样做要在根文配置文件里面注释那个source文件夹里面的gitbook文件夹，让其跳过渲染。参考了） 临时更新、上面画删除线的方法可以摒弃之，有一个更好的方法，就是在根目录下的gitbook文件夹里面进行gitbook serve进行命令升级，渲染html文件到指定文件夹里面命令为gitbook serve ./ ../source/gitbook（关于相对路径的上一级文件读取方式https://blog.csdn.net/dahuzix/article/details/9276549） 那么小总结一下就是，或许根本就不需要gitbook的域名使用，直接渲染到source文件夹里面即可（根目录配置文件，跳过即可），按照这个道理，可以创建无数个类似子节点【写一个js代码，用来美化这个文件夹，虽然跳过渲染，但是如果文件夹里里面index周边存在js代码，可能还是会改善index的页面风格，】 不过今天还是学到了gh-pages相关知识，每一个项目都是可以直接跟着wztlink1013.github.io的二级域名，只是不知道会不会和域名解析矛盾以后尝尝鲜参考 还有，有空搭建一个ssr，今天算是折了~ 单方面觉得阮一峰的网站就是这样，首先是www.wztlink1013.com的index是一个多级路口的概念，然后每个路口都是一个单独的文件夹，不过这里要注意如果要考虑SEO的画，貌似就不能跳过该文件不渲染，二是利用，每篇markdown最上面的---内容---来跳过，以后尝尝鲜 那按照这个道理，下载相关gitbook插件是不是就可以直接在渲染后的改进（这轮子造的nice啊） gitbook根目录下创建一个新文件book.json，然后在里面写入一些配置，然后再输入命令gitbook install，然后预览gitbook serve ./ ../source/gitbook 需要注意，插件中有一个生成站点地图的插件，以后再百度站点地图和谷歌站点地图中，追加这个书籍的站点地图！ 另外，应该是每建成一本书就会进行以上相应的所有操作。 hexo-auto-category分类优化插件自动生成目录插件，最方便的使用就是在_post文件夹里面的知识目录文件夹下，直接新建md文件即可，有以下需要了解 新建md文件，什么都不加，直接写文章也可以 貌似里面的categories格式强制为以下格式12categories: - Hexo 【针对知识相关的博客】新建md文档，里面什么都不加 【针对教程之类的博客】新建md文档，里面不加日期、目录、标题（如果想要自己更好的标题就加）其他的按需加上","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/tags/Hexo/"}]},{"title":"Hexo-Volantis模块化组件——meta和widget","slug":"Hexo/Hexo-Volantis模块化","date":"2020-01-04T13:23:23.000Z","updated":"2020-07-12T11:50:57.582Z","comments":true,"path":"2020/01/04/Hexo/Hexo-Volantis模块化/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/04/Hexo/Hexo-Volantis%E6%A8%A1%E5%9D%97%E5%8C%96/","excerpt":"","text":"Front-matter览表front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量。更多请见 Hexo 官方文档：#front-matter 字段 含义 值类型 默认值 备注 layout 布局模版 String - 有list、page、post三种 title 页面标题 String - seo_title 网页标题 String page.title 浏览器栏显示的 short_title 页面标题 String page.title 在group列表中显示 date 创建时间 Date 文件创建时间 updated 更新日期 Date 文件修改时间 permalink 覆盖文章网址 String - 一般用于转载文章【title: [转]XXX】【然后加一张图片】 music 内部音乐控件 [Object] - 【三个必选参数】https://aplayer\\.js\\.org/\\#/zh\\-Hans/ robots robots String - 【？？？】 keywords 页面关键词 String - description 页面描述、摘要 String - cover 是否显示封面 Bool true meta 文章或页面的meta信息 Bool, Array theme.layout.*.meta 【暂时这么多】title，author，date,updated,category,top,counter,wordcount,tags,share,btns, sidebar 页面侧边栏 Bool, Array theme.layout.*.sidebar 【自定义设计】 - blogger - xiaoheiban - donate - list_essay - references - related_repos - dao_hang - page_1 - group-1 - copyright - related_posts - tagcloud - category - toc body 页面主体元素 Array theme.layout.on_page.body 【默认[article, comments]】【自定义[article, related_posts, comments]】 mathjax 是否渲染公式 Bool, String false thumbnail 缩略图 String false 【thumbnail: https://wztlink1013\\.coding\\.net/p/figure/d/figure/git/raw/master/20200519115134\\.png】 icons 图标 Array [] 【icons: [fas fa-fire red, fas fa-star green]归档页面显示，参数red / blue / green / yellow / orange / theme / accent】 layout:post时特有的字段： 字段 含义 值类型 默认值 author 文章作者 [Object] config.author categories 分类 String, Array - tags 标签 String, Array - toc 是否生成目录 Bool true top 是否置顶 Bool false author 字段 含义 值类型 默认值 name 作者名 String config.author avatar 头像 String config.avatar url 链接 String config.url music 字段 是否必须 值类型 server 是 netease, tencent, kugou, xiami, baidu type 是 song, playlist, album, search, artist id 是 song id / playlist id / album id / search keyword 特定widget参数12345678910111213pid: hahareferences: - name: Apple Developer Documentation url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39; - name: Apple Developer Documentation url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;related_repos: - name: Apple Developer Documentation url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;group: group-1order: 16 标题居中让meta只保留下面一个参数，则标题居中 1234---meta: header: [centertitle]--- end1234567891011121314151617181920212223242526272829303132333435363738394041424344# 基本信息title: Hexo-Volantis-meta-widget测试categories: [Hexo]tags: [Hexo]date: 2020-01-04 21:23:23description: 这是测试主题各个属性文章摘要meta: header: [title,author,category,date,wordcount,counter,top] footer: [updated,tags,btns,share] # 如果是page页面的话，添加这个可以显示，post的设置在_data里面的layput.yml里面 article_footer: [references,related_repos,donate,related_posts,copyright] sidebar: [blogger,xiaoheiban,map,donate,list_essay,dao_hang,page_tongyong,group-Hexo,related_posts,tagcloud,category,toc]# 参考资料 &amp; 链接仓库references:- name: 参考资料1 url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;- name: 参考资料2 url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;related_repos:- name: 本项目GitHub仓库 url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;# 系列文章索引group: group-Hexo order: 16# 通用页面pid: tongyong# 显示的页脚按钮btns: repo: &#39;https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#39; bug: &#39;https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;&#39; doubt: &#39;https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;&#39; idea: &#39;https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;&#39;# 侧边小图片thumbnail: https:&#x2F;&#x2F;wztlink1013.coding.net&#x2F;p&#x2F;figure&#x2F;d&#x2F;figure&#x2F;git&#x2F;raw&#x2F;master&#x2F;20200519115134.png# 侧边音乐按钮music: server: netease # netease, tencent, kugou, xiami, baidu type: song # song, playlist, album, search, artist id: 16846091 # song id &#x2F; playlist id &#x2F; album id &#x2F; search keyword# 是否显示封面cover: true meta库12meta: header: [title,author,category,date,wordcount,counter,top] 1footer: [updated,tags,btns,share] 1article_footer: [copyright,donate,related_posts] widget库主题配置中widget text小黑板访客地图 基本上放在首页 qrcode二维码/图片展示 页脚可以显示；sidebar显示 list侧边栏列表 “文集” references参考资料 &amp; 相关GitHub仓库 文章脚步；sidebar部位 group系列文章 grid通用导航 page通用页面 copyright文章版权 文章页脚、sidebar部位（基本不用） related_posts相关文章 文章页脚、sidebar部位","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/tags/Hexo/"}]},{"title":"Hello World","slug":"Hexo/HelloWorld","date":"2020-01-04T12:32:23.000Z","updated":"2020-07-12T11:33:12.224Z","comments":true,"path":"2020/01/04/Hexo/HelloWorld/","link":"","permalink":"https://blog.wztlink1013.com/2020/01/04/Hexo/HelloWorld/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/tags/Hexo/"}]}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/categories/Hexo/"},{"name":"Environment","slug":"Environment","permalink":"https://blog.wztlink1013.com/categories/Environment/"},{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/categories/DataAnalysis/"},{"name":"Web","slug":"Web","permalink":"https://blog.wztlink1013.com/categories/Web/"},{"name":"Bug","slug":"Bug","permalink":"https://blog.wztlink1013.com/categories/Bug/"},{"name":"Language","slug":"Language","permalink":"https://blog.wztlink1013.com/categories/Language/"},{"name":"DataBase","slug":"DataBase","permalink":"https://blog.wztlink1013.com/categories/DataBase/"},{"name":"MachingLearning","slug":"MachingLearning","permalink":"https://blog.wztlink1013.com/categories/MachingLearning/"},{"name":"DataStructure","slug":"DataStructure","permalink":"https://blog.wztlink1013.com/categories/DataStructure/"},{"name":"OS","slug":"OS","permalink":"https://blog.wztlink1013.com/categories/OS/"},{"name":"Spider","slug":"Spider","permalink":"https://blog.wztlink1013.com/categories/Spider/"},{"name":"PostProduction","slug":"PostProduction","permalink":"https://blog.wztlink1013.com/categories/PostProduction/"}],"tags":[{"name":"yuque","slug":"yuque","permalink":"https://blog.wztlink1013.com/tags/yuque/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.wztlink1013.com/tags/hexo/"},{"name":"DataAnalysis","slug":"DataAnalysis","permalink":"https://blog.wztlink1013.com/tags/DataAnalysis/"},{"name":"bug","slug":"bug","permalink":"https://blog.wztlink1013.com/tags/bug/"},{"name":"qrcode","slug":"qrcode","permalink":"https://blog.wztlink1013.com/tags/qrcode/"},{"name":"myqr","slug":"myqr","permalink":"https://blog.wztlink1013.com/tags/myqr/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.wztlink1013.com/tags/Hexo/"},{"name":"JAVA","slug":"JAVA","permalink":"https://blog.wztlink1013.com/tags/JAVA/"},{"name":"git","slug":"git","permalink":"https://blog.wztlink1013.com/tags/git/"},{"name":"C++","slug":"C","permalink":"https://blog.wztlink1013.com/tags/C/"},{"name":"C","slug":"C","permalink":"https://blog.wztlink1013.com/tags/C/"},{"name":"Eclipse","slug":"Eclipse","permalink":"https://blog.wztlink1013.com/tags/Eclipse/"},{"name":"tomcat","slug":"tomcat","permalink":"https://blog.wztlink1013.com/tags/tomcat/"},{"name":"Servlet","slug":"Servlet","permalink":"https://blog.wztlink1013.com/tags/Servlet/"},{"name":"SQL","slug":"SQL","permalink":"https://blog.wztlink1013.com/tags/SQL/"},{"name":"DataBase","slug":"DataBase","permalink":"https://blog.wztlink1013.com/tags/DataBase/"},{"name":"ANN","slug":"ANN","permalink":"https://blog.wztlink1013.com/tags/ANN/"},{"name":"Python","slug":"Python","permalink":"https://blog.wztlink1013.com/tags/Python/"},{"name":"PicGo","slug":"PicGo","permalink":"https://blog.wztlink1013.com/tags/PicGo/"},{"name":"CDN","slug":"CDN","permalink":"https://blog.wztlink1013.com/tags/CDN/"},{"name":"CMD","slug":"CMD","permalink":"https://blog.wztlink1013.com/tags/CMD/"},{"name":"OS","slug":"OS","permalink":"https://blog.wztlink1013.com/tags/OS/"},{"name":"scrapy","slug":"scrapy","permalink":"https://blog.wztlink1013.com/tags/scrapy/"},{"name":"spider","slug":"spider","permalink":"https://blog.wztlink1013.com/tags/spider/"},{"name":"python","slug":"python","permalink":"https://blog.wztlink1013.com/tags/python/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://blog.wztlink1013.com/tags/matplotlib/"},{"name":"pandas","slug":"pandas","permalink":"https://blog.wztlink1013.com/tags/pandas/"},{"name":"seaborn","slug":"seaborn","permalink":"https://blog.wztlink1013.com/tags/seaborn/"},{"name":"bokeh","slug":"bokeh","permalink":"https://blog.wztlink1013.com/tags/bokeh/"},{"name":"numpy","slug":"numpy","permalink":"https://blog.wztlink1013.com/tags/numpy/"},{"name":"beautifulsoup","slug":"beautifulsoup","permalink":"https://blog.wztlink1013.com/tags/beautifulsoup/"},{"name":"sklearn","slug":"sklearn","permalink":"https://blog.wztlink1013.com/tags/sklearn/"},{"name":"scikit-learn","slug":"scikit-learn","permalink":"https://blog.wztlink1013.com/tags/scikit-learn/"},{"name":"CSS","slug":"CSS","permalink":"https://blog.wztlink1013.com/tags/CSS/"},{"name":"HTML","slug":"HTML","permalink":"https://blog.wztlink1013.com/tags/HTML/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.wztlink1013.com/tags/JavaScript/"},{"name":"Pycharm","slug":"Pycharm","permalink":"https://blog.wztlink1013.com/tags/Pycharm/"},{"name":"Anaconda","slug":"Anaconda","permalink":"https://blog.wztlink1013.com/tags/Anaconda/"},{"name":"jupyter","slug":"jupyter","permalink":"https://blog.wztlink1013.com/tags/jupyter/"},{"name":"硬件","slug":"硬件","permalink":"https://blog.wztlink1013.com/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"机器学习","slug":"机器学习","permalink":"https://blog.wztlink1013.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"MATLAB","slug":"MATLAB","permalink":"https://blog.wztlink1013.com/tags/MATLAB/"},{"name":"markdown","slug":"markdown","permalink":"https://blog.wztlink1013.com/tags/markdown/"}]}