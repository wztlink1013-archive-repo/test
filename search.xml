<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>yuque/测试语雀文章</title>
      <link href="/2020/07/14/yuque/%E6%B5%8B%E8%AF%95%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0/"/>
      <url>/2020/07/14/yuque/%E6%B5%8B%E8%AF%95%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、语雀下载"><a href="#一、语雀下载" class="headerlink" title="一、语雀下载"></a>一、语雀下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yuque-hexo --save</span><br></pre></td></tr></table></figure><h2 id="二、语雀配置"><a href="#二、语雀配置" class="headerlink" title="二、语雀配置"></a>二、语雀配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">"yuqueConfig": &#123;</span><br><span class="line">    "baseUrl": "https://www.yuque.com/api/v2",</span><br><span class="line">    "login": "nicaibandishuqing",</span><br><span class="line">    "repo": "or0hey",</span><br><span class="line">    "postPath": "source/_posts/yuque",</span><br><span class="line">    "mdNameFormat": "title",</span><br><span class="line">    "adapter": "markdown"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "clean": "hexo clean",</span><br><span class="line">    "build": "hexo generate",</span><br><span class="line">    "server": "hexo server",</span><br><span class="line">    "deploy": "hexo deploy",</span><br><span class="line">    "clean:yuque": "yuque-hexo clean",</span><br><span class="line">    "publish": "npm run clean &amp;&amp; npm run deploy",</span><br><span class="line">    "dev": "hexo s",</span><br><span class="line">    "sync": "DEBUG=yuque-hexo.* yuque-hexo sync",</span><br><span class="line">    "reset": "npm run clean:yuque &amp;&amp; npm run sync"</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yuque </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用Token连接</title>
      <link href="/2020/07/08/Environment/git%E4%BD%BF%E7%94%A8Token%E8%BF%9E%E6%8E%A5/"/>
      <url>/2020/07/08/Environment/git%E4%BD%BF%E7%94%A8Token%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、应用"><a href="#一、应用" class="headerlink" title="一、应用"></a>一、应用</h2><p>多个终端使用，而且没必要配置SSH连接的情况，可以使用GitHub Token来连接使用。还有就是使用GitHub Actions时候用Token情况较SSH方便。</p><p>不同的托管平台使用语法会有差异，在此记录下GitHub、Coding、Gitee的使用</p><h2 id="二、GitHub"><a href="#二、GitHub" class="headerlink" title="二、GitHub"></a>二、GitHub</h2><p>GitHub生成一个Token：<strong><strong><strong><strong>***</strong></strong></strong></strong></p><p>使用SSH情况：<code>git clone https://github.com/wztlink1013/blog3.0.git</code></p><p>使用Token情况：<code>https://x-access-token:**************@github.com/wztlink1013/blog3.0.git</code></p><h2 id="三、Coding"><a href="#三、Coding" class="headerlink" title="三、Coding"></a>三、Coding</h2><p>在个人设置中设置一个访问令牌</p><ul><li>令牌用户名：####</li><li>令牌Token：<strong><strong>*****</strong></strong></li></ul><p>使用SSH情况：<code>https://e.coding.net/wztlink1013/project/repo.git</code><br>使用令牌情况：<code>https://####:***********@e.coding.net/wztlink1013/project/repo.git</code></p><h2 id="四、Gitee"><a href="#四、Gitee" class="headerlink" title="四、Gitee"></a>四、Gitee</h2><p>头像设置中申请私人令牌：<strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></p><p>使用SSH情况：<code>https://gitee.com/user/repo.git</code></p><p>使用Token情况：<code>https://oauth2:**********@gitee.com/user/repo.git</code></p><h2 id="五、GitHub-Actions中的使用"><a href="#五、GitHub-Actions中的使用" class="headerlink" title="五、GitHub Actions中的使用"></a>五、GitHub Actions中的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Github_Pages:  github.com/wztlink1013/wztlink1013.github.io</span><br><span class="line">Github_Token:  <span class="variable">$&#123;&#123;  secrets.token_GithubAPI  &#125;</span>&#125;</span><br><span class="line"></span><br><span class="line">git  push  --force  --quiet  <span class="string">"https://<span class="variable">$&#123;Github_Token&#125;</span>@<span class="variable">$&#123;Github_Pages&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Coding_Pages:  e.coding.net/wztlink1013/wztlink1013.git</span><br><span class="line">Coding_Token:  <span class="variable">$&#123;&#123;  secrets.token_CodingAPI  &#125;</span>&#125;</span><br><span class="line">Coding_Username:  <span class="variable">$&#123;&#123;  secrets.Username_Coding  &#125;</span>&#125;</span><br><span class="line"></span><br><span class="line">git  push  --force  --quiet  <span class="string">"https://<span class="variable">$&#123;Coding_Username&#125;</span>:<span class="variable">$&#123;Coding_Token&#125;</span>@<span class="variable">$&#123;Coding_Pages&#125;</span>"</span></span><br></pre></td></tr></table></figure><!--stackedit_data:eyJoaXN0b3J5IjpbNDkzNTkyNzA1LC0xNTM0NDQwNzI1XX0=-->]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Modeling-数据挖掘</title>
      <link href="/2020/07/07/DataAnalysis/Modeling-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
      <url>/2020/07/07/DataAnalysis/Modeling-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</url>
      
        <content type="html"><![CDATA[<h2 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h2><ul><li>数据的获取：本地获取、网络爬虫</li><li>数据的呈现：词云图<h2 id="数据的处理"><a href="#数据的处理" class="headerlink" title="数据的处理"></a>数据的处理</h2><h3 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h3></li><li>数据的相似相异性<br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbMTQ3NzQxNTczMiwtMTk0MDQyNDMxN119</li><li>-&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-开发大作业要求</title>
      <link href="/2020/06/12/Web/JavaWeb%E5%BC%80%E5%8F%91%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%A6%81%E6%B1%82/"/>
      <url>/2020/06/12/Web/JavaWeb%E5%BC%80%E5%8F%91%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="一、大作业架构要求"><a href="#一、大作业架构要求" class="headerlink" title="一、大作业架构要求"></a>一、大作业架构要求</h2><p>基于JSP技术完成一个WEB管理系统的开发。系统内容按以下要求完成</p><h3 id="1-网站目录管理"><a href="#1-网站目录管理" class="headerlink" title="1.网站目录管理"></a>1.网站目录管理</h3><p>建立一个完整的总文件夹，所有系统内容都要包含在建立的这个文件夹内，系统各类元素文件在总文件夹中以子文件夹形式分类清楚。（如图片都放在子文件夹image里，html页都放在pages子文件夹内，数据库文件放在DB文件夹内）</p><h3 id="2-系统前台设计（JSP设计）"><a href="#2-系统前台设计（JSP设计）" class="headerlink" title="2.系统前台设计（JSP设计）"></a>2.系统前台设计（JSP设计）</h3><p>a)页面设计美观，使用方便。</p><p>b)如所选题目要求功能较少，需要自己扩充其它功能。</p><p>c)使用MVC模式：即JavaBean+JSP+Servlet技术。</p><h3 id="3-系统后台管理："><a href="#3-系统后台管理：" class="headerlink" title="3.系统后台管理："></a>3.系统后台管理：</h3><p>普通用户的主要功能模块：登录与注册等。</p><p>管理员的主要功能模块：用户信息的管理（添加、删除、修改、查询）。</p><h3 id="4-数据库设计"><a href="#4-数据库设计" class="headerlink" title="4.数据库设计"></a>4.数据库设计</h3><p>用MySql创建后台数据库，并完善数据库的结构和数据。数据库至少包含：用户信息表、相关业务数据表等。</p><h2 id="二、大作业实验报告要求"><a href="#二、大作业实验报告要求" class="headerlink" title="二、大作业实验报告要求"></a>二、大作业实验报告要求</h2><p>附带一份课程设计报告，也放在总文件夹中。</p><p>(1)    设计报告参照以下提纲书写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i.需求分析。</span><br><span class="line">ii.数据库结构设计。</span><br><span class="line">iii.程序结构框图。</span><br><span class="line">iv.程序功能说明。</span><br><span class="line">v.系统实现界面。</span><br><span class="line">vi.总结及体会。</span><br></pre></td></tr></table></figure><p>(2)    设计报告按照以下格式打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a)打印用纸：A4</span><br><span class="line">b)页面设置：上：3.5cm,下:2.5 cm,左:3.0 cm,右:2.4 cm,页眉：2.5 cm，页脚：1.8 cm，行间距：1.25倍行距。</span><br><span class="line">c)字体、字号：</span><br><span class="line">   大标题：黑体、三号；</span><br><span class="line">   小标题：黑体、四号；</span><br><span class="line">   正文部分：宋体、小四；</span><br></pre></td></tr></table></figure><p>(3)    作业提交要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a)作品（1组1份）保存到文件夹以压缩文件的形式上交，文件命名：作品名+班级1+学号1+姓名1+班级2+学号2+姓名2...，上交后应自备一份备份，以备教师手中的作品因故无法正常读取时补交。</span><br><span class="line">b)提交网页设计报告电子版（1组1份），文件命名：报告++班级1+学号1+姓名1+班级2+学号2+姓名2...，上交后应自备一份备份，以备教师手中的作品因故无法正常读取时补交。</span><br><span class="line">c)做好自己作品的著作权保护，如果发现抄袭或者雷同现象，一律评为不及格。</span><br><span class="line">d)作品演示之前提交设计报告电子版和作品以班级为单位，由课代表收齐，发送至课代表或U盘拷贝给任课老师，时间预计在教学的17-18周。设计报告纸质版（以班级为单位，由课代表收齐，统一交到学院楼402），纸质版的提交时间根据学校开学情况再行通知。</span><br></pre></td></tr></table></figure><h2 id="三、展示要求"><a href="#三、展示要求" class="headerlink" title="三、展示要求"></a>三、展示要求</h2><h3 id="演示时间安排"><a href="#演示时间安排" class="headerlink" title="演示时间安排"></a>演示时间安排</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">演示时间另行通知，预计17-18周上课时间。</span><br></pre></td></tr></table></figure><h3 id="汇报要求"><a href="#汇报要求" class="headerlink" title="汇报要求"></a>汇报要求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a)6月4日前，确定分组情况并上报课代表汇总。</span><br><span class="line">b)演示时间：10分钟&#x2F;组，包括6分钟展示，4分钟答疑。</span><br><span class="line">c)材料准备：打印评分表（1人1份）、填写完成的设计报告（1组1份）（见下页），同一小组一并装订，汇报前上交。</span><br><span class="line">d)汇报顺序：随机抽取。组长首先介绍分工，然后各成员分别介绍各自工作。</span><br></pre></td></tr></table></figure><h3 id="任务安排"><a href="#任务安排" class="headerlink" title="任务安排"></a>任务安排</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1)项目分组完成（每组1-3人）。每人承担项目的一部分任务，如：总体设计、数据库设计、代码实现、美工、文档等。每组设一位组长，组长负责总体设计和最终代码的整合。负责数据库、美工、文档的同学也要完成项目中部分简单功能模块的代码。（分组项目，培养团队合作的精神、锻炼与他人沟通的能力。）</span><br><span class="line">(2)提交电子版完整的设计报告和源程序。</span><br><span class="line">(3)设计分三阶段</span><br><span class="line">第一阶段: 明确系统功能需求，设计数据库</span><br><span class="line">第二阶段: 系统功能模块分析并用JSP实现相应页面</span><br><span class="line">第三阶段: 整理文档和调试程序，演示答辩。答辩时需要演示项目作品功能，叙述小组分工和每个人的工作量。回答老师提出的问题。答辩，或队员协助演示作品的功能。答辩6分钟，老师提问4分钟。最后老师从作品功能完善性、交互界面美观性、文档规范性、答辩是否流畅等几个方面给出小组答辩成绩。个人最终成绩&#x3D;小组成绩*0.4+个人得分*0.6。</span><br></pre></td></tr></table></figure><h2 id="四、评分表"><a href="#四、评分表" class="headerlink" title="四、评分表"></a>四、评分表</h2><table><thead><tr><th>姓名</th><th>内容</th><th>分值</th></tr></thead><tbody><tr><td>一、主题与内容（20分）</td><td>1.主题鲜明，题材合适，内容能很好为主题服务</td><td></td></tr><tr><td></td><td>2.页面具有较强的个人设计创意,色彩搭配鲜明,内容布局合理</td><td></td></tr><tr><td>二、常规技术(50分)</td><td>1.页面布局合理，页面内容清晰明了，在页面中，插入文字、图片、表格、表单、超级链接、多媒体等各种对象，网页中部分页面可应用行为或者网页特效</td><td></td></tr><tr><td></td><td>2.表单、数据库操作技术</td><td></td></tr><tr><td></td><td>3.Jsp、Servlet技术</td><td></td></tr><tr><td>三、其他技术(10分)</td><td>1.有特色的结束，如有自己制作的动画、JS脚本特效等</td><td></td></tr><tr><td>四、作业设计报告(20分)</td><td>1.项目文档内容详细完整、结构清晰、提交文件名正确</td><td></td></tr></tbody></table><p>打印说明:</p><ol><li>小组成员每人单独打印一份，在第一列表头中填写姓名；</li><li>作业答辩时，将评分表装订在作业设计报告前面。</li></ol><!--stackedit_data:eyJoaXN0b3J5IjpbMTQ0ODI3MTM4NF19-->]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>外汇时间序列预测</title>
      <link href="/2020/06/12/MachingLearning/%E5%A4%96%E6%B1%87%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B/"/>
      <url>/2020/06/12/MachingLearning/%E5%A4%96%E6%B1%87%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4e55223bc24e13e24edbf0a6c9cc5ca63f2bedb1054969f63e7c95398a7dfcf6">d2562ace8b70c9d8b6355868fbdb6e62b9c8eb87098ee84b3ebe36de2a546e339f6f0a9253e300ba1d706270f0685cce53833aee38745858fc2d4d232aa544cd5c1f619c93602a5b94922555d9ae00ddbc48804796d81c2590d1308bd5687629b3b3cd5d9608ae1cb1fe8182322c9389f298d7f30cbcb6680ee8502412db5e28e0d9bbba99b6c9ccfcf696a97d8ede14bc361950c1ff0f2b0112a766afd10990b380ac13ca0368e57d9bc0a826557dc5298f544b4ab882d908fdbbbd2af64d9cfdc6254520e8306ded483a2cb9113f65209c4c5576187146de2966296b6dad33bfe384f91bda329aa999a56e60868beb0a908d7c162ac8e5c189d5f0e80e0b69fcd6f7a5b6d4a453f284569dcf33fca5a14d0f3caf5a73556b850f1753230fd27805c4e193ca1242d588e30450377ecc1f6bfd5d307c1036965897f3ac63ea426dfa772f45c158b0d1f2257c3901a061b68e43bb2b98f5bc80a35ca2bdfcb91ceed2b455a89f41a7a46be8cb7cc3fcee5a99d0386820027d55b32224b07cf2379e0fe10e2139adb7dbc505b5f0631f7713e81b1003241b0b369b7616132be26824d909401ca61aa7c4737c76d90bd0a5c4cc865623c11156fd7045c2fba7cbab87d006964ecb4d4ac58fd33ad5eac0b01c0976cc2e07a41c12635e730ea579705816eda68db98818eb852dcff438c9d01795c7136d32cdc7b3586019b83351731d9ec2655d54cfc05bae5398ac81f6f2ecbf1d2feb495a671cc6f63a5b086330ee263a3cb354c2a7e9db33c24d226a7ce42ca51948b3d95474bf9c0fe0c698470a2a1119f8d3c2471aa5b5aef83fd3dce97fafd0b48afd9ac10964da3559496deb8afe4779f19277397dc125d3381765e210187e5f4a43b92cc16d06dbb8b6518b91e1bb9da8ce1114617ff4d98af38e86a5595103837d725a3c0513c59b9fb7359e6580340338959d90f4df4522047247639e1ac88f0c35f462db34e7bf94b10bf02ab6c2b8718c87e10b42b2d73562577e94184031d4458ab06f424865e6ab65ccc03ff95557321d55c7ae1a4e0dfedb0e94e9e91f4388b82a13e381734bc48b3ddea79b854f62d5f2a244072260d021ef89a5855bc1771527df3e686a0f7a4f12e91404df35c44bce15b189d59c696dedbcffff399e66c3e98c956ebf4a6444208685180f34123b96021890a2b75dd47793c4b5c68d953bb8bd7b82e8bb6832f8b7ef4d9a6fe10a411b4e493677b7cfb85744e6429d3fe6e3b3d30910ab02c67d4370f2c84efb36d9562fe624357208d037110ba0caa8ba97b202a9b62d2c7ad411f77f11ab580701fc9b44fcf4b886beeeb128c31381c83b39bc727c246d897246c8a6d6cc49f62bf92d99fbb4f52d63382a5eb8559522a8e097981824bffb286efadc0e138b1a3b6cf5904110ab29083cc5fe16f041b7453da17ddbde4dbb9c3ec3bd436625ac76fedcc85e70e895e7d26efcd7d9695cacf2ff463f7fa8c56978567586c92df82288d4c4edd40ed6f1b2b4bb4f298dcc375560eb5b5ed7339cd0bb339435e1f8d8e6d942829c2c776650f2329607ea503b503c2838de2e85d51a84eca7977b685bb570e2fb4b6aabb241608cc650079d71d998c970db1f094244be9d6b16428ae29b29f6c925bad15d6d62382e76fc96a577c6ce5545660e160920718b2b0fece6f44c3877db886ebbbacd0812dadb1111cfb33b08530b0661b8fff5c40e36307d22128eefc1cac6db2a34b0b932d753c99e458712a149ebd6bede0579e5d0182354b2085ea2e9605b575670134855aa31d6cdb6229a3e2d5bbe6205d8c94e5e5ed36ce4f74b750ca21422c882ba867061c937739fb461a1ae072b338c5a3ad519b653e6423779c31509b49523d355433d9abe9fd58151375d67cc29e362683abec1696f12f24144f664c99659dbb8fb3adacbfeac31e45bc9a8d8f482824bedd79fc3be0c8d2e0e58c8034418d1d113b2dac590730cff45b0a087558482d6b2a9f2fee3f052d5efb05c08b74efc40392e108618f1b2d2362aa790d9739546bab6cc9e48f555fcefa16a2714a37f0d9c044f44d51db33506a660c8b85f5d7817fe026f013e78041371d12e94094824ec6745f8ad020d8298823d505a3c00056b0b523e73a25661d2cb0a36b3c53b9cc2bba5c03f198dbfa30f388b28911b14f53ddbddf6582cdea1c848c81167492157ac8e0efed205c850614001483ec674f92a1dbc3cea0f6f0502fc58e0ccadc2b10d61b2f875a95adc3242c84cf20fc766d43fb281757c14fecb75162144b694f3f29a05ca34297952906c362276a69b1dd628b10582f704ef196bfaac42a698203c7e4c748694121a49cdedc9b8917629db74372f45bf7e3ac511521d255f5d8716f6bd140dac50646e85d1b6977ed8b7a60271e8431dc80a63ce53228680587a63e916f443fc563230caa60665d2a573f7554e0da2850cbd6fcdb126f34f75764cfb429620655b5403119ed1f6e79462c80d9b4c5fd3b796467ad3cf051dea0108beece51d242218dd23c30a56a391932ad2e5db10a5cefd01e6bf4cfabae4997f43df9c1087ddcd2375db23389b2cb82267d8f840164bebc69d8baf18dd5b24a30e395530125ec84b692a686b01b62de8560880bf798f4bde8e0f05ba92d840402e1bc536a38913a684573c3e45d5355ae8d3fbd9749de524b72961a41f7d5dfeffb8c29a985b253a0fedcf2b0c36c6eab31c36c4ebee74e36d476a93d6c52560dcc680fe7fdc96ccc3ccac2270e75b880c540420d57258cb050fe01d0d4b2cf3ea6f7b61cd1cf9e0aab100ef055b9ad5f9ea081f33eafca69d1ced8260c8de9aab052733634758861c30bb8ae32c5dca4b95a6ee172d47a4de6838f7c49510e0205a057aee3334b71aecc707fb2383cfe9301125e9942f662b8d998646bf3255f42ca0d4cadd05a33e854ee06aa1b5126e4a4fb34a660bc6b7256dfe821a0534d10ca1f0dee08346a5a351fd15f895e2b534cfc1dbfa21314b8ee6e880d45f424984ec229b91cd837f8e561c8c274761950be72569de86a27c79c98087abfd11e18a6657c23638115b81b5bd1eba5dbe0259519af6f6731eaf972d47e56a4f27513eb91d0a410a4f8defacdff2f8cc5a095375b13aeaad750deb756ed9b425a4c2ee2c584c50526f23b4f543c9659cb13c394ffb1cf45dbbd3bddd43341a17a02ebb7f59ecb324fd2fa4c92567f5cfc21a55d66bb350c08bb358a3ed84e9a81948d31406c26028ecd6b9d63ca3f4cf41f63b446180d582a08fac10f25fe10eb669fa78711f8a228499f38b63ab0b2e8c11cb5ba22a7cdca9a02c060601afeb8035173e6ec84d37dadecde975f64c1a67dd4eb4968e5af2dfe09dd431fc7fa5ff24a6648e9766141a7227d65f82fa3a083dfeb1c6dee7dedee93a7897e14cd969088ef255b0b0656899491b7446d290735042f3d04afa3ba7d2d6b32d5a843931cd57be2cb92df8e2e7acaafa036f4600281cc2bffc28577b945238502369deb6897bdddf2baf9dc511ac57869ddb2c91f095224cd8d0f2ed69d9fadd4b099ccf72413b9b5681ad6ffd3e2febd759d047aa388a4b1bc78472a2fd1c47a58f63514e8ccfab4587ef388dcb2bb029eaa41e75de1e402af999de9209c75037e4be46663ecd8da2b6cc51ef959b553c3fd0bb0a71ba1f15b1512afeaba8767fa9c9e888dc28a92bb376fc42da4d81a35f234e705a08c995726612373ca4bc54525315c0b272b6d0a1a7f2002bc5ce68328ada7f29b18edc80c38841a7e8d59219f19c0620a9761062b59ec817466c3433f8d0a190fc9bbc45af0940cf1736bbf293bdd4fcbd175f424a77dfb0364b5427e886d8083d93bc1e04fa353199a97edf2ec32502aaa31001cfafc86841bbdecee5cb491c5166fbdaf2e743441d2685c5a8f76308f32fe32a1fdb7c62ceb5bd4beae7af124bcfde684c0ce390530f43a5f9ef9d3491301d2d20f466397adb3943c33cac9fc96abf903627f84a312db7b48bae61904d68f2244ef68f95c6e5e9c30fc4e1a5357006f0238e36041fdb69680de0b5ea99c05f3ab327460b88b9af20ca13b02cb204bbab0689f8488c2d9c1ab38e6ae9326b879260773414ac36442f57413ef7c0359bb63e564d03a723cbf25bf16da23073a76846262a29cda13b411c2e5029b3e1d53b9b16ac85c59bfd3aeee9ea62e952dee056aea90c53a750ac9e002f99f08d95bca6f5249539025c58ba32c2c09701e85fc845f5c561f95d9dee63536729aadf1cb7c3d64ec8b5a27f24bc0343f4d415d65a14af1d800bb030e48970592f7d7aead3534829f4da4906c13ee302cf612ee7f5e20754017919cacc47cddd7ed3e527200ca0bd9dd6e935318eca613e57064db58f9533fd0c49faf66ede976e414804a6bf81132d34921e31bcd27e73d18b03d3dd5ed643965694c207e82d76d962ccf0f925b85934c6a5d1301c140901847906606bcb82753a7529ef53109a9da0dd4d3dddac0def9a4cb3f7332ea08c9f759ffb75cc1b269ec1a8a0cafa99906aeaca89fa67f2e951f5757a5c79a14301460a495c9e4f9975ac11813aa291f4640d5fde3f9c08f4184f2105f1336f691a9151d88f55a85237fa3c6e6579fd905b6868df02a56f549c599bbc5d5955c3aa1069d8dfee580e89f7bac1b2858c7c6f731fa74d82d824010146bf8aac2b68db68e1699fa9c5d40b4d153002ed008cc6a224543992c4f71c4f1ee515df55b8490f087a8798c31b388bbee49cc6e9d19025f8654346ebaaa9e480c03954cbb03e0984f746d15d43aedad189520909d005a64fbd18e744b4d5b27a2b0e0d2a9c7418667a3619a6e6c42689728351253ddd32d09815907a7e590ce10184631f2502ed58e49f2ca4351b9ff6dbe2e7379cf365345e8ee7bd07f5c94f25017d227b447ea9c41a15c81ba21fb9f457235e5d6a629c76216fe11ddf6fb56f1ecfea0de47ba5a30974d183d0baa095a5a69e1226959519388fcd53e316151c7bd7d8c046441b7b921f86e60e4de5112c35e948a31489aa4e5d148a0e024875b96066bb93fd3e47ba897ec3dbe3c68bd44ea7c23c6b13d36a27add9bda11f42210afe257562f89b10bcde3157aacdd09e4e37a14bfc1efeaa51456d294b7af5f36061f95d5e415e131b2ab71b6b95c018fa77e4f4aad8c351d6c56dcdfd1acafb4197afb5f45d61b343e9eec1a4ddabbf8978cb2a5a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> MachingLearning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Navicat-1045报错</title>
      <link href="/2020/06/11/Bug/Navicat-1045%E6%8A%A5%E9%94%99/"/>
      <url>/2020/06/11/Bug/Navicat-1045%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1045-Access denied for user root@localhost(using password:YES)</span><br></pre></td></tr></table></figure><h2 id="二、问题分析与解决"><a href="#二、问题分析与解决" class="headerlink" title="二、问题分析与解决"></a>二、问题分析与解决</h2><p>不被接入，改root密码</p><p>在mysql控制台里面改密码</p><p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;</code></p><p>刷新数据库</p><p><code>flush privileges;</code></p><p>退出</p><p><code>quit;</code></p><p>重启Navicat再次链接即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/acoolgiser/article/details/82967317?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159185926319725250149590%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=159185926319725250149590&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_ctr_v3-4-82967317.ecpm_v1_rank_ctr_v3&utm_term=1045-Access+denied+for+user+ro" target="_blank" rel="noopener">acoolgiser</a></li><li><a href="https://blog.csdn.net/zhang_yu_ling/article/details/103177296?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159185926319725250149590%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=159185926319725250149590&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_ctr_v3-2-103177296.ecpm_v1_rank_ctr_v3&utm_term=1045-Access+denied+for+user+ro" target="_blank" rel="noopener">_张张张i</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbLTE1ODY5MjE0NV19</li><li>-&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-大作业思路</title>
      <link href="/2020/06/10/Web/JavaWeb%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%80%9D%E8%B7%AF/"/>
      <url>/2020/06/10/Web/JavaWeb%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7a087d3d5428cefa0e34ebed0f6625692db6591cde349f847cf590f02ecb9d34">4e5ec10aaf9959f128b174963abca58a5222f07497a8e7d88ef2850041154b94102d372a79d06b01c287b94da235894a3f1a36e454e437810cb0d53a5afc13aa49dd5154975d76ad633c6bab9f9917beee72a2b822105b22123fc196dc5ecd2c8c168322b9a31b742bf4ff03cf28e536aab49366c24d42755cfbe1d661fd642ba1514bf8baf6f2dd6ce20dba2a5dcf6d6edf20c093e8a2c4a07b2c2b9e8ec913361dbac118df87172e12d7e7387d5ff33f1fa64fda1ddd441c717635fe3274f21817bded7a1c42ac43cab6bb940d94b19f095455f58881e214ee5cab26c0066b1d498c013a61cc02ba8f2e7fe9fce7dd1b506dc25d725bf1d72d28246d97d62af638830a7d3fb2f85c72ded41b193afd73100303fe9f32b5210dc744d27d0b4cc9dff56524c31c122fc2c5ba6f1a5c8744b2a678f031239be22cc0fb762aa329b3771670c629c0ce9ae07adbd7e514159caeb2689fae0441db1ce76d862b1a6680fb6a393804023be841b326c5c4fba771bbafe6ae5335360dce2427cfb1129b614fca35363e63ecd64a19ef57fcdb9fb16af878b36e7068f243dbf3c9894124fd40578ba2d810e9d2eaee7d666fc8834f73254988ce1381f84e3c203bce8ef8d868e162f0b66e9f457d1311a5855df270a6791dab225983a592f739e14a564099fafb5e88064e59428894bcd73e5c10511102dac20b905478696e867a8ea38eeeb27b61d27510cd5325731f538ff234f59701cf3bd37568479d2b1497d05fcb041dbce9b422323fec7df6b2442a934363130018ebaf04c5b964e5544aa632060d5db5aec86f3717f91f35e4eec3c5e17c77973d4fc4a311bfa1de2e4cce8ddb542d1a819bf65c1bc607cb6d30cc513b18253cf7cb025bda95ef48405e8019792f161eb342f09eaf44a589017198540b808c08f0f49843d34a3e3aafc9a049ac0d6956b6fab5271ce430e95b66b176c2a9eadb3e5b47d378d74811af8519c4aa2456b454ea95582f20856d286ab415a08d45d06f5648572c83ab4dcd05ea6d95c226ccc0b3e8b61c130a0dedb64ae7951aab8923e9732dc097a927c11e73b35cdbc0ecf33cbe45d67653405b32d292de5bf3c6ab2a16e68ecdea3f23c36db7ddb9092d1be8f7b681b255c79ac104d9bd1bd3392f5cf6c448a85297a5ee47ef9a2cb987c6ed25025bc4acde3c3d5c38a6d323e89965ce6745f4d4eb812c55eb31c588432cf211ffdd8549a356a1bfa077540ee282c5e53cb0b25a5696e4912a4753b3e8f19349eb7e35e54f2c0776173ba745d3cf853a32d6f6c742f179ee278e8e4057c2e2130c14e112eba9c7d5c8d2ee5fba655705bfe7a820a08ce5ce5cb0f787f62837706a42d3e0ee534aa8c5922832103192ff7ae211e4b062aa73d57301e3c647b8015b26b083a56675062336cd24e0d8303d2998232bdb2469cd73534cff549748ad0cd5d0d6dc52726236bc3362453909d16b9bc3e54cd932daa32b2f845eabfcf3c8c3eeb544d8e1f23867337e366cc6780889f69f1adfbde097c71f7adf8c92b2597adcc6786032c629660329beec66e6bd384bee7703c187df41c142765a08d9098e17908a1ba9ba88b543be09f17f6182f388ff47cdee509b312f354b3f1308e409db9705a6da10d06bf9d02c15798621c538f173dd9c9f9b06de9a25abde65c576b4fc1bf7fb9c7da5954e2be3898f02f2cd697cda83a760ceba35ae5458f5292d8bc2c737d0208ca5d9bb5265d04d5383a980b26a06b3fe3f93d8f5eb309b99d1590db473a368b961e547b526dbed45c5b0a3a6e4841bc977a44d832f426b25ff2e22abab8f7e1ff1352ad7f1dfe8a5b787a7fffa8367ccf0dbb88f8e1bc8d8b61d1342b321907be009cecf09b2c90711f422b790a9bd5306e79bd6eda825c8855c9727d29c9a7e2fe2c1cbc1c2756b5be805e6a256495485fb563919b4cfe8a54fa64de67f1c7362cb166ddbab5ca1cb1ccc24525e4fc6432beb588777d031dfbb343a97983eab600be31f8edbd59712febf8ca52595bacab6783958b9e4f8619499e43ab5ddd12425a662c06cda5dc00039e3e8a49c29b002419f1cd8feed8ccec2e8054594ecd3cc91e996d5769fc65853b24ac9e1e0cb2b5b36b89169ec6b9137ef9a9e692882e7547eb0fcdf6a8af1c2c410c3fee33e4112032ec8d2fe4b5b5a7071ce27f3c44bf190bac9a8e55d048269e0af7bed7b8da4830dba1596a45267d2b5f54258fa4636509310e83a1c62d88bbb5ff3335f243a19eee1da2fddfc6161d1b4e8be40294e40cdc7282af0f5a3923f3304f5857883c1629c079e09a6641259992889c6748c1cd7eb8aec2f63f01134d8abe32f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-JSP开发模型</title>
      <link href="/2020/06/10/Web/JavaWeb-11JSP%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/06/10/Web/JavaWeb-11JSP%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JSP两种开发模式"><a href="#一、JSP两种开发模式" class="headerlink" title="一、JSP两种开发模式"></a>一、JSP两种开发模式</h2><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611231739.png" alt=""></p><h3 id="JSP-Model1"><a href="#JSP-Model1" class="headerlink" title="JSP Model1"></a>JSP Model1</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611231553.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611231848.png" alt=""></p><h3 id="JSP-Model2"><a href="#JSP-Model2" class="headerlink" title="JSP Model2"></a>JSP Model2</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611231718.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611231808.png" alt=""></p><h2 id="二、MVC设计模式"><a href="#二、MVC设计模式" class="headerlink" title="二、MVC设计模式"></a>二、MVC设计模式</h2><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611233954.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611234018.png" alt=""></p><h2 id="三、javaweb开发中的三层架构"><a href="#三、javaweb开发中的三层架构" class="headerlink" title="三、javaweb开发中的三层架构"></a>三、javaweb开发中的三层架构</h2><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611234130.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611234046.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611234149.png" alt=""></p><!--stackedit_data:eyJoaXN0b3J5IjpbLTIxMjE2MjY3MjBdfQ==-->]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-JDBC</title>
      <link href="/2020/06/10/Web/JavaWeb-09JDBC/"/>
      <url>/2020/06/10/Web/JavaWeb-09JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h2><p>使用数据库来存储和管理数据<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610203403.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611092114.png" alt=""></p><h2 id="JDBC常用的API"><a href="#JDBC常用的API" class="headerlink" title="JDBC常用的API"></a>JDBC常用的API</h2><blockquote><p>五个接口一个类（唯一的类）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611092213.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611092250.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200611092328.png" alt=""></p><!--stackedit_data:eyJoaXN0b3J5IjpbLTU1OTA0MzA1MCwxNDY2OTY2NDUwXX0=-->]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-会话及其会话技术</title>
      <link href="/2020/06/10/Web/JavaWeb-05%E4%BC%9A%E8%AF%9D%E5%8F%8A%E5%85%B6%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/06/10/Web/JavaWeb-05%E4%BC%9A%E8%AF%9D%E5%8F%8A%E5%85%B6%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、会话技术"><a href="#一、会话技术" class="headerlink" title="一、会话技术"></a>一、会话技术</h2><p>相当于在客户端和服务器端之间，记录一些用户信息，但是不能用上一章节的，因为那只能保存暂时的信息。servlet还提供两个对象Cookie和Session可以更好地更好地保存会话数据。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610153358.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-jsp技术</title>
      <link href="/2020/06/10/Web/JavaWeb-06jsp%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/06/10/Web/JavaWeb-06jsp%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="jsp概述"><a href="#jsp概述" class="headerlink" title="jsp概述"></a>jsp概述</h2><p>一种新的编写动态网页的技术，虽然本质还是调用了servlet，但是相比前者要简单很多（前者向页面写数据麻烦，复杂），其组成可以简单理解为<br><code>jsp = html + java + jsp自身</code></p><p>调用servlet过程：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610185606.png" alt=""></p><p>其中jsp生成java文件，编译成class文件所在目录（本来应该在tomcat的work路径下）：<code>D:\project-java\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\demo-jsp\org\apache\jsp</code><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610185939.png" alt=""></p><p>打开java文件之后可以看到相关对sevlet的继承</p><h2 id="jsp语法"><a href="#jsp语法" class="headerlink" title="jsp语法"></a>jsp语法</h2><h3 id="jsp脚本元素"><a href="#jsp脚本元素" class="headerlink" title="jsp脚本元素"></a>jsp脚本元素</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610191731.png" alt=""></p><h3 id="jsp注释"><a href="#jsp注释" class="headerlink" title="jsp注释"></a>jsp注释</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610191849.png" alt=""></p><h3 id="jsp指令"><a href="#jsp指令" class="headerlink" title="jsp指令"></a>jsp指令</h3><h4 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h4><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610193917.png" alt=""></p><h4 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h4><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610194518.png" alt=""></p><h4 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h4><h3 id="jsp隐式对象"><a href="#jsp隐式对象" class="headerlink" title="jsp隐式对象"></a>jsp隐式对象</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure2/20200610200704.png" alt=""></p><!--stackedit_data:eyJoaXN0b3J5IjpbMjEwMDQ2NTEzM119-->]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yuque-未拉取成功</title>
      <link href="/2020/06/01/Bug/yuque-%E6%9C%AA%E6%8B%89%E5%8F%96%E6%88%90%E5%8A%9F/"/>
      <url>/2020/06/01/Bug/yuque-%E6%9C%AA%E6%8B%89%E5%8F%96%E6%88%90%E5%8A%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ yuque-hexo sync</span><br><span class="line">[INFO] clear previous directory.</span><br><span class="line">[INFO] remove yuque posts: D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\yuque</span><br><span class="line">Mon, 01 Jun 2020 04:02:22 GMT yuque-hexo deprecated TOKEN of yuque will be required <span class="keyword">while</span> verion &gt;v1.6.0. at ..\..\Develop\nodejs\node_global\node_modules\yuque-hexo\lib\Downloader.js:39:19</span><br><span class="line">[INFO] reading from <span class="built_in">local</span> file: D:\Blog\blog-wztlink1013-3.0\yuque.json</span><br><span class="line">[WARNING] Cannot find module <span class="string">'D:\Blog\blog-wztlink1013-3.0\yuque.json'</span></span><br><span class="line">Require stack:</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\lib\Downloader.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\<span class="built_in">command</span>\sync.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\node_modules\common-bin\lib\command.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\node_modules\common-bin\index.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\index.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\bin\yuque-hexo.js</span><br><span class="line">⚠️  Error: fail to fetch article list, response: &#123;<span class="string">"status"</span>:401,<span class="string">"message"</span>:<span class="string">"Unauthorized"</span>&#125;</span><br><span class="line">⚠️  Command Error, <span class="built_in">enable</span> `DEBUG=common-bin` <span class="keyword">for</span> detail</span><br></pre></td></tr></table></figure><h2 id="二、分析并解决问题"><a href="#二、分析并解决问题" class="headerlink" title="二、分析并解决问题"></a>二、分析并解决问题</h2><p>认证出错，应该和下面三个原因有关</p><ul><li>客户端将其身份验证凭据发送到服务器，但是服务器由于某种原因拒绝了凭据。</li><li>客户端无法在请求中提供任何身份验证凭据。</li><li>客户端由于某种原因被禁止。某些应用程序用来限制来自特定IP地址的访问请求，因此，如果身份验证不是问题，则可能是服务器端禁止。401 Unauthorized Errors</li></ul><p>也就是身份没有被验证，首先检查用户元信息相关</p><p>的确，配置都是没有问题的，然后去issue里面查看相关问题，了解到是语雀官方出于对知识库安全性的调整，需要使用第三方 API 访问知识库，需要传入环境变量 YUQUE_TOKEN。</p><p>然后根据两种指导方式，传入参数即可</p><ul><li>设置全局的环境变量 YUQUE_TOKEN</li><li>命令执行时传入环境变量<ul><li>mac / linux: YUQUE_TOKEN=xxx yuque-hexo sync</li><li>windows: set YUQUE_TOKEN=xxx &amp;&amp; yuque-hexo sync</li></ul></li></ul><p>传入之后会有一封邮件发过来，然后新开git bash窗口，重新键入命令即可</p><p>成功之后是这个样子的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ yuque-hexo sync</span><br><span class="line">[INFO] clear previous directory.</span><br><span class="line">[INFO] remove yuque posts: D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\_posts\yuque</span><br><span class="line">[INFO] reading from <span class="built_in">local</span> file: D:\Blog\blog-wztlink1013-3.0\yuque.json</span><br><span class="line">[INFO] article amount: 2</span><br><span class="line">[INFO] download articles <span class="keyword">done</span>!</span><br><span class="line">[INFO] writing to <span class="built_in">local</span> file: D:\Blog\blog-wztlink1013-3.0\yuque.json</span><br><span class="line">[INFO] create posts directory (<span class="keyword">if</span> it not exists): D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\_posts\yuque</span><br><span class="line">[INFO] generate post file: D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\_posts\yuque\hexo-test.md</span><br><span class="line">[INFO] generate post file: D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\_posts\yuque\语雀文章测试.md</span><br><span class="line">[INFO] yuque-hexo sync <span class="keyword">done</span>!</span><br></pre></td></tr></table></figure><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><ul><li><a href="https://airbrake.io/blog/http-errors/401-unauthorized-error" target="_blank" rel="noopener">https://airbrake.io/blog/http-errors/401 U-unauthorized E-error:What It Is and How to Fix It</a></li><li><a href="https://www.yuguocong.cn/yuque/eg7hkp.html#Reference" target="_blank" rel="noopener">使用语雀编辑器写静态博客https://www.yuguocong.cn/yuque/eg7hkp.html#Reference</a></li><li><a href="https://blog.csdn.net/Caoyang_He/article/details/82181695?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase" target="_blank" rel="noopener">windows10环境变量设置及理解环境变量</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbLTEzMDExMjgyNjhdfQ==</li><li>-&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> yuque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-生成文章出错</title>
      <link href="/2020/05/31/Bug/hexo-%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0%E5%87%BA%E9%94%99/"/>
      <url>/2020/05/31/Bug/hexo-%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0%E5%87%BA%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Somethings wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path)</span><br><span class="line">  unexpected end of file</span><br><span class="line">    at Object._prettifyError (D:\Blog\blog-wztlink1013-3.0\node_modules\nunjucks\src\lib.js:36:11)</span><br><span class="line">    at Template.render (D:\Blog\blog-wztlink1013-3.0\node_modules\nunjucks\src\environment.js:536:21)</span><br><span class="line">    at Environment.renderString (D:\Blog\blog-wztlink1013-3.0\node_modules\nunjucks\src\environment.js:378:17)</span><br><span class="line">    at D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\extend\tag.js:120:48</span><br><span class="line">    at tryCatcher (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Function.Promise.fromNode.Promise.fromCallback (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:209:30)</span><br><span class="line">    at Tag.render (D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\extend\tag.js:120:18)</span><br><span class="line">    at Object.onRenderEnd (D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\hexo\post.js:291:22)</span><br><span class="line">    at D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\hexo\render.js:79:21</span><br><span class="line">    at tryCatcher (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at _drainQueueStep (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\async.js:93:12)</span><br><span class="line">    at _drainQueue (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\async.js:86:9)</span><br><span class="line">    at Async._drainQueues (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\async.js:102:5)</span><br><span class="line">    at Immediate.Async.drainQueues (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\async.js:15:14)</span><br><span class="line">    at processImmediate (internal/timers.js:456:21)</span><br></pre></td></tr></table></figure><h2 id="二、分析并解决问题"><a href="#二、分析并解决问题" class="headerlink" title="二、分析并解决问题"></a>二、分析并解决问题</h2><p>根据报错信息，包nunjucks、bluebird使用异常</p><p>然后进到node_modules文件夹里面分别找到两个包，进入README.md进入官网，numjucks包应该是渲染文章有关，期间出错应该是markdown文章里面所使用的标签与nunjucks模板引擎的标签冲突，</p><p>根据文档定位英文大括号的使用，定位文章使用带有大括号的fancybox标签，标签结束忘记加end而导致出错</p><h2 id="三、hexo-g-出错总结"><a href="#三、hexo-g-出错总结" class="headerlink" title="三、hexo g 出错总结"></a>三、hexo g 出错总结</h2><p>hexo g出错总结多为文件格式出错，主题配置出错，抑或是文章格式出错等</p><h3 id="文章头部"><a href="#文章头部" class="headerlink" title="文章头部"></a>文章头部</h3><ul><li><p><em>hexo相关文章报错，大多数为格式出错，文章头部的使用严格遵循hexo官方文档的使用，但是目录优化插件，使得文章头部的元信息更为简单化</em></p></li><li><p>减号<code>-</code>分隔符，注意头部front-matter、markdown行分隔。如果没有加front-matter，文章还用了markdown，会报错</p><p>  <code>YAMLException: end of the stream or a document separator is expected at line 6, column 1:</code></p></li><li><p>目录优化插件的使用</p><h3 id="文章体"><a href="#文章体" class="headerlink" title="文章体"></a>文章体</h3></li><li><p>英文大括号的使用要“有始有终”，Volantis主题的大括号标签使用</p></li></ul><h3 id="空格问题"><a href="#空格问题" class="headerlink" title="空格问题"></a>空格问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ERROR Process failed: _posts/yuque/外汇时间序列预测.md</span><br><span class="line">YAMLException: end of the stream or a document separator is expected at line 2, column 11:</span><br><span class="line">    categories:</span><br><span class="line">              ^</span><br><span class="line">    at generateError (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:167:10)</span><br><span class="line">    at throwError (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:173:9)</span><br><span class="line">    at readDocument (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:1545:5)</span><br><span class="line">    at loadDocuments (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:1588:5)</span><br><span class="line">    at Object.load (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:1614:19)</span><br><span class="line">    at parseYAML (D:\Blog\blog-wztlink1013-3.0\node_modules\hexo-front-matter\lib\front_matter.js:78:23)</span><br><span class="line">    at parse (D:\Blog\blog-wztlink1013-3.0\node_modules\hexo-front-matter\lib\front_matter.js:54:12)</span><br><span class="line">    at D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\plugins\processor\post.js:48:20</span><br><span class="line">    at tryCatcher (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:544:35)</span><br><span class="line">    at Promise._settlePromise (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:127:19)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:145:14)</span><br><span class="line">    at PromiseArray._iterate (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:115:31)</span><br><span class="line">    at PromiseArray.init [as _init] (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:79:10)</span><br><span class="line">    at Promise._settlePromise (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:601:21)</span><br><span class="line">    at Promise._settlePromise0 (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:127:19)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:145:14)</span><br><span class="line">    at Promise._settlePromise (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:609:26)</span><br><span class="line">    at Promise._settlePromise0 (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">INFO  Generating Baidu urls <span class="keyword">for</span> last 1 posts</span><br></pre></td></tr></table></figure><p>奇葩错误，在最上面的三个分隔符后面也要加空格，可能是语雀那边同步过来的文章问题</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mozilla.github.io/nunjucks/cn/getting-started.html" target="_blank" rel="noopener">nunjucks文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH-登录</title>
      <link href="/2020/05/31/Bug/SSH-%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/"/>
      <url>/2020/05/31/Bug/SSH-%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">remote: Coding 提示: Authentication failed.</span><br><span class="line">remote: 认证失败，请确认您输入了正确的账号密码。</span><br><span class="line">fatal: Authentication failed <span class="keyword">for</span> <span class="string">'https://e.coding.net/wztlink1013/wztlink1013.git/'</span></span><br><span class="line"><span class="comment">##[error]Process completed with exit code 128.</span></span><br></pre></td></tr></table></figure><h2 id="二、分析并解决问题"><a href="#二、分析并解决问题" class="headerlink" title="二、分析并解决问题"></a>二、分析并解决问题</h2><p>自动化部署过程中，coding认证出错，我觉得应该有两个可能性</p><ol><li>字面意思账号密码出错</li><li>SSH密匙没有匹配到</li><li>在GitHub Actions上所配置的Token信息之间也修改了一次，会不会是忘了改用户名</li></ol><p>如果是第一种情况，已经进入控制面板中的凭据管理器，更改了coding在本机上的默认永久密码，不弹窗理论没事，但是无效，</p><p>根据上次在本机上克隆coding仓库也没有其任何反应，所以问题应该出在ssh密匙上面，进一步回想，自己重装电脑后，当时是打算不使用全局用户没加上global打算使用各个用户，但是最后又换成全局用户，所以生成的.ssh文件夹下的config文件有被删除了，会不会是config里面的coding host被删除，就默认这个电脑只有初始化github用户呢？</p><p>好的，试验了一下，解决了在本地电脑coding“不算用户”的问题，但是自动化部署的问题未解决</p><p>最后试一下GitHub Actions上是不是coding用户名之间忘了换一次，的确是……</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/501277e1bada" target="_blank" rel="noopener">一台电脑利用秘钥绑定多个ssh-key账号（实n</a></li></ul><p>源头</p><!--stackedit_data:eyJoaXN0b3J5IjpbOTMyMTkxM119-->]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qrcode和myqr花式二维码</title>
      <link href="/2020/05/29/Language/Python-qrcode-myqr%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>/2020/05/29/Language/Python-qrcode-myqr%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="一、官方文档"><a href="#一、官方文档" class="headerlink" title="一、官方文档"></a>一、官方文档</h2><p><a href="https://pypi.org/project/qrcode/" target="_blank" rel="noopener">https://pypi.org/project/qrcode/</a></p><p><a href="https://pypi.org/project/MyQR/" target="_blank" rel="noopener">https://pypi.org/project/MyQR/</a></p><h2 id="二、下载包"><a href="#二、下载包" class="headerlink" title="二、下载包"></a>二、下载包</h2><p>pip install qrcode  #方法多，体量小</p><p>pip install myqr    #操作简单，功能强大</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><h3 id="qrcode一行字二维码"><a href="#qrcode一行字二维码" class="headerlink" title="qrcode一行字二维码"></a>qrcode一行字二维码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"></span><br><span class="line">qrcode.make(<span class="string">"不睡觉干嘛呢"</span>).get_image().show()   <span class="comment">#设置URL必须添加http://</span></span><br></pre></td></tr></table></figure><h3 id="qrcode一行字二维码-1"><a href="#qrcode一行字二维码-1" class="headerlink" title="qrcode一行字二维码"></a>qrcode一行字二维码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"> </span><br><span class="line">text = input(<span class="string">"输入文字或URL："</span>)</span><br><span class="line">img =qrcode.make(text)</span><br><span class="line">img.save()                            <span class="comment">#保存图片至本地目录，可以设定路径</span></span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><h3 id="qrcode生成logo二维码"><a href="#qrcode生成logo二维码" class="headerlink" title="qrcode生成logo二维码"></a>qrcode生成logo二维码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> qrcode,os</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_qrcode</span><span class="params">(url,qrcodename)</span>:</span></span><br><span class="line">    qr = qrcode.QRCode(</span><br><span class="line">        version=<span class="number">1</span>,  <span class="comment"># 设置容错率为最高</span></span><br><span class="line">        error_correction=qrcode.ERROR_CORRECT_H, <span class="comment"># 用于控制二维码的错误纠正程度</span></span><br><span class="line">        box_size=<span class="number">8</span>, <span class="comment"># 控制二维码中每个格子的像素数，默认为10</span></span><br><span class="line">        border=<span class="number">1</span>, <span class="comment"># 二维码四周留白，包含的格子数，默认为4</span></span><br><span class="line">        <span class="comment">#image_factory=None,  保存在模块根目录的image文件夹下</span></span><br><span class="line">        <span class="comment">#mask_pattern=None</span></span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    qr.add_data(url) <span class="comment"># QRCode.add_data(data)函数添加数据</span></span><br><span class="line">    qr.make(fit=<span class="literal">True</span>)  <span class="comment"># QRCode.make(fit=True)函数生成图片</span></span><br><span class="line"> </span><br><span class="line">    img = qr.make_image()</span><br><span class="line">    img = img.convert(<span class="string">"RGBA"</span>) <span class="comment"># 二维码设为彩色</span></span><br><span class="line">    logo = Image.open(<span class="string">'xx.jpg'</span>) <span class="comment"># 传gif生成的二维码也是没有动态效果的</span></span><br><span class="line"> </span><br><span class="line">    w , h = img.size</span><br><span class="line">    logo_w , logo_h = logo.size</span><br><span class="line">    factor = <span class="number">4</span>   <span class="comment"># 默认logo最大设为图片的四分之一</span></span><br><span class="line">    s_w = int(w / factor)</span><br><span class="line">    s_h = int(h / factor)</span><br><span class="line">    <span class="keyword">if</span> logo_w &gt; s_w <span class="keyword">or</span> logo_h &gt; s_h:</span><br><span class="line">        logo_w = s_w</span><br><span class="line">        logo_h = s_h</span><br><span class="line"> </span><br><span class="line">    logo = logo.resize((logo_w, logo_h), Image.ANTIALIAS)</span><br><span class="line">    l_w = int((w - logo_w) / <span class="number">2</span>)</span><br><span class="line">    l_h = int((h - logo_h) / <span class="number">2</span>)</span><br><span class="line">    logo = logo.convert(<span class="string">"RGBA"</span>)</span><br><span class="line">    img.paste(logo, (l_w, l_h), logo)</span><br><span class="line">    img.show()</span><br><span class="line">    img.save(os.getcwd()+<span class="string">'/'</span> + qrcodename + <span class="string">'.png'</span>, quality=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="myqr动态二维码"><a href="#myqr动态二维码" class="headerlink" title="myqr动态二维码"></a>myqr动态二维码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">相关参数：</span><br><span class="line">    words：二维码内容，链接或者句子</span><br><span class="line">    version：二维码大小，范围为[1,40]</span><br><span class="line">    level：二维码纠错级别，范围为&#123;L,M,Q,H&#125;，H为最高级，默认。</span><br><span class="line">    picture：自定义二维码背景图，支持格式为 .jpg，.png，.bmp，.gif，默认为黑白色</span><br><span class="line">    colorized：二维码背景颜色，默认为 False，即黑白色</span><br><span class="line">    contrast：对比度，值越高对比度越高，默认为 1.0</span><br><span class="line">    brightness：亮度，值越高亮度越高，默认为 1.0，值常和对比度相同</span><br><span class="line">    save_name：二维码名称，默认为 qrcode.png</span><br><span class="line">    save_dir：二维码路径，默认为程序工作路径</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用库</span></span><br><span class="line"><span class="keyword">from</span> MyQR <span class="keyword">import</span> myqr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数部分</span></span><br><span class="line">myqr.run(</span><br><span class="line">    <span class="comment"># 网址</span></span><br><span class="line">    words=<span class="string">'https://wztlink1013.com'</span>,</span><br><span class="line">    <span class="comment"># 控制边长，范围是1到40，数字越大边长越大，默认边长是取决于你输入的信息的长度和使用的纠错等级</span></span><br><span class="line">    version=<span class="number">5</span>,</span><br><span class="line">    <span class="comment"># 控制纠错水平，范围是L、M、Q、H，从左到右依次升高</span></span><br><span class="line">    level=<span class="string">'H'</span>,</span><br><span class="line">    <span class="comment"># 将QR二维码图像与一张同目录下的图片相结合，此处设置该图片，可以是gif</span></span><br><span class="line">    picture=<span class="string">'./input/girl.gif'</span>,</span><br><span class="line">    <span class="comment"># 默认是黑白(False)，可以选择彩色(True)</span></span><br><span class="line">    colorized=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0。</span></span><br><span class="line">    contrast=<span class="number">1.0</span>,</span><br><span class="line">    <span class="comment"># 调节图片的亮度，用法与contrast相同</span></span><br><span class="line">    brightness=<span class="number">1.0</span>,</span><br><span class="line">    <span class="comment"># 输出文件名，格式可以是jpg，png，bmp，gif</span></span><br><span class="line">    save_name=<span class="string">'girl.gif'</span>,</span><br><span class="line">    save_dir=<span class="string">'./output'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qrcode </tag>
            
            <tag> myqr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UTC-GMT-GST</title>
      <link href="/2020/05/29/DataAnalysis/UTC-GMT-GST/"/>
      <url>/2020/05/29/DataAnalysis/UTC-GMT-GST/</url>
      
        <content type="html"><![CDATA[<h2 id="一、三者区别与关系"><a href="#一、三者区别与关系" class="headerlink" title="一、三者区别与关系"></a>一、三者区别与关系</h2><h3 id="UTC：世界标准时间"><a href="#UTC：世界标准时间" class="headerlink" title="UTC：世界标准时间"></a><strong>UTC：世界标准时间</strong></h3><p>协调世界时（英：Coordinated Universal Time ，法：Temps Universel Coordonné），又称世界统一时间，世界标准时间，国际协调时间。英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称UTC。</p><h3 id="GMT：格林尼治时间"><a href="#GMT：格林尼治时间" class="headerlink" title="GMT：格林尼治时间"></a><strong>GMT：格林尼治时间</strong></h3><p>世界时UT  即格林尼治时间，格林尼治所在地的标准时间。以地球自转为基础的时间计量系统。地球自转的角度可用地方子午线相对于地球上的基本参考点的运动来度量。为了测量地球自转，人们在地球上选取了两个基本参考点：春分点（见分至点）和平太阳，由此确定的时间分别称为恒星时和平太阳时。</p><h3 id="GST：北京时间"><a href="#GST：北京时间" class="headerlink" title="GST：北京时间"></a><strong>GST：北京时间</strong></h3><p>在数据库中存放，或者给用户看的时间都是GST时间</p><h3 id="UTC和GST"><a href="#UTC和GST" class="headerlink" title="UTC和GST"></a><strong>UTC和GST</strong></h3><p>中国北京市的时间比Coordinated Universal Time<strong>早</strong> 8 小时</p><h2 id="二、UTC与GST之间的转换"><a href="#二、UTC与GST之间的转换" class="headerlink" title="二、UTC与GST之间的转换"></a><strong>二、UTC与GST之间的转换</strong></h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>2020-05-23T01:12:19.602Z</p></blockquote><ul><li>T：他表示后面跟的时间</li><li>Z：表示UTC统一时间</li><li>602：表示毫秒，如果为6020，最后得到的时间，秒会增加1秒。000Z意思就是 0毫秒  utc统一时间</li></ul><h3 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> website;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTC_GST</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"></span><br><span class="line">String date = <span class="string">"2020-05-23T20:12:19.602Z"</span>;</span><br><span class="line">date = date.replace(<span class="string">"Z"</span>, <span class="string">" UTC"</span>);</span><br><span class="line">System.out.println(<span class="string">"输入的UTC格式数据为："</span>+date);</span><br><span class="line"></span><br><span class="line">SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm:ss.SSS Z"</span>);</span><br><span class="line">Date d = format.parse(date);</span><br><span class="line">System.out.println(<span class="string">"输出的背景格式数据为："</span>+d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入的UTC格式数据为：2020-05-23T20:12:19.602 UTC</span><br><span class="line">输出的背景格式数据为：Sun May 24 04:12:19 CST 2020</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> website;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Format</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    Date ss = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">"一般日期输出："</span> + ss);</span><br><span class="line">        System.out.println(<span class="string">"toString日期输出："</span> + ss.toString());</span><br><span class="line">        System.out.println(<span class="string">"时间戳："</span> + ss.getTime()+<span class="string">"\n"</span>); <span class="comment">// getTime返回的是1970年1月1号至今流逝的时间 </span></span><br><span class="line">        <span class="comment">//Date aw = Calendar.getInstance().getTime();//获得时间的另一种方式，测试效果一样</span></span><br><span class="line">        </span><br><span class="line">        SimpleDateFormat format0 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        String time = format0.format(ss.getTime());<span class="comment">//这个就是把时间戳经过处理得到期望格式的时间</span></span><br><span class="line">        System.out.println(<span class="string">"格式化结果0："</span> + time + <span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">        SimpleDateFormat format1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line">        time = format1.format(ss.getTime());</span><br><span class="line">        System.out.println(<span class="string">"格式化结果1："</span> + time + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一般日期输出：Sat May 23 15:03:25 CST 2020</span><br><span class="line">toString日期输出：Sat May 23 15:03:25 CST 2020</span><br><span class="line">时间戳：1590217405777</span><br><span class="line"></span><br><span class="line">格式化结果0：2020-05-23 15:03:25</span><br><span class="line"></span><br><span class="line">格式化结果1：2020年05月23日 15时03分25秒</span><br></pre></td></tr></table></figure><!-- ## 参考资料- [https://blog.csdn.net/hsany330/article/details/70332483](https://blog.csdn.net/hsany330/article/details/70332483) --><!--stackedit_data:eyJoaXN0b3J5IjpbNDgwMDE4MTg1XX0=-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Volantis写作</title>
      <link href="/2020/05/25/Hexo/Hexo-Volantis%E5%86%99%E4%BD%9C/"/>
      <url>/2020/05/25/Hexo/Hexo-Volantis%E5%86%99%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>主题原生支持<b><span class='p red'>丰</span><span class='p yellow'>富</span><span class='p green'>多</span><span class='p blue'>彩</span></b>的标签。</p><h2 id="文本和段落"><a href="#文本和段落" class="headerlink" title="文本和段落"></a>文本和段落</h2><h3 id="Span-amp-P"><a href="#Span-amp-P" class="headerlink" title="Span &amp; P"></a>Span &amp; P</h3><p>请将您的 Volantis 升级至 <u>2.5</u> 版本以上使用。</p><div class="tabs" id="span-p"><ul class="nav-tabs"><li class="tab"><a href="#span-p-1">语法格式</a></li><li class="tab"><a href="#span-p-2">参数列表</a></li><li class="tab"><a href="#span-p-3">示例写法</a></li><li class="tab active"><a href="#span-p-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="span-p-1"><p class='p subtitle'>行内文本</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数, 文本内容 %&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>独立段落</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数, 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="span-p-2"><p>样式参数位置可以写颜色、大小和对齐方向，多个样式参数用空格隔开。</p><p class='p subtitle'>字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logo, code</span><br></pre></td></tr></table></figure><p class='p subtitle'>颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">red, yellow, green, cyan, blue, gray</span><br></pre></td></tr></table></figure><p class='p subtitle'>大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">small, h4, h3, h2, h1, large, huge, ultra</span><br></pre></td></tr></table></figure><p class='p subtitle'>对齐方向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left, center, right</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="span-p-3"><p class='p subtitle'>彩色文字</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br></pre></td></tr></table></figure><p class='p subtitle'>超大文字</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文档「开始」页面中的标题部分就是超大文字。</span><br><span class="line"></span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="span-p-4"><p class='p subtitle'>彩色文字</p><p>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</p><p class='p subtitle'>超大文字</p><p>文档「开始」页面中的标题部分就是超大文字。</p><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></div></div></div><h3 id="Note-amp-NoteBlock"><a href="#Note-amp-NoteBlock" class="headerlink" title="Note &amp; NoteBlock"></a>Note &amp; NoteBlock</h3><p>NoteBlock 是 Blockquote 的增强版，在左边显示图标，并且可以自定颜色。而 Note 是 NoteBlock 的简便写法。请将您的 Volantis 升级至 <u>2.3</u> 版本以上使用。</p><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab"><a href="#note-1">语法格式</a></li><li class="tab"><a href="#note-2">参数列表</a></li><li class="tab"><a href="#note-3">示例写法</a></li><li class="tab active"><a href="#note-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="note-1"><p class='p subtitle'>Note</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note 样式参数, 文本内容 %&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>NoteBlock</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% noteblock 样式参数 %&#125;</span><br><span class="line"></span><br><span class="line">文本段落</span><br><span class="line"></span><br><span class="line">&#123;% endnoteblock %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="note-2"><p>样式参数位置可以写图标和颜色，多个样式参数用空格隔开。</p><p class='p subtitle'>图标</p><figure class="highlight md"><figcaption><span>彩色的</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quote, info, warning, done/success, error/danger</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>灰色的，也可以指定颜色</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radiation, bug, idea, link, paperclip, todo, msg, guide, download, up, undo</span><br></pre></td></tr></table></figure><p class='p subtitle'>颜色</p><figure class="highlight md"><figcaption><span>指定颜色</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear, light, gray, red, yellow, green, cyan, blue</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="note-3"><p class='p subtitle'>Note</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note, 为简单的一句话提供的简便写法。 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success, 支持同样丰富的参数。 %&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>NoteBlock</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">可以在区块中放置一些复杂的结构，支持嵌套。</span><br><span class="line"></span><br><span class="line">&#123;% noteblock quote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% p subtitle, 小标题 %&#125;</span><br><span class="line"></span><br><span class="line">Windows 10不是為所有人設計,而是為每個人設計</span><br><span class="line"></span><br><span class="line">&#123;% p subtitle, 嵌套测试 %&#125;</span><br><span class="line">&#123;% noteblock %&#125;</span><br><span class="line">请坐和放宽，我正在帮你搞定一切...</span><br><span class="line">&#123;% endnoteblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% p subtitle, Folding 测试 %&#125;</span><br><span class="line">&#123;% folding 点击查看更多 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning, 不要说我们没有警告过你 %&#125;</span><br><span class="line">&#123;% noteblock bug red %&#125;</span><br><span class="line">我们都有不顺利的时候</span><br><span class="line">&#123;% endnoteblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line">&#123;% endnoteblock %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="note-4"><p class='p subtitle'>Note</p><div class="note "><p>为简单的一句话提供的简便写法。</p></div><div class="note success"><p>支持同样丰富的参数。</p></div><p class='p subtitle'>NoteBlock</p><p>可以在区块中放置一些复杂的结构，支持嵌套。</p><div class="note quote">            <p class='p subtitle'>小标题</p><p>Windows 10不是為所有人設計,而是為每個人設計</p><p class='p subtitle'>嵌套测试</p><div class="note ">            <p>请坐和放宽，我正在帮你搞定一切…</p>          </div><p class='p subtitle'>Folding 测试</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <div class="note warning"><p>不要说我们没有警告过你</p></div><div class="note bug red">            <p>我们都有不顺利的时候</p>          </div>              </div>            </details>          </div></div></div></div><h3 id="Checkbox-amp-Radio"><a href="#Checkbox-amp-Radio" class="headerlink" title="Checkbox &amp; Radio"></a>Checkbox &amp; Radio</h3><p>请将您的 Volantis 升级至 <u>2.6</u> 版本以上使用。</p><div class="tabs" id="btn"><ul class="nav-tabs"><li class="tab"><a href="#btn-1">语法格式</a></li><li class="tab"><a href="#btn-2">参数列表</a></li><li class="tab"><a href="#btn-3">示例写法</a></li><li class="tab active"><a href="#btn-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="btn-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="btn-2"><p class='p subtitle'>颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">red, yellow, green, cyan, blue</span><br></pre></td></tr></table></figure><p class='p subtitle'>样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plus, minus, times</span><br></pre></td></tr></table></figure><p class='p subtitle'>选中状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checked</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="btn-3"><p class='p subtitle'>Checkbox</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>Radio</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="btn-4"><p class='p subtitle'>Checkbox</p><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><p class='p subtitle'>Radio</p><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div></div></div></div><h2 id="按钮和菜单"><a href="#按钮和菜单" class="headerlink" title="按钮和菜单"></a>按钮和菜单</h2><h3 id="基础按钮"><a href="#基础按钮" class="headerlink" title="基础按钮"></a>基础按钮</h3><p>请将您的 Volantis 升级至 <u>2.4</u> 版本以上使用。</p><div class="tabs" id="btn"><ul class="nav-tabs"><li class="tab"><a href="#btn-1">语法格式</a></li><li class="tab"><a href="#btn-2">参数列表</a></li><li class="tab"><a href="#btn-3">示例写法</a></li><li class="tab active"><a href="#btn-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="btn-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn 样式参数（可选）, 标题, 链接, 图标（可选） %&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>可选的参数可以省略，但是前后顺序不能乱。</p></div></div><div class="tab-pane" id="btn-2"><p class='p subtitle'>样式参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regular, large, center</span><br></pre></td></tr></table></figure><p class='p subtitle'>图标</p><p>第1个或者第2个参数包含 <code>fa-</code> 的那个被识别为图标。</p></div><div class="tab-pane" id="btn-3"><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">不设置任何参数的 &#123;% btn 按钮, / %&#125; 适合融入段落中。</span><br><span class="line"></span><br><span class="line">regular 按钮适合独立于段落之外：</span><br><span class="line"></span><br><span class="line">&#123;% btn regular, 示例博客, https://xaoxuu.com, fas fa-play-circle %&#125;</span><br><span class="line"></span><br><span class="line">large 按钮更具有强调作用，建议搭配 center 使用：</span><br><span class="line"></span><br><span class="line">&#123;% btn center large, 开始使用, https://volantis.js.org/v2/getting-started/, fas fa-download %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="btn-4"><p>不设置任何参数的 <span class='btn'><a href='/' title='按钮'>按钮</a></span> 适合融入段落中。</p><p>regular 按钮适合独立于段落之外：</p><p><span class='btn regular'><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='示例博客'><i class='fas fa-play-circle'></i>示例博客</a></span></p><p>large 按钮更具有强调作用，建议搭配 center 使用：</p><p><span class='btn center large'><a href='https://volantis.js.org/v2/getting-started/' target="_blank" rel="noopener" title='开始使用'><i class='fas fa-download'></i>开始使用</a></span></p></div></div></div><h3 id="富文本按钮"><a href="#富文本按钮" class="headerlink" title="富文本按钮"></a>富文本按钮</h3><p>请将您的 Volantis 升级至 <u>2.3</u> 版本以上使用。</p><div class="tabs" id="btns"><ul class="nav-tabs"><li class="tab"><a href="#btns-1">语法格式</a></li><li class="tab"><a href="#btns-2">参数列表</a></li><li class="tab"><a href="#btns-3">示例写法</a></li><li class="tab active"><a href="#btns-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="btns-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="btns-2"><p>样式参数位置可以写图片样式、布局方式，多个样式参数用空格隔开。</p><p class='p subtitle'>圆角样式</p><p>默认为方形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rounded, circle</span><br></pre></td></tr></table></figure><p class='p subtitle'>布局方式</p><p>默认为自动宽度，适合视野内只有一两个的情况。</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">wide</td><td align="left">宽一点的按钮</td></tr><tr><td align="left">fill</td><td align="left">填充布局，自动铺满至少一行，多了会换行。</td></tr><tr><td align="left">center</td><td align="left">居中，按钮之间是固定间距。</td></tr><tr><td align="left">around</td><td align="left">居中分散</td></tr><tr><td align="left">grid2</td><td align="left">等宽最多2列，屏幕变窄会适当减少列数。</td></tr><tr><td align="left">grid3</td><td align="left">等宽最多3列，屏幕变窄会适当减少列数。</td></tr><tr><td align="left">grid4</td><td align="left">等宽最多4列，屏幕变窄会适当减少列数。</td></tr><tr><td align="left">grid5</td><td align="left">等宽最多5列，屏幕变窄会适当减少列数。</td></tr></tbody></table><p class='p subtitle'>增加文字样式</p><p>可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt;</code> 和 <code>&lt;p&gt;描述文字&lt;/p&gt;</code></p></div><div class="tab-pane" id="btns-3"><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>或者含有图标的按钮：</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">'fab fa-apple'</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">'fab fa-apple'</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="btns-4"><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p><div class="btns circle grid5">            <a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div><p>或者含有图标的按钮：</p><div class="btns rounded grid5">            <a href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1' target="_blank" rel="noopener">  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1' target="_blank" rel="noopener">  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>          </div></div></div></div><h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><p>请将您的 Volantis 升级至 <u>2.4</u> 版本以上使用。</p><div class="tabs" id="menu"><ul class="nav-tabs"><li class="tab"><a href="#menu-1">语法格式</a></li><li class="tab"><a href="#menu-2">示例写法</a></li><li class="tab active"><a href="#menu-3">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="menu-1"><p class='p subtitle'>容器</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% menu 下拉菜单, 图标 %&#125;</span><br><span class="line">菜单内容</span><br><span class="line">&#123;% endmenu %&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>菜单内容</p><p>菜单项</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% menuitem 文本, 链接, 图标 %&#125;</span><br></pre></td></tr></table></figure><p>分割线</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% menuitem hr %&#125;</span><br></pre></td></tr></table></figure><p>子菜单</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% submenu 嵌套菜单, 图标 %&#125;</span><br><span class="line">菜单内容</span><br><span class="line">&#123;% endsubmenu %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="menu-2"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% menu 下拉菜单 %&#125;</span><br><span class="line">&#123;% menuitem 主题源码, https://github.com/xaoxuu/hexo-theme-volantis/, fas fa-file-code %&#125;</span><br><span class="line">&#123;% menuitem 更新日志, https://github.com/xaoxuu/hexo-theme-volantis/releases/, fas fa-clipboard-list %&#125;</span><br><span class="line">&#123;% menuitem hr %&#125;</span><br><span class="line">&#123;% submenu 有疑问？, fas fa-question-circle %&#125;</span><br><span class="line">&#123;% menuitem 看 FAQ, /faqs/ %&#125;</span><br><span class="line">&#123;% menuitem 看 本站源码, https://github.com/xaoxuu/volantis-docs/ %&#125;</span><br><span class="line">&#123;% menuitem 提 Issue, https://github.com/xaoxuu/hexo-theme-volantis/issues/ %&#125;</span><br><span class="line">&#123;% endsubmenu %&#125;</span><br><span class="line">&#123;% endmenu %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="menu-3"><div class='dropmenu'>              <span>下拉菜单</span>              <i class='fas fa-caret-down'></i>              <ul class='list-v'>                <li>                <a href='https://github.com/xaoxuu/hexo-theme-volantis/' target="_blank" rel="noopener" title='主题源码'>                  <i class='fas fa-file-code fa-fw'></i>                  主题源码                </a>              </li><li>                <a href='https://github.com/xaoxuu/hexo-theme-volantis/releases/' target="_blank" rel="noopener" title='更新日志'>                  <i class='fas fa-clipboard-list fa-fw'></i>                  更新日志                </a>              </li><hr><li>              <a>                <i class=' fas fa-question-circle fa-fw'></i>                有疑问？              </a>              <ul class='list-v'>                <li>                <a href='/faqs/' title='看 FAQ'>                  看 FAQ                </a>              </li><li>                <a href='https://github.com/xaoxuu/volantis-docs/' target="_blank" rel="noopener" title='看 本站源码'>                  看 本站源码                </a>              </li><li>                <a href='https://github.com/xaoxuu/hexo-theme-volantis/issues/' target="_blank" rel="noopener" title='提 Issue'>                  提 Issue                </a>              </li>              </ul>            </li>              </ul>            </div></div></div></div><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h3><p>此插件移植自 <a href="https://theme-next.org/docs/tag-plugins/tabs" target="_blank" rel="noopener">NexT #tabs</a> 。请将您的 Volantis 升级至 <u>2.1</u> 版本以上使用。</p><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a href="#tab-id-1">语法格式</a></li><li class="tab"><a href="#tab-id-2">参数列表</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs tab-id %&#125;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab tab-name --&gt;</span></span></span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2020/03/18/f5PQlWisvm9zbgK.jpg)</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab tab-name --&gt;</span></span></span><br><span class="line"></span><br><span class="line">这里面写内容，支持的语法格式有限，请尽量<span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>不要<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span>写太过复杂的东西。</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-id-2"><p class='p subtitle'>tab-id</p><p>必填，如果一个页面有多个 tabs 时，tab-id 不能重复。</p><p class='p subtitle'>tab-name</p><p>标签文本。</p></div></div></div><h3 id="Folding"><a href="#Folding" class="headerlink" title="Folding"></a>Folding</h3><p>请将您的 Volantis 升级至 <u>2.3</u> 版本以上使用。</p><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><a href="#folding-1">语法格式</a></li><li class="tab"><a href="#folding-2">参数列表</a></li><li class="tab"><a href="#folding-3">示例写法</a></li><li class="tab active"><a href="#folding-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="folding-1"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="folding-2"><p>参数位置可以填写颜色和状态，多个参数用空格隔开。</p><p class='p subtitle'>颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blue, cyan, green, yellow, red</span><br></pre></td></tr></table></figure><p class='p subtitle'>状态</p><p>状态填写 <code>open</code> 代表默认打开。</p></div><div class="tab-pane" id="folding-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-wallpaper&#x2F;abstract&#x2F;41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line">- haha</span><br><span class="line">- hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha &lt;span&gt;&lt;img src&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;emoji&#x2F;tieba&#x2F;%E6%BB%91%E7%A8%BD.png&#39; style&#x3D;&#39;height:24px&#39;&gt;&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="folding-4"><details ><summary> <p>查看图片测试</p> </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details cyan open><summary> <p>查看默认打开的折叠框</p> </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> <p>查看代码测试</p> </summary>              <div class='content'>              <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line"></span><br><span class="line">查看代码测试</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> <p>查看列表测试</p> </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> <p>查看嵌套测试</p> </summary>              <div class='content'>              <details blue><summary> <p>查看嵌套测试2</p> </summary>              <div class='content'>              <details ><summary> <p>查看嵌套测试3</p> </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details></div></div></div><h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><p>包括图片、音频、视频。</p><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>Image 标签是一种针对单个图片应用场景的标签，支持图片描述文字和指定宽度。请将您的 Volantis 升级至 <u>2.6</u> 版本以上使用。</p><div class="tabs" id="fancybox"><ul class="nav-tabs"><li class="tab active"><a href="#fancybox-1">语法格式</a></li><li class="tab"><a href="#fancybox-2">参数列表</a></li><li class="tab"><a href="#fancybox-3">示例写法</a></li><li class="tab"><a href="#fancybox-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fancybox-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, 宽度（可选）, 描述（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="fancybox-2"><p class='p subtitle'>图片宽度</p><p>阿拉伯数字 + px</p><figure class="highlight md"><figcaption><span>example:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">300px</span><br></pre></td></tr></table></figure><p class='p subtitle'>图片描述</p><p>纯文本，不能包含引号。</p></div><div class="tab-pane" id="fancybox-3"><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">添加描述：</span><br><span class="line"></span><br><span class="line">&#123;% image https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg, 每天下课回宿舍的路，承载了太多记忆。 %&#125;</span><br><span class="line"></span><br><span class="line">指定宽度：</span><br><span class="line"></span><br><span class="line">&#123;% image https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg, 300px %&#125;</span><br><span class="line"></span><br><span class="line">指定宽度并添加描述：</span><br><span class="line"></span><br><span class="line">&#123;% image https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg, 300px, 每天下课回宿舍的路，承载了太多记忆。 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="fancybox-4"><p>添加描述：</p><img src='https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg' alt='每天下课回宿舍的路，承载了太多记忆。'><p>指定宽度：</p><img src='https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg' style='width:300px'><p>指定宽度并添加描述：</p><img src='https://i.loli.net/2020/04/06/zdeQiOY9rBCjhDR.jpg' alt='每天下课回宿舍的路，承载了太多记忆。' style='width:300px'></div></div></div><h3 id="Fancybox"><a href="#Fancybox" class="headerlink" title="Fancybox"></a>Fancybox</h3><p>Fancybox 标签是一种针对一组图片应用场景的标签。请将您的 Volantis 升级至 <u>2.2</u> 版本以上使用。</p><div class="tabs" id="fancybox"><ul class="nav-tabs"><li class="tab"><a href="#fancybox-1">语法格式</a></li><li class="tab"><a href="#fancybox-2">参数列表</a></li><li class="tab"><a href="#fancybox-3">示例写法</a></li><li class="tab active"><a href="#fancybox-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="fancybox-1"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fancybox 参数, 列数 %&#125;</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg</span>)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg)</span><br><span class="line">&#123;% endfancybox %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="fancybox-2"><p class='p subtitle'>对齐方向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left, center, right</span><br></pre></td></tr></table></figure><p class='p subtitle'>缩放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stretch</span><br></pre></td></tr></table></figure><p class='p subtitle'>列数</p><p>逗号后面直接写列数，支持 2 ～ 8 列。设定列列数之后就是「多行多图」布局，此时图片默认左对齐。为了避免图片大小不一，建议搭配 <code>stretch</code> 来时图片放大填充。</p></div><div class="tab-pane" id="fancybox-3"><p>一行一个图片</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fancybox %&#125;</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfancybox %&#125;</span><br></pre></td></tr></table></figure><p>一行多个图片（不换行）</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fancybox %&#125;</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg</span>)</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg</span>)</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/00E0F0ED-9F1C-407A-9AA6-545649D919F4.jpeg</span>)</span><br><span class="line">&#123;% endfancybox %&#125;</span><br></pre></td></tr></table></figure><p>多行多个图片（每行2～8个图片）</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fancybox stretch, 4 %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B951AE18-D431-417F-B3FE-A382403FF21B.jpeg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/AEB33F9D-7294-4CF1-B8C5-3020748A9D45.jpeg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/250662D4-5A21-4AAA-BB63-CD25CF97CFF1.jpeg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/10A0FCE5-36A1-4AD0-8CF0-019259A89E03.jpeg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B951AE18-D431-417F-B3FE-A382403FF21B.jpeg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/AEB33F9D-7294-4CF1-B8C5-3020748A9D45.jpeg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/250662D4-5A21-4AAA-BB63-CD25CF97CFF1.jpeg)</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/10A0FCE5-36A1-4AD0-8CF0-019259A89E03.jpeg)</span><br><span class="line">&#123;% endfancybox %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="fancybox-4"><p>一行一个图片</p><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt="图片描述"></p>            </div><p>一行多个图片（不换行）</p><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg" alt="图片描述"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg" alt="图片描述"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/00E0F0ED-9F1C-407A-9AA6-545649D919F4.jpeg" alt="图片描述"></p>            </div><p>多行多个图片（每行2～8个图片）</p><div class="gallery stretch" col='4'>              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B951AE18-D431-417F-B3FE-A382403FF21B.jpeg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/AEB33F9D-7294-4CF1-B8C5-3020748A9D45.jpeg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/250662D4-5A21-4AAA-BB63-CD25CF97CFF1.jpeg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/10A0FCE5-36A1-4AD0-8CF0-019259A89E03.jpeg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/B951AE18-D431-417F-B3FE-A382403FF21B.jpeg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/AEB33F9D-7294-4CF1-B8C5-3020748A9D45.jpeg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/250662D4-5A21-4AAA-BB63-CD25CF97CFF1.jpeg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/landscape/10A0FCE5-36A1-4AD0-8CF0-019259A89E03.jpeg" alt=""></p>            </div></div></div></div><h3 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h3><p>请将您的 Volantis 升级至 <u>2.4</u> 版本以上使用。</p><div class="tabs" id="audio"><ul class="nav-tabs"><li class="tab"><a href="#audio-1">语法格式</a></li><li class="tab"><a href="#audio-2">示例写法</a></li><li class="tab active"><a href="#audio-3">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane" id="audio-1"><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="audio-2"><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/xaoxuu/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="audio-3"><div class="audio"><audio controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div></div></div><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>请将您的 Volantis 升级至 <u>2.3</u> 版本以上使用。</p><div class="tabs" id="video"><ul class="nav-tabs"><li class="tab active"><a href="#video-1">语法格式</a></li><li class="tab"><a href="#video-2">参数列表</a></li><li class="tab"><a href="#video-3">示例写法</a></li><li class="tab"><a href="#video-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane active" id="video-1"><p class='p subtitle'>单个视频</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>多个视频</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos 对齐方向, 列数 %&#125;</span><br><span class="line">&#123;% video 视频链接 %&#125;</span><br><span class="line">&#123;% video 视频链接 %&#125;</span><br><span class="line">&#123;% video 视频链接 %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="video-2"><p class='p subtitle'>对齐方向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left, center, right</span><br></pre></td></tr></table></figure><p class='p subtitle'>列数</p><p>逗号后面直接写列数，支持 1 ～ 4 列。</p></div><div class="tab-pane" id="video-3"><p>100%宽度</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br></pre></td></tr></table></figure><p>50%宽度</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>25%宽度</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="video-4"><p>100%宽度</p><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><p>50%宽度</p><div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><p>25%宽度</p><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div></div></div><h3 id="APlayer"><a href="#APlayer" class="headerlink" title="APlayer"></a>APlayer</h3><p>主题对 APlayer 插件的样式进行了兼容。安装插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-tag-aplayer</span><br></pre></td></tr></table></figure><div class="note link"><p>官方文档： <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></p></div><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><h3 id="MathJax公式"><a href="#MathJax公式" class="headerlink" title="MathJax公式"></a>MathJax公式</h3><p>默认是不渲染的，如果文章内有公式，需要在 front-matter 中设置开启。</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 渲染公式（MathJax）</span><br><span class="line">date: 2020-02-23</span><br><span class="line">mathjax: true # false: 不渲染, true: 渲染, internal: 只在文章内部渲染，文章列表中不渲染</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">$$t+1=2$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\mbox&#123;积累因子&#125;=\begin&#123;cases&#125;</span><br><span class="line">1+ni &amp; \mbox&#123;单利&#125;\\\\</span><br><span class="line">(1+i)^n &amp; \mbox&#123;复利&#125;</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\sum<span class="emphasis">_&#123;i=0&#125;^n F_</span>i \cdot \phi (H, p<span class="emphasis">_i) - \sum_</span>&#123;i=1&#125;^n a<span class="emphasis">_i \cdot ( \tilde&#123;x_</span>i&#125;, \tilde&#123;y<span class="emphasis">_i&#125;) + b_</span>i \cdot ( \tilde&#123;x<span class="emphasis">_i&#125;^2 , \tilde&#123;y_</span>i&#125;^2 )</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\beta^*(D) = \mathop&#123;argmin&#125; \limits<span class="emphasis">_&#123;\beta&#125; \lambda &#123;||\beta||&#125;^2 + \sum_</span>&#123;i=1&#125;^n max(0, 1 - y<span class="emphasis">_i f_</span>&#123;\beta&#125;(x_i))</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><details ><summary> <p>示例效果</p> </summary>              <div class='content'>              <p>$$t+1=2$$</p><p>$$<br>\mbox{积累因子}=\begin{cases}<br>1+ni &amp; \mbox{单利}\\<br>(1+i)^n &amp; \mbox{复利}<br>\end{cases}<br>$$</p><p>$$<br>\begin{equation}<br>\sum_{i=0}^n F_i \cdot \phi (H, p_i) - \sum_{i=1}^n a_i \cdot ( \tilde{x_i}, \tilde{y_i}) + b_i \cdot ( \tilde{x_i}^2 , \tilde{y_i}^2 )<br>\end{equation}<br>$$<br>$$<br>\begin{equation}<br>\beta^*(D) = \mathop{argmin} \limits_{\beta} \lambda {||\beta||}^2 + \sum_{i=1}^n max(0, 1 - y_i f_{\beta}(x_i))<br>\end{equation}<br>$$</p>              </div>            </details><div class="note link"><p>如果公式仍无法正确渲染可以阅读 <a href="https://www.micdz.cn" target="_blank" rel="noopener">@MicDZ</a> 的这篇文章：<a href="https://www.micdz.cn/article/katex-on-volantis/" target="_blank" rel="noopener">《在material-x上使用KaTeX》</a>。</p></div><h2 id="Hexo-标签"><a href="#Hexo-标签" class="headerlink" title="Hexo 标签"></a>Hexo 标签</h2><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><p>引用书上的句子</p><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h4><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="行标、高亮"><a href="#行标、高亮" class="headerlink" title="行标、高亮"></a>行标、高亮</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n=eval(input())</span><br><span class="line"><span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line marked">   print(<span class="string">"Hello World"</span>)</span><br><span class="line"><span class="keyword">elif</span> n&gt;<span class="number">0</span>:</span><br><span class="line marked">   print(<span class="string">"He\nll\no \nWo\nrl\nd"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"Hello World"</span>:</span><br><span class="line marked">   print(c)</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:python line_number:true mark:3,5,8 %&#125;</span><br><span class="line">n=eval(input())</span><br><span class="line">if n==0:</span><br><span class="line">   print("Hello World")</span><br><span class="line">elif n&gt;0:</span><br><span class="line">   print("He\nll\no \nWo\nrl\nd")</span><br><span class="line">else:</span><br><span class="line">   for c in "Hello World":</span><br><span class="line">   print(c)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h3><p>在文章中插入 Pull quote</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h3><p>在文章中嵌入 jsFiddle</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h3><p>在文章中嵌入 Gist，<u>注意</u>：在国内无法加载。</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>在文章中插入 iframe</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Image-1"><a href="#Image-1" class="headerlink" title="Image"></a>Image</h3><p>在文章中插入指定大小的图片。</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] '"title text" "alt text"' %&#125;</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h3><p>插入 <code>source/downloads/code</code> 文件夹内的代码文件。<code>source/downloads/code</code> 不是固定的，取决于你在配置文件中 <code>code_dir</code> 的配置。</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;</span><br></pre></td></tr></table></figure><details ><summary> <p>示例</p> </summary>              <div class='content'>              <p>嵌入 <code>test.js</code> 文件全文</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript test.js %&#125;</span><br></pre></td></tr></table></figure>只嵌入第 3 行<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:3 to:3 test.js %&#125;</span><br></pre></td></tr></table></figure>嵌入第 5 行至第 8 行<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 to:8 test.js %&#125;</span><br></pre></td></tr></table></figure>嵌入第 5 行至文件结束<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 test.js %&#125;</span><br></pre></td></tr></table></figure>嵌入第 1 行至第 8 行<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript to:8 test.js %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h3><p>引用其他文章的链接。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><details ><summary> <p>示例</p> </summary>              <div class='content'>              <p>引用这篇文章：</p><figure class="highlight md"><figcaption><span>example.md:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">引用这篇文章：&#123;% post_link news/2020-02-22 %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h3><p>在文章中使用 <code>&lt;!-- more --&gt;</code>，那么 <code>&lt;!-- more --&gt;</code> 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。</p><div class="note link"><p>更多请见Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">#标签插件</a></p></div><p><br><br><span class='btn large center'><a href='https://github.com/xaoxuu/hexo-theme-volantis/issues/' target="_blank" rel="noopener" title='向开发者反馈问题'><i class='fas fa-paper-plane'></i>向开发者反馈问题</a></span></p><!--stackedit_data:eyJoaXN0b3J5IjpbMTcxNzg0MjgwNF19-->]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code-编程习惯养成</title>
      <link href="/2020/05/22/Bug/code-%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF%E5%85%BB%E6%88%90/"/>
      <url>/2020/05/22/Bug/code-%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF%E5%85%BB%E6%88%90/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9d59865bb4c298a0b704ee3d1293ee53edf6a6f30cf3bae9fd4b2d9ab084fdae"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bug-解决总结</title>
      <link href="/2020/05/19/Bug/bug-%E8%A7%A3%E5%86%B3%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/19/Bug/bug-%E8%A7%A3%E5%86%B3%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于bug"><a href="#一、关于bug" class="headerlink" title="一、关于bug"></a>一、关于bug</h2><p>在编写程序过程中，总会出现各种各样的bug，按bug得类型来分的话</p><ul><li>程序的逻辑出错</li><li>程序语法出错编译器不能通过</li></ul><p>对待bug的心态要端正，对bug，不能抵触不能畏惧不能怕麻烦，要想着解bug就是这个职业的要务之一，要有耐心，积极主动的去解决问题。一步一步的解决问题，所有的技术都是熟能生巧、</p><h2 id="二、解决bug的一些方法"><a href="#二、解决bug的一些方法" class="headerlink" title="二、解决bug的一些方法"></a>二、解决bug的一些方法</h2><h3 id="报错信息-理论知识"><a href="#报错信息-理论知识" class="headerlink" title="报错信息+理论知识"></a>报错信息+理论知识</h3><p>当一个bug摆在面前，首先要做的就是要认真阅读展现出来的出错信息，这里面有几点需要注意</p><blockquote><p><strong>提高英语</strong></p></blockquote><p>专业词汇的积累、阅读能力等</p><blockquote><p><strong>运用底层知识</strong></p></blockquote><p>学会运行所学过的理论知识，比如在编程过程中，出现路径相关的错误，首先是根据报错可以直接在代码里面更改为正确可运行代码，然后可以利用所学过的操作系统相关文件管理知识等来进一步底层分析之，最后可以旁通自己之前搭建环境过程种总是要配的环境变量，一起思考一起分析，发散性思考，触类旁通所学知识，运用之</p><blockquote><p><strong>IDE的Debug或print通法</strong></p></blockquote><p>熟悉各种开发环境的debug</p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><blockquote><p><strong>一个原则</strong>：“遇事不决，大事谷歌，小事百度”</p></blockquote><ul><li>谷歌需要一些手段才能进行，总结下来就是<strong>搭建一个机场</strong>，方便，安全</li><li>百度解决一些小问题，抑或是 <strong>“烂大街的易错知识”</strong></li><li>相关编程论坛，比如Stack Overflow、CSDN、博客园等（还是要用谷歌）</li></ul><blockquote><p><strong>结果择优原则</strong></p></blockquote><ul><li>环境统一：解决办法的环境需要和自己的bug的环境需要一致</li><li>非毁灭性原则：尽量不要做全局性的修改，比如用命令删除git的两个文件来改一个小bug，属实挖坑</li></ul><blockquote><p><strong>擅用官方文档</strong></p></blockquote><p>如果说出现的bug抑或是，使用某个知识出错，是在官方文档中能查到的，优先选择官方文档</p><p>就比如在使用python数据分析的时候，许多时候，很多包（pandas、numpy、matplotlib等）更新比较快，而网上找的一般都是旧版本的指导。同时<br>官方文档讲解更加全面，不过这过程中，要注意提高自身英语水平！</p><h3 id="“思维冥想体”"><a href="#“思维冥想体”" class="headerlink" title="“思维冥想体”"></a>“思维冥想体”</h3><blockquote><p><strong>地阶</strong></p></blockquote><p>运用万能学习方法，去复现一个学习（复现代码）过程，<strong>复盘</strong>bug之前的工作，来从中找出可能有哪些细节会导致出现该bug。</p><blockquote><p><strong>天阶</strong></p></blockquote><p>按照思路重写代码！再不行重装系统！</p><p>重构，让你的代码更优美和简洁~</p><p>重装，让你的世界焕然一新~</p><h2 id="三、多记录多总结多仔细"><a href="#三、多记录多总结多仔细" class="headerlink" title="三、多记录多总结多仔细"></a>三、多记录多总结多仔细</h2><blockquote><p>bug遇见的多了，也就由“形同陌路”转变为“日久生情”了!</p><p>良好的编程习惯加快解决速度</p></blockquote><p>做事情还是粗心，百分之九十的bug都来源于粗心，</p><h2 id="四、持续补充"><a href="#四、持续补充" class="headerlink" title="四、持续补充"></a>四、持续补充</h2><ul><li>在利用搜索引擎找到解决办法时候，不要 <strong>吃着嘴里的，想着锅里的</strong> ，找到一个办法，先将其解决办法看懂看透彻，不要这个方法还没看透彻就看下一个答案。</li><li>学会提取关键词来搜索，能提高很大效率</li></ul><!--stackedit_data:eyJoaXN0b3J5IjpbLTE2ODMwMjU1OTJdfQ==-->]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-常用类</title>
      <link href="/2020/05/16/Language/JAVA-%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2020/05/16/Language/JAVA-%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200509153329.png" alt=""></p><h2 id="Point2D类"><a href="#Point2D类" class="headerlink" title="Point2D类"></a>Point2D类</h2>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见使用总结</title>
      <link href="/2020/04/06/Environment/git%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/06/Environment/git%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p>git小总结</p><a id="more"></a><h2 id="一、Git安装和本地用户全局配置"><a href="#一、Git安装和本地用户全局配置" class="headerlink" title="一、Git安装和本地用户全局配置"></a>一、Git安装和本地用户全局配置</h2><p>官网<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载</a>并且安装</p><p>查看是否安装成功<code>win + R</code>输入git，出现git命令指南，则安装成功</p><p><strong>全局配置本地用户</strong>，在git Bash中进行下面配置（尽量仔细，检查一遍），下面的账号名字和邮箱都是github的账号所使用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;wztlink1013&quot;</span><br><span class="line">git config --global user.email &quot;2550374815@qq.com&quot;</span><br></pre></td></tr></table></figure><p>其中：global表示全局可用，如果要设置局部可用，则只需要删除global即可</p><p>验证是否配置成功：<code>git config --global --list</code></p><h2 id="二、利用SSH绑定Git和GitHub"><a href="#二、利用SSH绑定Git和GitHub" class="headerlink" title="二、利用SSH绑定Git和GitHub"></a>二、利用SSH绑定Git和GitHub</h2><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>输入<code>ssh-keygen -t rsa</code>，然后回车三下 <del>（有些时候要回车四下）</del></p><p>然后在用户管理员文件夹下生成两个文件夹id_rsa和id_rsa.pub,将后者内容添加到GitHub上即可。</p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>在github上的setting上添加新的ssh即可</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在git Bash输入：<code>ssh -T git@github.com</code></p><ul><li>如果出现Hi name !you are……证明绑定成功。</li><li>如果报错，则是因为少了一个文件，使用过程中直接点yes。具体<a href="https://blog.csdn.net/qq_34446663/article/details/81106018" target="_blank" rel="noopener">解决原理</a></li></ul><h2 id="三、Git向GitHub提交代码"><a href="#三、Git向GitHub提交代码" class="headerlink" title="三、Git向GitHub提交代码"></a>三、Git向GitHub提交代码</h2><p>了解pull和push</p><p><code>git push origin master</code></p><p><code>git pull origin master</code></p><h3 id="提交情况1：clone"><a href="#提交情况1：clone" class="headerlink" title="提交情况1：clone"></a>提交情况1：clone</h3><p>本地没有git仓库，也没有git init操作，需要先从GitHub下载</p><p>选定仓库克隆</p><blockquote><p>git clone <a href="https://github.com/wztlink1013/Python_DataAnalysis.git" target="_blank" rel="noopener">https://github.com/wztlink1013/Python_DataAnalysis.git</a></p></blockquote><p>对本地文件夹进行一系列更改之后，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git status   #查看仓库命令状态</span><br><span class="line">git add .    #文件提交到文件缓冲区</span><br><span class="line">git commmit -m &quot;描述本次修改信息&quot;    #提交仓库并且添加提交信息</span><br><span class="line">git log  #查看修改日志</span><br><span class="line">git status   #再次查看</span><br></pre></td></tr></table></figure><p>push到远程仓库</p><blockquote><p>首次推送：<code>git push -u origin master</code></p><p>非首次推送：<code>git push origin master</code></p></blockquote><h3 id="提交情况2：pull"><a href="#提交情况2：pull" class="headerlink" title="提交情况2：pull"></a>提交情况2：pull</h3><p>这种情况是，本地有git仓库，指之前已经进行git init等一系列命令对该文件夹操作过。新建一个例子：</p><blockquote><p><code>git init</code>初始化本地仓库</p><p><code>git remote add origin https://github.com/guobinhit/springmvc-tutorial.git</code>关联远程仓库</p><p><code>git pull origin master</code>同步远程仓库和本地仓库</p></blockquote><p>假如在本地新加文件：</p><blockquote><p>执行git status等命令</p><p>再执行<code>git push origin master</code>将本地新内容提交到远程仓库</p></blockquote><p><strong>注意！</strong>：在进行本地仓库和远程仓库的文件交互时，一定要先pull再push，不然会出未知错误。</p><h2 id="四、常用命令总结"><a href="#四、常用命令总结" class="headerlink" title="四、常用命令总结"></a>四、常用命令总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line">git status</span><br><span class="line">git add</span><br><span class="line">git commit</span><br><span class="line">git log</span><br><span class="line">git branch   #查看分支</span><br><span class="line">git checkout    #切换分支</span><br><span class="line">git merge   #合并分支</span><br><span class="line">git branch -d   #删除分支</span><br><span class="line">git tag #给分支添加标签</span><br><span class="line">git remote -v   #查看相关信息</span><br></pre></td></tr></table></figure><h2 id="五、部署多个github-coding等账号"><a href="#五、部署多个github-coding等账号" class="headerlink" title="五、部署多个github/+coding等账号"></a>五、部署多个github/+coding等账号</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>好处：一台设备可以使用多个github账号/github+coding等等多平台托管/搭建两个静态博客</p><p>取消全局用户配置（每建立一个新文件夹，需要输入使用账号），建立多个ssh密匙（如果是github账号+coding账号+gitee账号等）</p><p>SSH的公钥是GitHub连接本地仓库和远程仓库的标识，一个公钥只能对应一个GitHub账户，一个相同的公钥不能上传到不同的GitHub账户</p><p>一台电脑，可以生成多对公私钥，可以通过配置，将不同的公钥上传到不同的GitHub账号，那么就不存在单个公钥绑定多个GitHub账号的情况存在了</p><h3 id="多密匙生成"><a href="#多密匙生成" class="headerlink" title="多密匙生成"></a>多密匙生成</h3><ul><li><p>先进来该文件夹（忽略图片上写的字）<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle40/Snipaste_2020-04-06_20-44-15.png" alt=""></p></li><li><p>创建新密匙方法一（首选）</p></li></ul><p><code>ssh-keygen -t rsa -f  ~/.ssh/这里是新密钥名称 -C &quot;这里是你的邮箱&quot;</code></p><p>注意区别新密钥名称和旧密钥名称，不要相同！！</p><ul><li>创建新密匙方法二</li></ul><p>输入这个：<code>ssh-keygen -t rsa -C &quot;这里是你的邮箱&quot;</code></p><p>出现这两句：<br><code>Generating public/private rsa key pair.</code></p><p><code>Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):</code></p><p>注意此时需要你输入新密钥的名称，同样要注意区别新密钥名称和旧密钥名称，不要相同，之后再两次回车。</p><h3 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h3><p>.ssh根文件夹下没有config文件，需要新建</p><ul><li>新建config文件方法一</li></ul><p>在.ssh根路径下键入该命令<code>touch config</code></p><ul><li>新建config文件方法二</li></ul><p>记事本新建文件config文件！！没有后缀</p><ul><li>输入内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#第一个账号，默认使用的账号，不用做任何更改</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line">#第二个新账号，#&quot;xxxxxx&quot;为前缀名，可以任意设置，要记住，后面需要用到</span><br><span class="line">Host xxxxxx.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;这里是你创建的新密钥的名称</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># one(one@gmail.com)</span><br><span class="line">Host one.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_one</span><br><span class="line">User one</span><br><span class="line">    </span><br><span class="line"># two(two@gmail.com)</span><br><span class="line">Host two.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_two</span><br><span class="line">User two</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host myhost（这里是自定义的host简称，以后连接远程服务器就可以用命令ssh myhost）</span><br><span class="line">HostName 主机名可用ip也可以是域名(如:github.com或者bitbucket.org)</span><br><span class="line">Port 服务器open-ssh端口（默认：22,默认时一般不写此行）</span><br><span class="line">PreferredAuthentications   配置登录时用什么权限认证--可设为publickey,password publickey,keyboard-interactive等</span><br><span class="line">IdentityFile 证书文件路径（如~&#x2F;.ssh&#x2F;id_rsa_*)</span><br><span class="line">User 登录用户名(如：git)</span><br></pre></td></tr></table></figure><p>每个账号单独配置一个Host，每个Host要取一个别名，一般为每个Host主要配置HostName和IdentityFile两个属性，配置完保存即可。</p><p>Host的名字可以自定义名字，不过这个会影响git相关命令，例如：Host mygithub 这样定义的话，使用命令git clone git@mygithub:PopFisher/AndroidRotateAnim.git，git@后面紧跟的名字改为mygithub</p><blockquote><p><strong>mine</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle41/20200406210113.png" alt=""></p></blockquote><h3 id="部署SSH-key"><a href="#部署SSH-key" class="headerlink" title="部署SSH key"></a>部署SSH key</h3><p>将根文件夹下的<code>wztlink1013.pub</code>文件复制到github上，coding/gitee类似</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle41/20200406211135.png" alt=""><br>title可以随便填</p><h3 id="清缓存，添agent"><a href="#清缓存，添agent" class="headerlink" title="清缓存，添agent"></a>清缓存，添agent</h3><p>在根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br><span class="line">ssh-add xxxxxx #旧密钥名称，一般是id_rsa</span><br><span class="line">ssh-add xxxxxx #新创建的密钥名称</span><br></pre></td></tr></table></figure><p>如果执行以上命令出现错误：<code>Could not open a connection to your authentication agent.</code>，那么就需要先执行<code>ssh-agent bash</code>，再执行以上命令</p><h3 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h3><p>一下第一个是之前默认的github账号，默认即可，第二个是添加的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@xxxxxxx.github.com</span><br></pre></td></tr></table></figure><p>出现<code>Hi 你的用户名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则成功。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>取消全局用户名和邮箱配置（如果已经设置了全局的话）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><ul><li>clone</li></ul><p>原来：<code>git clone git@github.com: wztlink1013/learngit.git</code></p><p>现在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@wztlink1013.github.com: wztlink1013&#x2F;learngit.git</span><br><span class="line">git clone git@twicename.github.com: twicename&#x2F;learngit.git</span><br></pre></td></tr></table></figure><ul><li>单独为每个repo设置 用户名/邮箱【以文件夹为单位】<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;wztlink1013&quot;</span><br><span class="line">git config user.email &quot;2550374815@qq.com&quot;</span><br><span class="line"></span><br><span class="line">git config user.name &quot;twicename&quot;</span><br><span class="line">git config user.email &quot;123456789@qq.com&quot;</span><br></pre></td></tr></table></figure>如果报错：<code>fatal: not in a git directory</code>，说明没有进入.git目录下，具体路径：其中.git目录是隐藏的，需要你设置隐藏目录可见<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle41/20200406212615.png" alt=""></li></ul><p>执行<code>git config --list</code>查看设置是否成功</p><h2 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h2><ul><li><a href="https://github.com/guobinhit/cg-blog/blob/master/articles/github/README.md" target="_blank" rel="noopener">GitHub简单使用https://github.com/guobinhit/cg-blog/blob/master/articles/github/README.md</a></li><li><a href="https://www.itrhx.com/2019/01/18/A16-deploy-two-or-more-hexo-blogs/" target="_blank" rel="noopener">多账号https://www.itrhx.com/2019/01/18/A16-deploy-two-or-more-hexo-blogs/</a></li><li><a href="https://blog.csdn.net/u013716535/article/details/78621775" target="_blank" rel="noopener">多账号https://blog.csdn.net/u013716535/article/details/78621775</a></li><li><a href="https://blog.csdn.net/IT_xiao_bai/article/details/88563103?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">多账号https://blog.csdn.net/IT_xiao_bai/article/details/88563103?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbMTUxODQyMDQyOF19</li><li>-&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++-遗忘知识</title>
      <link href="/2020/04/05/Language/C++-%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/04/05/Language/C++-%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="这学期的C"><a href="#这学期的C" class="headerlink" title="这学期的C++"></a>这学期的C++</h2><p>C++语言是一种混合型语言（20世纪80年代兴起），它保留了C语言所有的优点，同时又增添了面向对象的编程机制，我们可以将C++语言视为C语言的改进和扩展。</p><p>基于C语言开发的C++语言兼容C语言，因此用C语言编写的程序基本上可以不做改动地用于C++。相对于C语言，C++语言对C语言的功能做了一定的扩充，同时增添了面向对象编程机制。引入面向对象编程机制，主要是为了提高开发效率。</p><p>早期C++许多的工作是对于C的强化和净化，并把完全兼容C作为强制性要求。C89、C99中许多的改进正是从C++中所引进。可见，Stroustrup对C语言的贡献非常之大。今天不管你对C++怎么看，C++的确扩展和进化了C，对C造成了深远的影响。</p><ol><li><p>在C++兼容C的过程中遇到了不少设计实现上的麻烦；以及守旧的K&amp;R C程序员对Stroustrup的批评。很多人说C++的恶梦恶梦就是要去兼容于C，这并不无道理（Java就干的比C++彻底得多），但这并不是Stroustrup考虑的，Stroustrup一边在使尽浑身解数来兼容C，另一方面在拼命地优化C。</p></li><li><p>C++最大的竞争对手正是C，他的目的就是——C能做到的，C++也必须做到，而且要做的更好。大家觉得是不是做到了？有多少做到了，有多少还没有做到？</p></li><li><p>对于同时关注的运行效率和开发效率的程序员，Stroustrup多次强调C++的目标是——“在保证效率与C语言相当的情况下，加强程序的组织性；能保证同样功能的程序，C++更短小”，这正是浅封装的核心思想。而不是过渡设计的OO。</p></li><li><p>《C++演化和设计》这本书中举了很多例子来回应那些批评C++有运行性能问题的人。C++在其第二个版本中，引入了虚函数机制，这是C++效率最大的瓶颈了，但我个人认为虚函数就是多了一次加法运算，但让我们的代码能有更好的组织，极大增加了程序的阅读和降底了维护成本。（注：Lippman的《深入探索C++对象模型》也说明了C++不比C的程序在运行性能低。Bruce的《Think in C++》也说C++和C的性能相差只有5%）</p></li><li><p>这本书中还讲了一些C++的痛苦的取舍，印象最深的就是多重继承，提出，拿掉，再被提出，反复很多次，大家在得与失中不断地辩论和取舍。这个过程让我最大的收获是——a) 对于任何一种设计都有好有坏，都只能偏重一方，b) 完全否定式的批评是不好的心态，好的心态应该是建设性地批评。</p></li></ol><p>相对运行于虚拟机语言，C/C++直接以静态形式把源程序编译为目标平台的机器码。一般而言，C/C++程序在编译及链接时可进行的优化最丰富，启动时的速度最快，运行时的额外内存开销最少。而C/C++相对动态语言也减少了运行时的动态类型检测。此外，C/C++的运行行为是确定的，且不会有额外行为，也不会有如垃圾收集(GC)而造成的不确定性延迟，而且C/C++的数据结构在内存中的布局也是确定的。有时C++的一些功能会使程序性能优于C，当中以内联和模版最为突出，这两项功能使C++标准库的sort()通常比C标准库的qsort()快多倍(C可用宏或人手编码去解决此问题)。另一方面，C/C++能直接映射机器码，之间没有另一层中间语言，因此可以做底层优化，例如使用内部(intrinsic)函数和嵌入汇编语言。然而，许多C++的性能优点并非免费午餐，代价包括较长的编译链接时间和较易出错，因而增加开发时间和成本。</p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>C++模板知识</p><ul><li>函数模板</li><li>类模板<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>STL概述当中，vector容器，顺序容器：向量vector、列表list、双端队列deque</li></ul><blockquote><p><a href="https://www.cnblogs.com/mr-wid/archive/2013/01/22/2871105.html" target="_blank" rel="noopener">https://www.cnblogs.com/mr-wid/archive/2013/01/22/2871105.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse配置Tomcat创建Servlet总结</title>
      <link href="/2020/04/02/Environment/eclipse%E9%85%8D%E7%BD%AETomcat%E5%88%9B%E5%BB%BAServlet%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/02/Environment/eclipse%E9%85%8D%E7%BD%AETomcat%E5%88%9B%E5%BB%BAServlet%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Eclipse的下载与安装与使用"><a href="#一、Eclipse的下载与安装与使用" class="headerlink" title="一、Eclipse的下载与安装与使用"></a>一、Eclipse的下载与安装与使用</h2><p><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">下载地址</a><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-02_10-37-06.png" alt=""></p><p><strong>注意不要下错版本，不然开发不了web环境</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-02_10-39-43.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-02_10-41-47.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle31/Snipaste_2020-04-02_10-49-44.png" alt=""></p><h2 id="二、Tomcat的下载与配置"><a href="#二、Tomcat的下载与配置" class="headerlink" title="二、Tomcat的下载与配置"></a>二、Tomcat的下载与配置</h2><p><a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">下载地址</a><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle32/Snipaste_2020-04-02_13-27-10.png" alt=""><br><strong>一直下一步即可</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-01_23-09-59.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle33/20200402141004.png" alt=""></p><p>打开浏览器 键入 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 进入页面则表示安装成功</p><p>添加环境变量，以下全在系统环境变量下配置<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle33/Snipaste_2020-04-02_14-17-34.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle33/20200402143121.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TOMCAT_HOME：C:\Program Files\Apache Software Foundation\Tomcat 9.0</span><br><span class="line">CATALINA_BASE：C:\Program Files\Apache Software Foundation\Tomcat 9.0;</span><br><span class="line">CATALINA_HOME：C:\Program Files\Apache Software Foundation\Tomcat 9.0;</span><br><span class="line">在classpath当中加入%CATALINA_HOME%\common\lib\servlet-api.jar;</span><br><span class="line">在path中加入%CATALINA_HOME%\bin;</span><br></pre></td></tr></table></figure><p>打开浏览器 键入 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 进入页面则表示配置成功</p><h2 id="三、Eclipse配置Tomcat"><a href="#三、Eclipse配置Tomcat" class="headerlink" title="三、Eclipse配置Tomcat"></a>三、Eclipse配置Tomcat</h2><p><strong>让Tomcat服务器显示在控制台上，将Web应用部署到Tomcat中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle31/Snipaste_2020-04-02_10-52-27.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle31/Snipaste_2020-04-02_10-54-39.png" alt=""><br>点击<code>Window</code> → <code>Show View</code> → <code>Servers</code> 也可以在控制台点击<code>Servers</code><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle35/Snipaste_2020-04-02_15-15-11.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle31/Snipaste_2020-04-02_10-56-44.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-02_11-11-04.png" alt=""><br><strong>双击点击</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle31/Snipaste_2020-04-02_11-03-12.png" alt=""></p><h2 id="四、Eclipse使用Servlet"><a href="#四、Eclipse使用Servlet" class="headerlink" title="四、Eclipse使用Servlet"></a>四、Eclipse使用Servlet</h2><h3 id="创建web工程"><a href="#创建web工程" class="headerlink" title="创建web工程"></a>创建web工程</h3><p><strong>创建过程中，要记得勾选生成web.xml文件选项</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle32/20200402133456.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle34/Snipaste_2020-04-02_15-11-19.png" alt=""></p><h3 id="添加相关文件"><a href="#添加相关文件" class="headerlink" title="添加相关文件"></a>添加相关文件</h3><p><strong>添加下面的四个文件</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle33/qweqweqweqweewgerwwetyre.png" alt=""></p><blockquote><p>HelloWordServlet.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.firstmyapp.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line"> System.out.println(<span class="string">"接受了客户端的请求----------------------------------------------------"</span>);</span><br><span class="line"> <span class="comment">// 设置响应类型:</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        <span class="comment">// 获取输出流:</span></span><br><span class="line">        PrintWriter pw = resp.getWriter();</span><br><span class="line">        <span class="comment">// 写入响应:</span></span><br><span class="line">        pw.write(<span class="string">"&lt;h1&gt;Hello, world!&lt;/h1&gt;"</span>);</span><br><span class="line">        <span class="comment">// 最后不要忘记flush强制输出:</span></span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>web.xml<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle32/Snipaste_2020-04-02_13-52-10.png" alt=""></p></blockquote><h3 id="运行并查看结果"><a href="#运行并查看结果" class="headerlink" title="运行并查看结果"></a>运行并查看结果</h3><p><strong>运行</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle32/Snipaste_2020-04-02_13-56-07.png" alt=""><br>然后查看console部分<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle33/Snipaste_2020-04-02_13-58-08.png" alt=""><br><strong>服务器响应情况</strong></p><blockquote><p>出现下图则说明成功<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle33/Snipaste_2020-04-02_14-01-03.png" alt=""></p></blockquote><blockquote><p>还可以回到控制台查看请求成功情况<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle33/Snipaste_2020-04-02_14-02-14.png" alt=""></p></blockquote><h2 id="五、过程中出现的问题"><a href="#五、过程中出现的问题" class="headerlink" title="五、过程中出现的问题"></a>五、过程中出现的问题</h2><h3 id="IDEA上的部署"><a href="#IDEA上的部署" class="headerlink" title="IDEA上的部署"></a>IDEA上的部署</h3><p>一开始从tomcat部署是完成的，具体参考我的csdn一篇小文章<a href="https://blog.csdn.net/ZTlink1013/article/details/104815639" target="_blank" rel="noopener">地址</a>。但是在后面使用Servlet的时候，不能成功部署，具体原因【图片内容来自<a href="https://blog.csdn.net/HughGilbert/article/details/56424137" target="_blank" rel="noopener">链接</a>！！】<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle34/Snipaste_2020-04-02_15-02-26.png" alt=""></p><blockquote><p>暂时分析：是和idea下的根目录下的某个配置文件的默认配置有关，需要更改相关内容，暂时不折腾了。先记录下，有空再折腾，先学习。还是eclipse好配置···</p></blockquote><h3 id="对待问题"><a href="#对待问题" class="headerlink" title="对待问题"></a>对待问题</h3><p>对待所发现的问题，第一要做的不是复制粘贴bug进谷歌百度，而是看待问题本身，找到问题的根源，用自己所学到的知识先加以分析理解，再想办法解决</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://blog.csdn.net/weixin_34026276/article/details/93834823?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34026276/article/details/93834823?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></li><li><a href="https://blog.csdn.net/qq_38190185/article/details/88198794?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_38190185/article/details/88198794?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></li><li><a href="https://www.yiibai.com/servlet/creating-servlet-in-eclipse-ide.html" target="_blank" rel="noopener">直接创建Servlet</a></li><li>快捷键：<a href="https://www.open-open.com/bbs/view/1320934157953" target="_blank" rel="noopener">https://www.open-open.com/bbs/view/1320934157953</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbMzc5OTkwMzkwXX0=</li><li>-&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
            <tag> tomcat </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse的使用总结</title>
      <link href="/2020/04/02/Environment/eclipse%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/02/Environment/eclipse%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Eclipse的下载与安装"><a href="#一、Eclipse的下载与安装" class="headerlink" title="一、Eclipse的下载与安装"></a>一、Eclipse的下载与安装</h2><p><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">下载地址</a><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-02_10-37-06.png" alt=""></p><p><strong>注意不要下错版本，不然开发不了web环境</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-02_10-39-43.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-02_10-41-47.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle31/Snipaste_2020-04-02_10-49-44.png" alt=""></p><h2 id="二、插件"><a href="#二、插件" class="headerlink" title="二、插件"></a>二、插件</h2><blockquote><p>进入：<code>Help Eclipse</code> <code>MarketPlace</code></p></blockquote><ul><li>Plugin1：Waka Time</li></ul><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><ul><li>字体设置</li><li>行数显示</li><li>更改工作空间的默认编码</li><li>代码增强显示，在设置中的<code>java</code>中的<code>content Assistant</code>中，将<code>.</code>改为<code>.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</code><h3 id="导入已存在的项目"><a href="#导入已存在的项目" class="headerlink" title="导入已存在的项目"></a>导入已存在的项目</h3></li></ul><!--stackedit_data:eyJoaXN0b3J5IjpbLTIwMTYxNDQ4NzIsLTUyNTQwNDQ4Ml19-->]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-找不到或无法加载主类</title>
      <link href="/2020/04/01/Bug/java-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB/"/>
      <url>/2020/04/01/Bug/java-%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/wangxiaoha/p/6293340.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangxiaoha/p/6293340.html</a></p><p><a href="https://bbs.csdn.net/topics/391862656?page=1" target="_blank" rel="noopener">https://bbs.csdn.net/topics/391862656?page=1</a></p><p><a href="https://blog.csdn.net/qinshijangshan/article/details/53048342?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1" target="_blank" rel="noopener">https://blog.csdn.net/qinshijangshan/article/details/53048342?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1</a></p><p><a href="https://blog.csdn.net/lanchunhui/article/details/76339252" target="_blank" rel="noopener">https://blog.csdn.net/lanchunhui/article/details/76339252</a></p><p><a href="https://blog.csdn.net/qq_37717853/article/details/78218606?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">eclipse下的输入参数方式</a></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-servlet技术</title>
      <link href="/2020/04/01/Web/JavaWeb-03servlet/"/>
      <url>/2020/04/01/Web/JavaWeb-03servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是Servlet"><a href="#一、什么是Servlet" class="headerlink" title="一、什么是Servlet"></a>一、什么是Servlet</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><p>Servlet就是在服务器端的Java接口或者说是类（叫法有狭义广义之分），处理客户端传来的请求并作出相应的响应这么一个网络模块。</p><ul><li>请求：客户端传来的调用或是一系列行为，同时也包含了请求所需要的数据。</li><li>响应：服务器根据客户端传来的请求做出响应，实时的展示给客户端。这之中Servlet相当于java类当中的一个接口，以请求来的信息作为输入，然后进行分析，做出相应。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figure-1/raw/master/figure1/20200624170501.png" alt=""></p><h3 id="jsp和sevlet"><a href="#jsp和sevlet" class="headerlink" title="jsp和sevlet"></a>jsp和sevlet</h3><p>servlet是控制层，jsp转换为servlet，用servlet来实现http请求。</p><p>【1】JSP第一次运行的时候会编译成Servlet，驻留在内存中以供调用。</p><p>【2】JSP是web开发技术，Servlet是服务器端运用的小程序，我们访问一个JSP页面时，服务器会将这个JSP页面转变成Servlet小程序运行得到结果后，反馈给用户端的浏览器。</p><p>【3】Servlet相当于一个控制层再去调用相应的JavaBean处理数据,最后把结果返回给JSP。</p><p>【4】Servlet主要用于转向，将请求转向到相应的JSP页面。</p><p>【5】JSP更多的是进行页面显示，Servlet更多的是处理业务，即JSP是页面，Servlet是实现JSP的方法。</p><p>【6】Servlet可以实现JSP的所有功能，但由于美工使用Servlet做界面非常困难，后来开发了JSP。</p><p>【7】JSP技术开发网站的两种模式：JSP + JavaBean；JSP + Servlet + JavaBean（一般在多层应用中, JSP主要用作表现层,而Servlet则用作控制层,因为在JSP中放太多的代码不利于维护，而把这留给Servlet来实现,而大量的重复代码写在JavaBean中）。</p><p>【8】二者之间的差别就是，开发界面是JSP直接可以编写。</p><p>比如在JSP中写Table标记：<code>&lt;table&gt;[数据]&lt;/table&gt;；</code></p><p>Servlet需要加入：<code>out.println(“&lt;table&gt;[数据]&lt;/table&gt;”)。</code></p><p>JSP文件在被应用服务器(例如：Tomcat、Resin、Weblogic和Websphere),调用过之后，就被编译成为了Servlet文件。也就是说在网页上显示的其实是Servlet文件。Tomcat下面JSP文件编译之后生成的Servlet文件被放在了work文件夹下，JSP中的HTML代码在Servlet都被out出来，而JSP代码按照标签的不同会放在不同的位置。</p><p>【9】JSP中嵌入JAVA代码，而Servlet中嵌入HTML代码。</p><p>【10】在一个标准的MVC架构中，Servlet作为Controller接受用户请求并转发给相应的Action处理，JSP作为View主要用来产生动态页面，EJB作为Model实现你的业务代码。</p><h2 id="二、Servlet一些基础"><a href="#二、Servlet一些基础" class="headerlink" title="二、Servlet一些基础"></a>二、Servlet一些基础</h2><h3 id="接口及其实现类"><a href="#接口及其实现类" class="headerlink" title="接口及其实现类"></a>接口及其实现类</h3><p>就是利用利用其类编写相关服务器端的相关运行代码</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>分三个阶段：初始化阶段-&gt;运行阶段-&gt;销毁阶段</p><h3 id="HttpServlet类"><a href="#HttpServlet类" class="headerlink" title="HttpServlet类"></a>HttpServlet类</h3><p>一般客户端和服务器之间都回使用http协议，所以Servlet接口中就提供了一个抽象类<code>javax.servlet.http.HttpServlet</code>，他是GernericServlet的一个子类，专门用来处理http协议的servlet；具体程序中就是用该类</p><blockquote><p>HelloWordServlet.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.firstmyapp.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line"> System.out.println(<span class="string">"接受了客户端的请求-----------------------------"</span>);</span><br><span class="line"> <span class="comment">// 设置响应类型:</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        <span class="comment">// 获取输出流:</span></span><br><span class="line">        PrintWriter pw = resp.getWriter();</span><br><span class="line">        <span class="comment">// 写入响应:</span></span><br><span class="line">        pw.write(<span class="string">"&lt;h1&gt;Hello, world!&lt;/h1&gt;"</span>);</span><br><span class="line">        <span class="comment">// 最后不要忘记flush强制输出:</span></span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Servlet虚拟路径的映射"><a href="#三、Servlet虚拟路径的映射" class="headerlink" title="三、Servlet虚拟路径的映射"></a>三、Servlet虚拟路径的映射</h2><h3 id="1-多重映射"><a href="#1-多重映射" class="headerlink" title="1. 多重映射"></a>1. 多重映射</h3><p>就相当于多加几个自己指定的访问路径，再web.xml中<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figure-1/raw/master/figure1/20200624170545.png" alt=""></p><h3 id="2-映射路径下使用通配符"><a href="#2-映射路径下使用通配符" class="headerlink" title="2. 映射路径下使用通配符"></a>2. 映射路径下使用通配符</h3><p>在其中使用通配符，一个目录下的所有路径都可以访问，其中有完全目录匹配，目录匹配，扩展名匹配<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figure-1/raw/master/figure1/20200624170609.png" alt=""></p><h3 id="3-缺省"><a href="#3-缺省" class="headerlink" title="3. 缺省"></a>3. 缺省</h3><p>通常作用是解决请求的资源找不到的情况，（404：请求的资源找不到）</p><h2 id="四、ServletConfig和ServletContext"><a href="#四、ServletConfig和ServletContext" class="headerlink" title="四、ServletConfig和ServletContext"></a>四、ServletConfig和ServletContext</h2><blockquote><p>ServletConfig接口</p></blockquote><p>类比于git根文件夹<code>.ssh</code>下的config配置文件，它是servlet的配置对象，目的就是获取与servlet的初始化参数</p><p>会使用常用的接口方法，</p><!--stackedit_data:eyJoaXN0b3J5IjpbMzY4NzEzNTY3XX0=-->]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web-JavaWeb概述</title>
      <link href="/2020/04/01/Web/JavaWeb-02JavaWeb%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/04/01/Web/JavaWeb-02JavaWeb%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、XML"><a href="#一、XML" class="headerlink" title="一、XML"></a>一、XML</h2><p>也是一种标记性语言，但是不同于html，目的其实就是用于传输数据，但是html的目的就是展示</p><p>可以类比，网站建好之后，需要将自己的文章链接提交到百度/谷歌，通过部署生成的<code>baidusitemap.xml</code>和<code>sitemap.xml</code>文件，sitemap提交方式提交以达到目的。</p><h3 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200401182647.png" alt="sitemap图例"><br>文档声明：图中最上面一行</p><p>元素定义：形式相当于html当中的标签，但不是标签，有根元素（一般只有一个），空元素等之分</p><p>属性定义：其中值需要用双引号或者单引号括起来</p><p>注释：和html一样</p><h3 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h3><p>有些时候文档内可能内容语义有歧义，所以需要对其xml文件内容尽可能的加以约束，DTD和Schema两种方式。具体语法···</p><h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><h2 id="二、http协议"><a href="#二、http协议" class="headerlink" title="二、http协议"></a>二、http协议</h2><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200401185824.png" alt=""></p><p>生成的web项目和服务器之间的传输协议</p><p>其中http1.1版本比1.0版本优化的是对http请求可以同时进行多个请求和响应</p><h3 id="http请求消息"><a href="#http请求消息" class="headerlink" title="http请求消息"></a>http请求消息</h3><p>客户端（web浏览器）向服务器发送请求，通常由请求行、请求头、实体内容三部分组成</p><p>请求行：请求方式，资源路径，http协议版本三部分组成。请求方式又有GET（所请求内容会在资源路径后面带上参数值，会有大小限制）和POST（安全，无大小限制）等方式</p><h3 id="http响应消息"><a href="#http响应消息" class="headerlink" title="http响应消息"></a>http响应消息</h3><p>也由三部分组成，有资源状态行、响应消息头、实体内容</p><p>资源状态行：协议版本 状态码 状态描述三部分组成。其中状态码有多种，常见的404就是服务器找不到相应请求的的资源</p><h2 id="三、Tomcat"><a href="#三、Tomcat" class="headerlink" title="三、Tomcat"></a>三、Tomcat</h2><h3 id="关于Tomcat"><a href="#关于Tomcat" class="headerlink" title="关于Tomcat"></a>关于Tomcat</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200401192132.png" alt=""></p><h3 id="下载安装Tomcat"><a href="#下载安装Tomcat" class="headerlink" title="下载安装Tomcat"></a>下载安装Tomcat</h3><p>安装等方式参考博客 <a href="https://blog.csdn.net/ZTlink1013/article/details/104815639" target="_blank" rel="noopener">https://blog.csdn.net/ZTlink1013/article/details/104815639</a></p><h2 id="四、Web应用"><a href="#四、Web应用" class="headerlink" title="四、Web应用"></a>四、Web应用</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><blockquote><p>web应用，就是一项工程，在编写web项目过程中，对文件按照“合乎规矩”的方式放置<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200401192816.png" alt=""></p></blockquote><h3 id="IDEA配置Tomcat"><a href="#IDEA配置Tomcat" class="headerlink" title="IDEA配置Tomcat"></a>IDEA配置Tomcat</h3><p>搭建web开发环境</p><p>资源的访问，点击请求的页面跳转设置<code>web.xml</code>中配置</p><blockquote><p>阮一峰的网站当中，有类似域名自动跳转，是否和域名解析有关呢？抑或是对web.xml进行了操作？</p></blockquote><p>对idea进行web开发 配置<a href="https://blog.csdn.net/ZTlink1013/article/details/104815639" target="_blank" rel="noopener">https://blog.csdn.net/ZTlink1013/article/details/104815639</a></p><!--stackedit_data:eyJoaXN0b3J5IjpbMTc0NjkxMTcyXX0=-->]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>eb-8080端口被占用</title>
      <link href="/2020/04/01/Bug/javaweb-8080%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
      <url>/2020/04/01/Bug/javaweb-8080%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080 is already in use</span><br><span class="line"></span><br><span class="line">Port 8080 required by Tomcat v8.0 Server at localhost is already in use. The server may already be running in another process, or a system process may be using the port. To start this server you will need to stop the other process or change the port number(s).</span><br><span class="line"></span><br><span class="line">Error running Tomcat8: Address localhost:8080 is already in use</span><br></pre></td></tr></table></figure><h2 id="一、分析并解决问题"><a href="#一、分析并解决问题" class="headerlink" title="一、分析并解决问题"></a>一、分析并解决问题</h2><blockquote><p>电脑中8080端口被占用，导致web项目不能运行</p></blockquote><blockquote><p>任务管理器关闭占用8080端口的程序</p></blockquote><h3 id="netstat-ano"><a href="#netstat-ano" class="headerlink" title="netstat -ano"></a>netstat -ano</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle37/Snipaste_2020-04-02_15-36-24.png" alt=""></p><h3 id="tasklist"><a href="#tasklist" class="headerlink" title="tasklist"></a>tasklist</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle37/Snipaste_2020-04-02_15-39-09.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle37/Snipaste_2020-04-02_15-38-42.png" alt=""></p><h3 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle37/Snipaste_2020-04-02_15-41-59.png" alt=""></p><!--stackedit_data:eyJoaXN0b3J5IjpbNjM0NjI4OTc0XX0=-->]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL-创建/插入表</title>
      <link href="/2020/03/29/Language/SQL-%E9%A6%96%E8%AF%BE/"/>
      <url>/2020/03/29/Language/SQL-%E9%A6%96%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于SQL"><a href="#一、关于SQL" class="headerlink" title="一、关于SQL"></a>一、关于SQL</h2><p>五个特点<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200329171116.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200329202440.png" alt=""></p><h2 id="二、数据定义"><a href="#二、数据定义" class="headerlink" title="二、数据定义"></a>二、数据定义</h2><h2 id="三、SQL语法"><a href="#三、SQL语法" class="headerlink" title="三、SQL语法"></a>三、SQL语法</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Create table student(</span><br><span class="line">Sno char(9),</span><br><span class="line">Same char(20),</span><br><span class="line">Ssex char(2),</span><br><span class="line">Sage smallint,</span><br><span class="line">Sdept char(20)</span><br><span class="line">);</span><br><span class="line">Create table course(</span><br><span class="line">Cno char(4),</span><br><span class="line">Cname char(40),</span><br><span class="line">Cpno char(4),</span><br><span class="line">Ccredit smallint</span><br><span class="line">);</span><br><span class="line">Create table sc(</span><br><span class="line">Sno char(9),</span><br><span class="line">Cno char(4),</span><br><span class="line">Grade smallint</span><br><span class="line">);</span><br><span class="line">Insert into student values(&#39;200215121&#39;,&#39;李勇&#39;,&#39;男&#39;,20,&#39;cs&#39;);</span><br><span class="line">Insert into student values(&#39;200215122&#39;,&#39;刘晨&#39;,&#39;女&#39;,19,&#39;cs&#39;);</span><br><span class="line">Insert into student values(&#39;200215123&#39;,&#39;王敏&#39;,&#39;女&#39;,18,&#39;ma&#39;);</span><br><span class="line">Insert into student values(&#39;200515124&#39;,&#39;张立&#39;,&#39;男&#39;,19,&#39;is&#39;);  </span><br><span class="line">Insert into course values (&#39;1&#39;,&#39;数据库&#39;,&#39;5&#39;,4);</span><br><span class="line">Insert into course values (&#39;2&#39;,&#39;数学&#39;,NULL,2);</span><br><span class="line">Insert into course values(&#39;3&#39;,&#39;信息系统&#39;,&#39;1&#39;,4);</span><br><span class="line">Insert into course values(&#39;4&#39;,&#39;操作系统&#39;,&#39;6&#39;,3);</span><br><span class="line">Insert into course values(&#39;5&#39;,&#39;数据结构&#39;,&#39;7&#39;,4);</span><br><span class="line">Insert into course values(&#39;6&#39;,&#39;数据处理&#39;,NULL,2);</span><br><span class="line">Insert into course values(&#39;7&#39;,&#39;pascal语言&#39;,&#39;6&#39;,4);</span><br><span class="line">Insert into sc values(&#39;200215121&#39;,&#39;1&#39;,92);</span><br><span class="line">Insert into sc values(&#39;200215121&#39;,&#39;2&#39;,85);</span><br><span class="line">Insert into sc values(&#39;200215121&#39;,&#39;3&#39;,88);</span><br><span class="line">Insert into sc values(&#39;200215122&#39;,&#39;2&#39;,90);</span><br><span class="line">Insert into sc values(&#39;200215122&#39;,&#39;3&#39;,80);</span><br></pre></td></tr></table></figure><h3 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h3>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataBase-绪论-关系数据库</title>
      <link href="/2020/03/29/DataBase/DataBase-%E7%BB%AA%E8%AE%BA-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/03/29/DataBase/DataBase-%E7%BB%AA%E8%AE%BA-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><h3 id="DBS"><a href="#DBS" class="headerlink" title="DBS"></a>DBS</h3><h4 id="DBS四个概念"><a href="#DBS四个概念" class="headerlink" title="DBS四个概念"></a>DBS四个概念</h4><p>数据Data、数据库DataBase、数据库管理系统DBMS、数据库系统DBS</p><blockquote><p>结构化数据和非结构化数据，例如用python处理文本数据抑或是图像数据，再进行数据清洗等规整为结构化数据，</p></blockquote><h4 id="DBS数据管理技术的发展"><a href="#DBS数据管理技术的发展" class="headerlink" title="DBS数据管理技术的发展"></a>DBS数据管理技术的发展</h4><p>数据管理、人工管理、文件系统管理、数据库系统管理</p><blockquote><p>第一次实验报告所使用的就是典型的文件系统管理，两者侧重点不同，数据库相对而言更加方便</p></blockquote><h4 id="DBS特点"><a href="#DBS特点" class="headerlink" title="DBS特点"></a>DBS特点</h4><p>数据结构化、数据的共享性高，冗余度低，易扩展、数据的独立性高、数据由DBMS统一管理和控制</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>概念模型、物理模型、逻辑模型</p><blockquote><p>同时分属两个不同层次，第一个是概念模型（按用户的观点对数据建模），第二个是物理模型和逻辑模型（按计算机的观点对数据建模）</p></blockquote><h4 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h4><h4 id="逻辑模型"><a href="#逻辑模型" class="headerlink" title="逻辑模型"></a>逻辑模型</h4><h4 id="物理模型"><a href="#物理模型" class="headerlink" title="物理模型"></a>物理模型</h4><h3 id="DBS的结构和组成"><a href="#DBS的结构和组成" class="headerlink" title="DBS的结构和组成"></a>DBS的结构和组成</h3><h2 id="二、关系数据库"><a href="#二、关系数据库" class="headerlink" title="二、关系数据库"></a>二、关系数据库</h2><h3 id="关系数据结构及形式化定义"><a href="#关系数据结构及形式化定义" class="headerlink" title="关系数据结构及形式化定义"></a>关系数据结构及形式化定义</h3><h3 id="关系操作与关系的完整性"><a href="#关系操作与关系的完整性" class="headerlink" title="关系操作与关系的完整性"></a>关系操作与关系的完整性</h3><h3 id="关系代数和关系演算"><a href="#关系代数和关系演算" class="headerlink" title="关系代数和关系演算"></a>关系代数和关系演算</h3><!--stackedit_data:eyJoaXN0b3J5IjpbMzQxMDU1NjI5XX0=-->]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANN神经网络</title>
      <link href="/2020/03/23/MachingLearning/ANN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/03/23/MachingLearning/ANN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本结构"><a href="#一、基本结构" class="headerlink" title="一、基本结构"></a>一、基本结构</h2><blockquote><p>神经网络基本结构<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323162726.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323162912.png" alt=""></p></blockquote><blockquote><p>何为深度学习？<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323163213.png" alt=""></p></blockquote><h2 id="二、感知器和激活函数"><a href="#二、感知器和激活函数" class="headerlink" title="二、感知器和激活函数"></a>二、感知器和激活函数</h2><blockquote><p>感知器<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323163849.png" alt="感知器的结构"></p></blockquote><blockquote><p>激活函数（其中w和x为向量点乘；b为偏置，w0）<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323164015.png" alt="阶跃函数"></p></blockquote><blockquote><p>激活函数的选择<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323164336.png" alt="激活函数"></p></blockquote><h2 id="三、感知器的训练"><a href="#三、感知器的训练" class="headerlink" title="三、感知器的训练"></a>三、感知器的训练</h2><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323165900.png" alt="感知器的训练"></p><h2 id="四、简单代码实现"><a href="#四、简单代码实现" class="headerlink" title="四、简单代码实现"></a>四、简单代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    构造函数的初始化</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,input_num,activator)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        构造函数的初始化</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.activator = activator</span><br><span class="line">        self.weights = [<span class="number">0.0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(input_num)]</span><br><span class="line">        self.bias = <span class="number">0.0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        打印学习后的权重值和偏置项</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'weights\t:%s\nbias\t:%f\n'</span> %(self.weights,self.bias)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self,input_vec)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        输入向量，输出感知器的计算结果</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> self.activator(</span><br><span class="line">            reduce(<span class="keyword">lambda</span> a,b: a+b,</span><br><span class="line">                    list(map(<span class="keyword">lambda</span> x,w: x*w,</span><br><span class="line">                        input_vec,self.weights)</span><br><span class="line">                 ),<span class="number">0.0</span>)+self.bias)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self,input_vecs,labels,iteration,rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        输入训练数据：一组向量、与每个向量对应的label；以及训练轮数、学习率</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(iteration):</span><br><span class="line">            self._one_iteration(input_vecs,labels,rate)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_one_iteration</span><span class="params">(self,input_vecs,labels,rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        迭代，把所有的训练数据过一遍</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        samples = zip(input_vecs,labels)</span><br><span class="line">        <span class="keyword">for</span> (input_vec,label) <span class="keyword">in</span> samples:</span><br><span class="line">            output = self.predict(input_vec)</span><br><span class="line">            self._update_weights(input_vec,output,label,rate)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update_weights</span><span class="params">(self,input_vec,output,label,rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        按照感知器规则更新权重</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        delta = label - output</span><br><span class="line">        self.weights = map(</span><br><span class="line">            <span class="keyword">lambda</span> x, w:w+rate*delta*x,</span><br><span class="line">            input_vec,self.weights)</span><br><span class="line">        self.weights = list(self.weights)</span><br><span class="line">        self.bias += rate*delta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    定义激活函数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_training_dataset</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    训练数据</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    input_vecs = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">    labels = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> input_vecs,labels</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_and_perceptron</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    训练感知器</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    p = Perceptron(<span class="number">2</span>,f)</span><br><span class="line">    input_vecs,labels = get_training_dataset()</span><br><span class="line">    p.train(input_vecs,labels,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    and_perception = train_and_perceptron()</span><br><span class="line">    print(and_perception)</span><br><span class="line">    print(<span class="string">'1 and 1 = %d'</span> % and_perception.predict([<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line">    print(<span class="string">'0 and 0 = %d'</span> % and_perception.predict([<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line">    print(<span class="string">'1 and 0 = %d'</span> % and_perception.predict([<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line">    print(<span class="string">'0 and 1 = %d'</span> % and_perception.predict([<span class="number">0</span>,<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323180526.png" alt=""></p></blockquote><!--stackedit_data:eyJoaXN0b3J5IjpbNzkxMzU1NzgwXX0=-->]]></content>
      
      
      <categories>
          
          <category> MachingLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-基本常用语法</title>
      <link href="/2020/03/23/Language/Python-%E5%9F%BA%E6%9C%AC%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/03/23/Language/Python-%E5%9F%BA%E6%9C%AC%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><ol><li>大事谷歌；小事百度【建立良好的编程式思维】</li><li>PEP8中的一些良好约定【编程规范】</li><li>字符串格式化：<br> print(‘%s–%d–%s’%(‘wuzutao’,20,’尼采般地抒情’))<pre><code>a. %i是什么格式的那啥？‘</code></pre></li><li>强制性类型转换：类C</li><li>时间和日期：<br> from datetime import datetime<br> dt=datetime(2019,5,12,9,20)<br> print(dt.year,dt.month,dt.day)<blockquote><blockquote><blockquote><p>2019  5  12<br> dt.strftime(‘%Y/%m/%d %H:%M’)<br> #datetime格式转化为字符串<br>‘2019/05/12 09:20’<br> datetime.strptime(‘20161203’, ‘%Y%m%d’)<br> #字符串转化为datetime格式<br>datetime.datetime(2016, 12, 3, 0, 0)</p></blockquote></blockquote></blockquote></li><li>pass函数<br> def f():<pre><code>#TODO: test passpass</code></pre></li><li>异常的处理<br> def test(x,y):<pre><code>try:    print(y/x)except:    print(&apos;输入的信息有误！&apos;)</code></pre><blockquote><blockquote><blockquote><p>test(2,8)<br>test(‘e’,8)</p></blockquote></blockquote></blockquote></li><li>range和range的区别！！！</li><li>对象传递和拷贝【类似C语言中的指针】<br> #变量传递、列表传递和C类似<br> #深拷贝和浅拷贝<br> import copy<br> a = [[1, 2, 3], [4, 5, 6]]<br> b = a<br> c = copy.copy(a)<br> d = copy.deepcopy(a)<br> print (‘a-id:’,id(a))#id相当于内存里面的地址<br> print (‘b-id:’,id(b))<br> print (‘c-id:’,id(c))<br> print (‘d-id:’,id(d))<br> a.append(15)<br> a[1][2] = 10<br> print (a)<br> print (b)<br> print (c)<br> print (d)<blockquote><blockquote><blockquote></blockquote><p> a-id: 2171119139144<br> b-id: 2171119139144<br> c-id: 2171119848136<br> d-id: 2171119140744<br> [[1, 2, 3], [4, 5, 10], 15]<br> [[1, 2, 3], [4, 5, 10], 15]<br> [[1, 2, 3], [4, 5, 10]]<br> [[1, 2, 3], [4, 5, 6]]</p></blockquote></blockquote><h2 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h2><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><pre><code>○ #转换为元组（list-&gt;tuple, string-&gt;tuple）l = [1, 2, 3]print (tuple(l))str = (&apos;Hello ChinaHadoop&apos;)print (tuple(str))&gt;&gt;&gt;(1, 2, 3) (&apos;H&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos; &apos;, &apos;C&apos;, &apos;h&apos;, &apos;i&apos;, &apos;n&apos;, &apos;a&apos;, &apos;H&apos;, &apos;a&apos;, &apos;d&apos;, &apos;o&apos;, &apos;o&apos;, &apos;p&apos;)○ tup1 = (1, 2, 3)#嵌套元组:tup2 = ((1, 2, 3), (4, 5))print (tup2)#合并元组:tup1 + tup2○ #拆包def test_1():    r=(2,4,5,32)    return ra, b, _, f=test_1()print(f)&gt;&gt;&gt; 32○ # 元组列表迭代tuple_lst = [(1, 2), (3, 4), (5, 6)]for x, y in tuple_lst:    print (x+y)&gt;&gt;&gt;3   7   11○ # 计数器列表/元组.(&apos;需要查找里面的某个对象的个数&apos;)</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><pre><code>○ list里面可以有不同类型的元素○ #合并列表lst_1=[352,2352,3,556]lst_2=[&apos;gew&apos;,&apos;f&apos;]&gt;lst_3 = lst_1 + lst_2&gt;lst_1.extend(lst_2)○ #sort函数和sorted函数list_1=[23,54,346,222,4,1]print(list_1.sort())     #查查版本print(sorted(list_1))  #sorted是新起的一个列表lst_6 = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;]lst_6.sort()print (lst_6)【!!!!打印出来是none===查查版本】&gt;&gt;&gt;[&apos;Analysis&apos;, &apos;Course&apos;, &apos;Data&apos;, &apos;Python&apos;, &apos;Welcome&apos;, &apos;to&apos;]lst_6.sort(key = len, reverse=True)print (lst_6)&gt;&gt;&gt;[&apos;Analysis&apos;, &apos;Welcome&apos;, &apos;Course&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;to&apos;]</code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><pre><code>○ #合并字典dict1 = {1:&apos;huhuhu&apos;}dict2 = {4: &apos;new1&apos;, 5: &apos;news&apos;}dict1.update(dict2)○ #通过多个列表创建字典dict_3 = {}l1 = [32,543,6,2,7,4]l2 = reversed(l1)for i1, i2 in zip(l1, l2):    dict_3[i1] = i2print (dict_3)&gt;&gt;&gt;{32: 4, 543: 7, 6: 2, 2: 6, 7: 543, 4: 32}&apos;&apos;&apos;hash函数来判断某个对象是否可以做键&apos;&apos;&apos;○ &apos;&apos;&apos;位置赋值；默认赋值；关键字赋值——format&apos;&apos;&apos;&apos;&apos;&apos;遍历字典的方式变了：keys，values，items&apos;&apos;&apos;天行九歌={&apos;韩非&apos;:&apos;逆鳞&apos;,&apos;卫庄&apos;:&apos;鲨齿&apos;,&apos;盖聂&apos;:&apos;渊虹&apos;}print(天行九歌)for ren,jian in 天行九歌.items():    print(&apos;{}--{}&apos;.format(ren,jian))&gt;&gt;&gt;{&apos;韩非&apos;: &apos;逆鳞&apos;, &apos;卫庄&apos;: &apos;鲨齿&apos;, &apos;盖聂&apos;: &apos;渊虹&apos;}</code></pre></li></ol><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><pre><code>○ a1=[1,3,4,1,35,2352,75]b1=[3,2352,24354,4332432,54]a=set(a1)b=set(b1)print(a)print(b)a | b#并；a &amp; b#交；a - b#呃。。。；a ^ b#呃。。。；a.issubset(b)#判断子集&gt;&gt;&gt;Falsea.issuperset(b)#判断父集&gt;&gt;&gt;False</code></pre><h2 id="三、高级特性"><a href="#三、高级特性" class="headerlink" title="三、高级特性"></a>三、高级特性</h2><h3 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h3><pre><code>○ str_lst = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;]result = [x.upper() for x in str_lst if len(x) &gt; 4]print (result)&gt;&gt;&gt;[&apos;WELCOME&apos;, &apos;PYTHON&apos;, &apos;ANALYSIS&apos;, &apos;COURSE&apos;]</code></pre><h3 id="多函数模式"><a href="#多函数模式" class="headerlink" title="多函数模式"></a>多函数模式</h3><pre><code>○ str_lst = [&apos;$1.123&apos;, &apos; $1123.454&apos;, &apos;$899.12312&apos;]def remove_space(str):    &quot;&quot;&quot;        remove space    &quot;&quot;&quot;    str_no_space = str.replace(&apos; &apos;, &apos;&apos;)    return str_no_spacedef remove_dollar(str):    &quot;&quot;&quot;        remove $    &quot;&quot;&quot;    if &apos;$&apos; in str:        return str.replace(&apos;$&apos;, &apos;&apos;)    else:        return strdef clean_str_lst(str_lst, operations):    &quot;&quot;&quot;        clean string list    &quot;&quot;&quot;    result = []    for item in str_lst:        for op in operations:            item = op(item)        result.append(item)    return resultclean_operations = [remove_space, remove_dollar]result = clean_str_lst(str_lst, clean_operations)print (result)&gt;&gt;&gt;[&apos;1.123&apos;, &apos;1123.454&apos;, &apos;899.12312&apos;]</code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><pre><code>○ str_lst = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;]str_lst.sort(key=lambda x:len(x)) # sort by lengthprint (str_lst)str_lst.sort(key=lambda x:x[-1]) # sort by the last letterprint (str_lst)&gt;&gt;&gt;[&apos;to&apos;, &apos;Data&apos;, &apos;Python&apos;, &apos;Course&apos;, &apos;Welcome&apos;, &apos;Analysis&apos;][&apos;Data&apos;, &apos;Course&apos;, &apos;Welcome&apos;, &apos;Python&apos;, &apos;to&apos;, &apos;Analysis&apos;]</code></pre><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><pre><code>○ def gen_test():    for i in range(3):        yield igen = gen_test() #此时不执行生成器type(gen)for i in gen:    print(i)#用意何在呢？？！！&gt;&gt;&gt;0  1  2</code></pre><h2 id="四、常用函数"><a href="#四、常用函数" class="headerlink" title="四、常用函数"></a>四、常用函数</h2><h3 id="序列函数-amp-zip使用"><a href="#序列函数-amp-zip使用" class="headerlink" title="序列函数&amp;zip使用"></a>序列函数&amp;zip使用</h3><pre><code>a. enumerate函数list_11 = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;] for i, item in enumerate(lst_6):    print (&apos;%i-%s&apos; %(i, item))&gt;&gt;&gt;0-Analysis 1-Welcome 2-Course 3-Python 4-Data 5-tostr_dict = dict((i, item) for i, item in enumerate(list_11))print (str_dict)&gt;&gt;&gt;{0: &apos;Welcome&apos;, 1: &apos;to&apos;, 2: &apos;Python&apos;, 3: &apos;Data&apos;, 4: &apos;Analysis&apos;, 5: &apos;Course&apos;}b. zip压缩lst_6 = [&apos;Welcome&apos;, &apos;to&apos;, &apos;Python&apos;, &apos;Data&apos;, &apos;Analysis&apos;, &apos;Course&apos;]lst_8 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]zip_lst = zip(lst_6, lst_8)print(list(zip_lst))#方式一：直接转化为列表print(dict(list(zip_lst)))#方式二：转化为字典for i in zip_lst:    print (i)#方式三：直接遍历解压：print(*zip_lst)print(lst_6)c. reversed逆序输出</code></pre><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><pre><code>a. #函数可以作为变量使用;也可以将函数作为参数使用import mathdef func_add(x, y, f):    &quot;&quot;&quot;        functional addition    &quot;&quot;&quot;    return f(x) + f(y)print (func_add(4, 25, math.sqrt))print (func_add(-4, 25, abs))&gt;&gt;&gt;7.0    29</code></pre><h3 id="map和reduce"><a href="#map和reduce" class="headerlink" title="map和reduce"></a>map和reduce</h3><pre><code>a. &apos;&apos;&apos;map函数&apos;&apos;&apos;list_1=[1,4,9]aaa = [x**2 for x in list_1]print (aaa)bbb = map(math.sqrt, aaa)print (bbb)&gt;&gt;&gt;[1, 16, 81]</code></pre><p>&lt;map object at 0x000002145B2B77F0&gt;</p><h3 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h3><pre><code>a. 天行=[&apos;韩非&apos;,&apos;卫庄&apos;,&apos;张良&apos;,&apos;盖聂&apos;,&apos;逆鳞&apos;]def fx(x):    y=[&apos;逆鳞&apos;]    if x in y:        return xfiltered_lst = filter(fx,天行)print(天行)print(list(filtered_lst))#注意python2和3的区别，很多时候要区别出来列表等序列，加上list很有必要&gt;&gt;&gt;[&apos;韩非&apos;, &apos;卫庄&apos;, &apos;张良&apos;, &apos;盖聂&apos;, &apos;逆鳞&apos;] [&apos;逆鳞&apos;]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-数组越界和格式输出</title>
      <link href="/2020/03/22/Bug/java-%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E5%92%8C%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA/"/>
      <url>/2020/03/22/Bug/java-%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E5%92%8C%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数组越界"><a href="#一、数组越界" class="headerlink" title="一、数组越界"></a>一、数组越界</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ArrayIndexOutOfBoundsException</span><br></pre></td></tr></table></figure><p>在进行判断条件的时候，注意java当中的数组“尾巴”不要溢出，数组arr的合法错误范围是[0, arr.length-1]</p><blockquote><ul><li>解决办法</li><li>①debug看数组的尾巴部分输出情况【数组空间小的情况】</li><li>②打印出遍历数组的索引值【通法】</li></ul></blockquote><p>回顾java初始化数组的方式：</p><ul><li><p>静态初始化：初始化时由程序员显式指定每个数组元素的初始值，有系统决定数组的长度</p><blockquote><p>arrayName = new type[]{element1,element2,element3…}</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int[] intArr;</span><br><span class="line">intArr &#x3D; new int[]&#123;1,2,3,4,5,9&#125;;</span><br><span class="line">或者</span><br><span class="line">String[] strArr &#x3D; &#123;&quot;one&quot;,&quot;two&quot;,&quot;three&quot;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>动态初始化：初始化时由程序员指定数组的长度，由系统初始化每个数组元素的默认值</p><blockquote><p>arrayName = new type[length];</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] price &#x3D; new int[4];</span><br></pre></td></tr></table></figure><h2 id="二、printf；println；print"><a href="#二、printf；println；print" class="headerlink" title="二、printf；println；print"></a>二、printf；println；print</h2></li><li><p>printf：遇到浮点型数值，继承C语言里面的使用，<strong>格式化</strong>输出（注意，参数顺序）</p></li><li><p>print：就是一般的标准输出，但是不换行</p></li><li><p>println：比print多的就是最后会换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">double</span> j = <span class="number">5</span>;</span><br><span class="line">System.out.print(<span class="string">"用print输出i:"</span>+ i);</span><br><span class="line">System.out.println( <span class="string">"用println输出i:"</span>+ i);</span><br><span class="line">System.out.printf(<span class="string">"i的值为%d,j的值为%f"</span>, i,j);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用print输出i:<span class="number">4</span>用println输出i:<span class="number">4</span></span><br><span class="line">i的值为<span class="number">4</span>,j的值为<span class="number">5.000000</span></span><br></pre></td></tr></table></figure></li><li><p>printf补充</p><blockquote><p><code>%.2f</code>的意思是输出两位小数点<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/2020032218030er1.png" alt=""></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2020/03/14/DataStructure/DataStructure-%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/03/14/DataStructure/DataStructure-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、小概念"><a href="#一、小概念" class="headerlink" title="一、小概念"></a>一、小概念</h2><ul><li>首元结点：第一个有元素的结点</li><li>头结点：一般不放元素，“L”</li><li>头指针：指向链表的第一个结点，有头结点则为头结点的指针，反之，指向首元结点的指针</li></ul><blockquote><p><a href="https://www.jianshu.com/p/73d56c3d228c" target="_blank" rel="noopener">参考资料</a></p></blockquote><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data; <span class="comment">//结点的数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span> <span class="comment">//结点的指针域</span></span><br><span class="line">&#125;LNode, *LinkList; <span class="comment">//LinkList为指向结构体LNode的指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList_L</span><span class="params">(LinkList &amp;L)</span><span class="comment">//构造一个空的单链表L//结构体指针类型变量做为函数的形式参数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> LNode;     <span class="comment">//生成新结点作为头结点，用头指针L指向头结点//变量名 = new 类型</span></span><br><span class="line"><span class="keyword">if</span>(!L)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//生成结点失败</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;   <span class="comment">//头结点的指针域置空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_H</span><span class="params">(LinkList &amp;L)</span><span class="comment">//前插法创建单链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//输入n个元素的值，建立到头结点的单链表L</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LinkList s; <span class="comment">//定义一个所建立的结构体指针变量</span></span><br><span class="line">L=<span class="keyword">new</span> LNode; <span class="comment">//生成新结点作为头结点，用头指针L指向头结点</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>; <span class="comment">//先建立一个带头结点的空链表</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"请输入元素个数n："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"请依次输入n个元素："</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"前插法创建单链表..."</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">s=<span class="keyword">new</span> LNode; <span class="comment">//生成新结点s</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s-&gt;data; <span class="comment">//输入元素值赋给新结点的数据域</span></span><br><span class="line">s-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=s; <span class="comment">//将新结点s插入到头结点之后</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_R</span><span class="params">(LinkList &amp;L)</span><span class="comment">//尾插法创建单链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//输入n个元素的值，建立带表头结点的单链表L</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LinkList s, r;</span><br><span class="line">L=<span class="keyword">new</span> LNode;</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>; <span class="comment">//先建立一个带头结点的空链表</span></span><br><span class="line">r=L; <span class="comment">//尾指针r指向头结点</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"请输入元素个数n："</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"请依次输入n个元素："</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"尾插法创建单链表..."</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">s=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s-&gt;data; <span class="comment">//输入元素值赋给新结点的数据域</span></span><br><span class="line">s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">r-&gt;next=s;<span class="comment">//将新结点s插入尾结点*r之后</span></span><br><span class="line">r=s;<span class="comment">//r指向新的尾结点s</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem_L</span><span class="params">(LinkList L, <span class="keyword">int</span> i, <span class="keyword">int</span> &amp;e)</span><span class="comment">//单链表的取值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//在带头结点的单链表L中查找第i个元素</span></span><br><span class="line"><span class="comment">//用e记录L中第i个数据元素的值</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LinkList p;</span><br><span class="line">p=L-&gt;next;<span class="comment">//p指向首元结点</span></span><br><span class="line">j=<span class="number">1</span>; <span class="comment">//j为计数器</span></span><br><span class="line"><span class="keyword">while</span> (j&lt;i &amp;&amp; p) <span class="comment">//顺链域向后扫描，直到p指向第i个元素或p为空</span></span><br><span class="line">    &#123;</span><br><span class="line">p=p-&gt;next; <span class="comment">//p指向下一个结点类似结点的自加</span></span><br><span class="line">j++; <span class="comment">//计数器j相应加1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j&gt;i)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//i值不合法i＞n或i&lt;=0</span></span><br><span class="line">e=p-&gt;data; <span class="comment">//取第i个结点的数据域</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LocateElem_L</span><span class="params">(LinkList L, <span class="keyword">int</span> e)</span> <span class="comment">//按值查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//在带头结点的单链表L中查找值为e的元素</span></span><br><span class="line">LinkList p;</span><br><span class="line">p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; p-&gt;data!=e)<span class="comment">//顺链域向后扫描，直到p为空或p所指结点的数据域等于e</span></span><br><span class="line">p=p-&gt;next; <span class="comment">//p指向下一个结点</span></span><br><span class="line"><span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//查找失败p为NULL</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span><span class="comment">//单链表的插入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//在带头结点的单链表L中第i个位置插入值为e的新结点</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LinkList p, s;</span><br><span class="line">p=L;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p&amp;&amp;j&lt;i<span class="number">-1</span>) <span class="comment">//查找第i-1个结点，p指向该结点</span></span><br><span class="line">    &#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j&gt;i<span class="number">-1</span>)<span class="comment">//i＞n+1或者i＜1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">s=<span class="keyword">new</span> LNode;     <span class="comment">//生成新结点</span></span><br><span class="line">s-&gt;data=e;       <span class="comment">//将新结点的数据域置为e</span></span><br><span class="line">s-&gt;next=p-&gt;next; <span class="comment">//将新结点的指针域指向结点ai</span></span><br><span class="line">p-&gt;next=s;       <span class="comment">//将结点p的指针域指向结点s</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i)</span> <span class="comment">//单链表的删除</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//在带头结点的单链表L中，删除第i个位置</span></span><br><span class="line">LinkList p, q;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">p=L;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((p-&gt;next)&amp;&amp;(j&lt;i<span class="number">-1</span>)) <span class="comment">//查找第i-1个结点，p指向该结点</span></span><br><span class="line">&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;next)||(j&gt;i<span class="number">-1</span>))<span class="comment">//当i&gt;n或i&lt;1时，删除位置不合理</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">q=p-&gt;next;        <span class="comment">//临时保存被删结点的地址以备释放空间</span></span><br><span class="line">p-&gt;next=q-&gt;next; <span class="comment">//改变删除结点前驱结点的指针域</span></span><br><span class="line"><span class="keyword">delete</span> q;        <span class="comment">//释放被删除结点的空间</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Listprint_L</span><span class="params">(LinkList L)</span> <span class="comment">//单链表的输出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">"\t"</span>;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,x,e,choose;</span><br><span class="line">LinkList L;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1. 初始化\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2. 创建单链表（前插法）\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"3. 创建单链表（尾插法）\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"4. 取值\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"5. 查找\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"6. 插入\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"7. 删除\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"8. 输出\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"0. 退出\n"</span>;</span><br><span class="line">choose=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (choose!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入数字选择:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;choose;</span><br><span class="line"><span class="keyword">switch</span> (choose)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//初始化一个空的单链表</span></span><br><span class="line"><span class="keyword">if</span> (InitList_L(L))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化一个空的单链表!\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//创建单链表（前插法）</span></span><br><span class="line">CreateList_H(L);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"前插法创建单链表输出结果:\n"</span>;</span><br><span class="line">            Listprint_L(L);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//创建单链表（尾插法）</span></span><br><span class="line">CreateList_R(L);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"尾插法创建单链表输出结果:\n"</span>;</span><br><span class="line">            Listprint_L(L);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: <span class="comment">//单链表的按序号取值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个位置i用来取值:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="keyword">if</span> (GetElem_L(L,i,e))</span><br><span class="line">            &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查找成功\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; i &lt;&lt; <span class="string">"个元素是："</span>&lt;&lt;e&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查找失败\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: <span class="comment">//单链表的按值查找</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入所要查找元素x:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span> (LocateElem_L(L,x))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查找成功\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查找失败! "</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: <span class="comment">//单链表的插入</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入插入的位置和元素（用空格隔开）:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (ListInsert_L(L, i, x))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入成功.\n\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入失败!\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: <span class="comment">//单链表的删除</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入所要删除的元素位置i:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line"><span class="keyword">if</span> (ListDelete_L(L, i))</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"删除成功!\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"删除失败!\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>: <span class="comment">//单链表的输出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"当前单链表的数据元素分别为:\n"</span>;</span><br><span class="line">Listprint_L(L);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C-遗忘知识</title>
      <link href="/2020/03/14/Language/C-%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/14/Language/C-%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>相关概念的理解容易混淆，记住之前学习理解的一个准则！<code>*p 的理解意义就是p 所指向的那个东西</code></p><ul><li>取地址符&amp;</li><li>解引用运算符*</li></ul><blockquote><p><a href="https://blog.csdn.net/soonfly/article/details/51131141" target="_blank" rel="noopener">https://blog.csdn.net/soonfly/article/details/51131141</a></p></blockquote><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li>一些概念<blockquote><ul><li>结构体:构造（定义新的数据类型）</li><li>结构体变量:定义（两种）；结构体变量访问结构体里面的成员：<code>.</code>；指针访问成员的时候<code>-&gt;</code></li><li>结构体数组：变量很多</li><li>结构体指针：指向结构体变量的指针，定义：<code>struct Student *p</code>；指向结构体数组的指针</li></ul></blockquote></li><li>C里面的<strong>结构体、共用体、枚举体</strong>根据这几类来构造新的数据类型，比如链表的初始实现，就是利用指针和结构体来实现</li><li><strong>typedef</strong>给结构体制定新的类型名  eg：计数专用变量<code>typedef int Count</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+PicGo构建免费图床及其高效使用</title>
      <link href="/2020/02/25/Hexo/PicGo%E5%92%8CGitHub%E6%9E%84%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/25/Hexo/PicGo%E5%92%8CGitHub%E6%9E%84%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、搭建缘由"><a href="#一、搭建缘由" class="headerlink" title="一、搭建缘由"></a>一、搭建缘由</h2><p>一开始搭建博客，避免不了要用许多图片，最初使用七牛云来做博客图床，但是后来发现，七牛云只有30天的临时域名，hhhhhhh，果然啊，天下就没有免费的好事啊~后来就发现GitHub配合PicGo可以作图床，而且加上jsDlivr速度可观。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle17/20200329215345.png" alt=""></p><h2 id="二、GitHub相关配置"><a href="#二、GitHub相关配置" class="headerlink" title="二、GitHub相关配置"></a>二、GitHub相关配置</h2><h3 id="新建figure图床仓库"><a href="#新建figure图床仓库" class="headerlink" title="新建figure图床仓库"></a>新建figure图床仓库</h3><p>常规新建仓库方式，命名figure（可以换，下面仓库名也得跟着换）<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle17/20200329215105.png" alt=""></p><h3 id="生成一个Token密匙"><a href="#生成一个Token密匙" class="headerlink" title="生成一个Token密匙"></a>生成一个Token密匙</h3><p>点击setting<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle17/20200329215153.png" alt=""></p><h2 id="三、PicGo相关配置"><a href="#三、PicGo相关配置" class="headerlink" title="三、PicGo相关配置"></a>三、PicGo相关配置</h2><h3 id="下载及注意事项"><a href="#下载及注意事项" class="headerlink" title="下载及注意事项"></a>下载及注意事项</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">下载地址</a></p><p>注意：下载picgo时候，要科学上网，谷歌插件没用，只能用小飞机或其他的软件（得开全局配置下载）</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle2/20200225213841.png" alt=""></p><h2 id="四、高效写博客"><a href="#四、高效写博客" class="headerlink" title="四、高效写博客"></a>四、高效写博客</h2><h3 id="Snipaste截图软件"><a href="#Snipaste截图软件" class="headerlink" title="Snipaste截图软件"></a>Snipaste截图软件</h3><blockquote><p><strong>常用</strong>快捷键【惠普💻+非机械键盘，所以记录下】</p></blockquote><p>fn+f1：截屏（可编辑）</p><p>esc：退出</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/20200225211749.png" alt=""></p><h3 id="结合PicGo使用"><a href="#结合PicGo使用" class="headerlink" title="结合PicGo使用"></a>结合PicGo使用</h3><ul><li>PicGo+Snipaste快捷键结合<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/20200225210928.png" alt=""><h3 id="综合使用SOP"><a href="#综合使用SOP" class="headerlink" title="综合使用SOP"></a>综合使用SOP</h3></li></ul><ol><li>按<code>fn+f1</code>截完图按<code>ctrl+c</code>将刚刚截图放到剪贴板</li><li>再按<code>ctrl+shift+p</code>使用picgo快捷键将剪贴板上的图片上传同时将此时图片的外链复制到剪贴板</li></ol><h2 id="五、相关补充"><a href="#五、相关补充" class="headerlink" title="五、相关补充"></a>五、相关补充</h2><h3 id="上传失败"><a href="#上传失败" class="headerlink" title="上传失败"></a>上传失败</h3><p><code>问题1：有些时候上传picgo时，会出现配置报错的情况</code></p><blockquote><p>方案1：在picgo的配置中，改一下文件夹名字（相当于在仓库下新建一个文件夹），就比如本来存到blogarticle3/文件夹下，改成blogarticle4/就好了<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle17/202003292146234.png" alt=""></p><p>方案2：将下图所示的<code>上传前重命名</code>打开同时<code>设置Server</code>内容开换成关，关换成开，为什么呢？玄学···<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200329214114.png" alt=""></p><p>方案3：将PicGo软件叉掉重新运行。玄学····<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/Snipaste_2020-04-01_19-44-20.png" alt=""></p></blockquote><h3 id="关于插件"><a href="#关于插件" class="headerlink" title="关于插件"></a>关于插件</h3><p>在插件列表里面下载这三个拓展插件，其中两个国内的托管coding和gitee，还有一个github plus版本，不过觉得国内的外链范围肯定是要小一点的应该，最好是优先使用github图床，coding和gitee的作为文章使用，有关博客配置的使用CDN等。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figureplus/figure1/20200425174049.png" alt=""></p><h4 id="Coding配置"><a href="#Coding配置" class="headerlink" title="Coding配置"></a>Coding配置</h4><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure1/Snipaste_2020-04-25_17-43-13.png" alt=""></p><h4 id="gitee配置"><a href="#gitee配置" class="headerlink" title="gitee配置"></a>gitee配置</h4><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure1/20200425174623.png" alt=""></p><h4 id="GitHub-plus配置"><a href="#GitHub-plus配置" class="headerlink" title="GitHub plus配置"></a>GitHub plus配置</h4><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure1/20200425174704.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsDelivr和Github构建免费CDN</title>
      <link href="/2020/02/25/Hexo/jsDelivr%E5%92%8CGitHub%E6%9E%84%E5%BB%BA%E5%85%8D%E8%B4%B9CDN/"/>
      <url>/2020/02/25/Hexo/jsDelivr%E5%92%8CGitHub%E6%9E%84%E5%BB%BA%E5%85%8D%E8%B4%B9CDN/</url>
      
        <content type="html"><![CDATA[<h2 id="一、搭建缘由"><a href="#一、搭建缘由" class="headerlink" title="一、搭建缘由"></a>一、搭建缘由</h2><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p><p>通俗来说就是提取外链，同时加速访问的好处。Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p><h2 id="二、GitHub新建CDN（名字自取）仓库"><a href="#二、GitHub新建CDN（名字自取）仓库" class="headerlink" title="二、GitHub新建CDN（名字自取）仓库"></a>二、GitHub新建CDN（名字自取）仓库</h2><p>在本地电脑进行一系列clone/pull等一系列操作，同时发布版本（最好上传一次就发布依次版本）<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle2/20200225215014.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle2/20200225215206.png" alt=""></p><h2 id="三、使用jsDlivr"><a href="#三、使用jsDlivr" class="headerlink" title="三、使用jsDlivr"></a>三、使用jsDlivr</h2><p><strong><code>https://cdn.jsdelivr.net/gh/wztlink1013/CDN-Volantis@版本号/文件夹/文件名.文件后缀</code></strong></p><p><strong><center>举个栗子</center></strong></p><ul><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN@2.4/Pictures/blogbackground/fengbaobao_1.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/wztlink1013/CDN@2.4/Pictures/blogbackground/fengbaobao_1.jpg</a></li><li><a href="https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4</a></li></ul><p><b><details><summary>相关使用✅</summary></b></p><h3 id="0、具体使用教程"><a href="#0、具体使用教程" class="headerlink" title="0、具体使用教程"></a>0、具体使用教程</h3><ul><li><a href="https://www.wztlink1013.com/2020/02/25/jsDelivr%E5%92%8CGitHub%E6%9E%84%E5%BB%BA%E5%85%8D%E8%B4%B9CDN/" target="_blank" rel="noopener">博客：搭建及使用总结</a></li><li><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsdelivr官网网站</a><h3 id="1、加载任何Github发布、提交或分支"><a href="#1、加载任何Github发布、提交或分支" class="headerlink" title="1、加载任何Github发布、提交或分支"></a>1、加载任何Github发布、提交或分支</h3><a href="https://cdn.jsdelivr.net/gh/user/repo@version/file" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/user/repo@version/file</a></li></ul><h3 id="2、加载-jQuery-v3-2-1"><a href="#2、加载-jQuery-v3-2-1" class="headerlink" title="2、加载 jQuery v3.2.1"></a>2、加载 jQuery v3.2.1</h3><p><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</a></p><h3 id="3、使用版本范围而不是特定版本"><a href="#3、使用版本范围而不是特定版本" class="headerlink" title="3、使用版本范围而不是特定版本"></a>3、使用版本范围而不是特定版本</h3><p><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js</a></p><p><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</a></p><h3 id="4、完全省略该版本以获取最新版本"><a href="#4、完全省略该版本以获取最新版本" class="headerlink" title="4、完全省略该版本以获取最新版本"></a>4、完全省略该版本以获取最新版本</h3><p><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</a></p><h3 id="5、将“-min”添加到任何JS-CSS文件中以获取缩小版本，如果不存在，将为会自动生成"><a href="#5、将“-min”添加到任何JS-CSS文件中以获取缩小版本，如果不存在，将为会自动生成" class="headerlink" title="5、将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成"></a>5、将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成</h3><p><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</a></p><h3 id="6、在末尾添加-以获取资源目录列表"><a href="#6、在末尾添加-以获取资源目录列表" class="headerlink" title="6、在末尾添加 / 以获取资源目录列表"></a>6、在末尾添加 / 以获取资源目录列表</h3><p><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/</a></p></details><!--stackedit_data:eyJoaXN0b3J5IjpbLTYxNTM2MDY0MV19-->]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-DOS/CMD/Windows/提高开发效率</title>
      <link href="/2020/02/25/OS/DOS-CMD%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/25/OS/DOS-CMD%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、快捷键"><a href="#一、快捷键" class="headerlink" title="一、快捷键"></a>一、快捷键</h2><blockquote><p>很多软件的快捷键使用相通，在不确定的情况下，先试试其他软件的快捷键的使用方法</p></blockquote><h3 id="Windows电脑快捷键"><a href="#Windows电脑快捷键" class="headerlink" title="Windows电脑快捷键"></a>Windows电脑快捷键</h3><blockquote><center><b>HP惠普笔记本</b></center></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">win+E                 打开文件管器</span><br><span class="line">win+D                 显示桌面</span><br><span class="line">win+L                 锁计算机</span><br><span class="line">alt+F4                关闭当前程序</span><br><span class="line">ctrl+shift+Esc&#x2F;ctrl+alt+delete：任务管理器</span><br><span class="line">ctrl+F                文本或网页中查找（退出一般按ESC）</span><br><span class="line">ctrl+A                选中所有文本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Onenote2016配合插件win+n快速笔记win+shift+n打开onenote</span><br><span class="line"></span><br><span class="line">Windows 键+V：打开剪贴板</span><br><span class="line">Windows 键+PgUp：在桌面选定左上角软件</span><br><span class="line">Windows 键+PgDown：在桌面选定右下角软件</span><br></pre></td></tr></table></figure><h3 id="Eclipse快捷键"><a href="#Eclipse快捷键" class="headerlink" title="Eclipse快捷键"></a>Eclipse快捷键</h3><blockquote><p>ctrl+shift+L：eclipse所有快捷键</p><p><code>//</code>注释：<code>ctrl+shift+c</code>（添加和注释都是这样）或者<code>ctrl+/</code></p><p><code>/**/</code>注释：添加<code>ctrl+shift+/</code>  取消<code>ctrl+shift+\</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Alt+方向键：将当前行向上或者向下移动</span><br><span class="line">ctrl+m：编辑窗口最大化（反复两次按即取消）</span><br><span class="line">ctrl+.及ctrl+1：下一个错误及快速修改</span><br><span class="line">Control+O: 快速概要,迅速的跳到一个方法或者属性，只需要输入名字的头几个字母。</span><br><span class="line"></span><br><span class="line">shift+home&#x2F;end：选中一行</span><br><span class="line">ctrl+pgup&#x2F;pgdn：切换页面（浏览器打开的页面&#x2F;编辑器的多窗口）</span><br></pre></td></tr></table></figure><h3 id="VScode快捷键"><a href="#VScode快捷键" class="headerlink" title="VScode快捷键"></a>VScode快捷键</h3><p>偶然发现：打开vscode的时候，直接在页面内输入<code>ctrl+shift+c</code>就会直接进入博客根目录下的CMD模式</p><h3 id="Pycharm-JetBrains快捷键"><a href="#Pycharm-JetBrains快捷键" class="headerlink" title="Pycharm/JetBrains快捷键"></a>Pycharm/JetBrains快捷键</h3><fancybox><img src='https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/pycharmdebug.png'></fancybox><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+F5（左上角）：（return &quot;project&quot;）重新debug该文件</span><br><span class="line">F9：（resume program）一个断点接着一个断点走，不按行走（eg：有循环会随着i一步一步走完）</span><br><span class="line">F8：（step over） 一行一行走代码</span><br><span class="line">F7：（step into） 进入函数内部</span><br><span class="line">Alt+shift+F7：（step into mycode）遇到自己函数  进去 </span><br><span class="line">shift+F8：（step out）跳出，进入函数后，跳出来</span><br><span class="line">Alt+F10：（show execution point）指针显示当前断点旁边</span><br><span class="line">**Show Python Prompt**按键,交互式调试命令</span><br></pre></td></tr></table></figure><h2 id="二、CMD之常用命令"><a href="#二、CMD之常用命令" class="headerlink" title="二、CMD之常用命令"></a>二、CMD之常用命令</h2><blockquote><ul><li>使用help命令，查看所有的dos命令</li><li>找到命令之后，使用 <code>命令+ /?</code>来查看该命令下的其他属性</li></ul></blockquote><ul><li>DOS不区分大小写</li><li><code>d:</code> <code>e:</code> 进入不同的盘</li><li><code>cd:</code> 进入指定文件夹。注意：只在<strong>该磁盘</strong>才有效</li><li><code>dir</code> 查看当前目录下的所有文件，使用dir /?来查看其它用法</li><li>创建和删除目录</li><li>cd .. 返回上一级文件夹<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建目录</span><br><span class="line">md 目录名（文件夹）</span><br><span class="line">&#x2F;&#x2F;删除目录</span><br><span class="line">rd  目录名（文件夹）</span><br></pre></td></tr></table></figure></li><li><code>ipconfig</code> 查看本机ip</li><li><code>cls</code> 清除屏幕</li><li>复制文件:把一个文件移动（就是剪切+复制）到另一个地方。甚至可以改后缀<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move 路径\文件名 路径\文件名</span><br></pre></td></tr></table></figure></li><li>删除文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这个是专门删除文件的，不能删除文件夹</span><br><span class="line">del 文件名</span><br></pre></td></tr></table></figure></li><li>ping<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用来测试网络是否畅通</span><br><span class="line">ping ip(主机名)</span><br></pre></td></tr></table></figure></li><li>其他<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">复制内容：右键弹出快捷菜单，选择“标记(K)”，然后选中所需复制的内容，然后右键即可</span><br><span class="line"></span><br><span class="line">粘贴内容：右键弹出快捷菜单，选择“粘贴(P)”</span><br></pre></td></tr></table></figure></li><li>在文件夹空白处按住Shift，然后右键弹出快捷菜单，可以看到“在此处打开命令行窗口”</li><li>tab补齐功能！！！</li><li>文件及目录名中不能包含下列任何字符：\ / : * ? “ &lt; &gt; |</li></ul><h2 id="三、CMD之默认非utf-8编码"><a href="#三、CMD之默认非utf-8编码" class="headerlink" title="三、CMD之默认非utf-8编码"></a>三、CMD之默认非utf-8编码</h2><p>运行java程序时候，如果代码中有中文，会出现中文报错乱码情况/</p><h3 id="治标方法"><a href="#治标方法" class="headerlink" title="治标方法"></a>治标方法</h3><p><code>CMD</code> 中输入 <code>chcp 65001</code> 进入utf-8模式下的的控制台，再运行程序</p><h3 id="治本方法"><a href="#治本方法" class="headerlink" title="治本方法"></a>治本方法</h3><p><a href="https://blog.csdn.net/gulang03/article/details/81771343" target="_blank" rel="noopener">博文1</a>  <a href="https://blog.csdn.net/runAndRun/article/details/103072938?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">博文2</a>注意：自己已经再注册表中增加了一行tuf-8编码数据，以后要留意、<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle2/Snipaste_2020-03-03_16-21-53.png" alt=""></p><h2 id="四、CMD之运行JAVA"><a href="#四、CMD之运行JAVA" class="headerlink" title="四、CMD之运行JAVA"></a>四、CMD之运行JAVA</h2><h3 id="CMD运行java程序"><a href="#CMD运行java程序" class="headerlink" title="CMD运行java程序"></a>CMD运行java程序</h3><fancybox><img src='https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle2/Snipaste_2020-03-03_15-57-00.png'></fancybox><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><blockquote><p>main主函数可以看成一个普通的方法，也可以传递实参来调用普通方法<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200331211201.png" alt=""></p></blockquote><hr><blockquote><p>向main方法传递字符串<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200331211420.png" alt=""></p></blockquote><h3 id="CMD下运行Java中文乱码"><a href="#CMD下运行Java中文乱码" class="headerlink" title="CMD下运行Java中文乱码"></a>CMD下运行Java中文乱码</h3><p><code>javac -encoding utf-8 test.java</code></p><p>还是上面的问题，DOS默认使用的编码是GBK,这里需要再编译的时候制定使用的编码</p><h2 id="五、笔记本触摸板"><a href="#五、笔记本触摸板" class="headerlink" title="五、笔记本触摸板"></a>五、笔记本触摸板</h2><h3 id="笔记本触摸屏使用"><a href="#笔记本触摸屏使用" class="headerlink" title="笔记本触摸屏使用"></a>笔记本触摸屏使用</h3><ul><li><p><strong>单指</strong>：“确定键”</p><p>  点击===相当于左键确定<br>  先点击 不放拖动 ===拖拽</p></li><li><p><strong>双指</strong>：“右键、滑动、拉伸旋转键”</p><p>  点击===相当于右键（鼠标）<br>  先点击  不放左右拖动上下拖动===滑页功能<br>  等比例拉伸或者旋转</p></li><li><p><strong>三指</strong>：“页面切换键”</p><p>  点击===查找<br>  先点击  不放  上下拖动===多页面模式、纯桌面模式切换<br>  先点击  不放  左右拖动===页面切换类似alt+tab</p></li><li><p><strong>四指</strong>：“设置键”<br>点击===设置/操作中心</p><h3 id="实现手写输入功能"><a href="#实现手写输入功能" class="headerlink" title="实现手写输入功能"></a>实现手写输入功能</h3></li><li><p>第一步：安装SoftStylus手写软件</p></li></ul><p>本身没有预装SoftStylus手写软件的，首先登录HP官方网站，查询并下载手写软件，然后安装手写软件。如果已预装手写软件，建议运行Software Setup软件，将手写软件升级到最新版本，以提高手写识别成功率。</p><ul><li>第二步：设置手写识别速度</li></ul><p>运行手写软件，点击设置图标进入“参数”界面，然后可根据需要配置识别速度。如果是初次使用手写功能，刚开始建议将识别速度降低，一旦习惯了使用手写功能，应该将识别速度调为最快，这样在QQ聊天或编辑文档时，以应对较快的手写输入连写。</p><ul><li>第三步：设置各种热键</li></ul><p>此外，替换选项可设置在主窗口上显示最多可选择字符，这个应该根据笔记本屏幕大小而定，例如14英寸屏幕可设置为7，而12英寸屏幕应该设为4，最后建议开启“汉字预览”功能，切换到“热键”选项页，然后可根据需要自定义各种热键。</p><ul><li>第四步：设置手写窗口外观</li></ul><p>如果经常使用手写功能，建议切换到“一般”选项页，勾寻操作系统起动时运行SoftStylus”复选框，最后切换到“外观”选项页，并调节窗口透明度、画笔宽度和墨色。如果是QQ聊天，建议将画笔宽度调细一点，且墨色应该设为黑色。</p><ul><li>第五步：使用手写进行聊天</li></ul><p>设置完毕后，单击“确认”按钮，当你在QQ聊天或编辑文档时，如想使用手写输入，只需按下前面设置的快捷键，即可马上弹出手写输入界面。<br>这个时候，就可以用手指在触摸板上比划，文字就会显示在界面里，最后出现在聊天窗口中，很方便。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/7bd7574d94c8" target="_blank" rel="noopener">windows常用快捷键与快捷指令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMD </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-chapter9-13面向对象</title>
      <link href="/2020/02/16/Language/JAVA-chapter9-13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/02/16/Language/JAVA-chapter9-13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="chapter9对象和类"><a href="#chapter9对象和类" class="headerlink" title="chapter9对象和类"></a>chapter9对象和类</h2><h3 id="OOP阶梯图"><a href="#OOP阶梯图" class="headerlink" title="OOP阶梯图"></a>OOP阶梯图</h3><p>“OOP阶梯图”——类的多个特性，同时以对象对基础<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200509094956.png" alt="OOP阶梯图"> </p><h3 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h3><p>数据域和各种各样的方法（包括构造函数）【C++里面是数据成员和成员函数】</p><p><strong>类中不能存在可执行语句</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200509095057.png" alt="类的组成结构"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200509095327.png" alt="关于构造函数一些说法"></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>和类同名</li><li>重载：不能误写成普通函数</li><li><strong>调用顺序/优先级</strong>和C++类似</li></ul><p><strong>初始化优先级</strong></p><ol><li>静态成员变量初始化顺序高于非静态成员变量</li><li>成员变量的初始化顺序优于构造函数</li><li>静态成员变量只初始化一次，就是第一次被访问的时候</li><li>存在多个静态成员变量的时候，按照次序依次执行</li></ol><blockquote><p>举个例子：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200509095757.png" alt=""> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Window(<span class="number">2</span>)</span><br><span class="line">Window(<span class="number">1</span>)</span><br><span class="line">Window(<span class="number">2</span>)</span><br><span class="line">Window(<span class="number">3</span>)</span><br><span class="line">House()</span><br><span class="line">Window(<span class="number">33</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><h3 id="对象的创建和访问"><a href="#对象的创建和访问" class="headerlink" title="对象的创建和访问"></a>对象的创建和访问</h3><h4 id="通过引用变量访问对象"><a href="#通过引用变量访问对象" class="headerlink" title="通过引用变量访问对象"></a>通过引用变量访问对象</h4><p>创建的类的对象被内存分配了内存空间，可以用引用变量来访问</p><p><code>new ClassName();</code><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200509102830.png" alt=""><br><strong>使用成员变量和成员函数</strong></p><p><code>mycircle.radius</code><br><code>mycircle.getArea()</code></p><p><strong>对象类型都需要用new来新建</strong></p><p>对象调用成员变量，成员函数</p><p>调用静态函数，动态函数需要在自己类下面调用自己的函数</p><h4 id="TOTO-关于宿舍"><a href="#TOTO-关于宿舍" class="headerlink" title="TOTO: 关于宿舍"></a>TOTO: 关于宿舍</h4><p>关于老师提出来的炸宿舍例子</p><p>对象间的赋值和基本类型的赋值，能改变的一定是基本数值类型，所谓的数组名抑或是对象名，都只是地址映射</p><h3 id="数据域的默认值"><a href="#数据域的默认值" class="headerlink" title="数据域的默认值"></a>数据域的默认值</h3><p><strong>对于对象而言，不赋值也会有默认的</strong>。之前的数组就是如此/</p><p>按照之前的基本上的默认初值，如果是其他的类，则空</p><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>System.gc();</p><p>养成一个好的变成习惯：主入口函数和其他功能函数分开，不要再自己类下定义自己的对象</p><p>空指针异常 </p><h3 id="静态变量、常量和方法"><a href="#静态变量、常量和方法" class="headerlink" title="静态变量、常量和方法"></a>静态变量、常量和方法</h3><p>静态成员变量：静态成员变量可以被类的所有实例共享（比如计数变量用到）</p><p>静态方法：不能访问类的实例成员</p><p>关于静态变量、静态方法、实例变量、实例方法</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200509152141.png" alt="boolean声明为静态则，上述两者没有区别"></p><h3 id="可见性修饰符"><a href="#可见性修饰符" class="headerlink" title="可见性修饰符"></a>可见性修饰符</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200713192805.png" alt=""></p><h2 id="chapter10面向对象思考"><a href="#chapter10面向对象思考" class="headerlink" title="chapter10面向对象思考"></a>chapter10面向对象思考</h2><h2 id="chapter11继承和多态"><a href="#chapter11继承和多态" class="headerlink" title="chapter11继承和多态"></a>chapter11继承和多态</h2><h2 id="chapter12异常处理和文本IO"><a href="#chapter12异常处理和文本IO" class="headerlink" title="chapter12异常处理和文本IO"></a>chapter12异常处理和文本IO</h2><h2 id="chapter13抽象类和接口"><a href="#chapter13抽象类和接口" class="headerlink" title="chapter13抽象类和接口"></a>chapter13抽象类和接口</h2><h3 id="概念名词"><a href="#概念名词" class="headerlink" title="概念名词"></a>概念名词</h3><ul><li>接口：许多类的共同行为（包含非相关类）</li><li>抽象类：就相当于一个父类，该父类包含其子类的<strong>共性</strong>特征，就像是子类园和子类长方形，两个类可以有一个共同的父类，该父类定义为抽象类，其包含一个<strong>抽象方法</strong>，比如求面积或是求周长</li></ul><h3 id="抽象类的一些要点"><a href="#抽象类的一些要点" class="headerlink" title="抽象类的一些要点"></a>抽象类的一些要点</h3><ul><li>抽象类当中的抽象方法要在其子类当中实现，因为抽象类“抽象”的以至于没有实例</li><li>包含抽象方法的类必定是抽象类</li><li><strong>抽象类的构造函数实现要加上protected，因为其构造函数只被其子类所使用，在创建子类实例的时候，其父类构造函数被调用来初始化该父类的数据域</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200530204250.png" alt=""></li></ul><h3 id="可见性修饰符-1"><a href="#可见性修饰符-1" class="headerlink" title="可见性修饰符"></a>可见性修饰符</h3><h3 id="抽象类的实现"><a href="#抽象类的实现" class="headerlink" title="抽象类的实现"></a>抽象类的实现</h3><p>抽象类和抽象方法的实现都需要加上关键字abstract</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200530212124.png" alt="抽象类/父类"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200530212231.png" alt="UML图表示"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200530212329.png" alt="两个子类"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://wztlink1013.coding.net/p/figure/d/figure/git/raw/master/20200530212434.png" alt="举例说明使用抽象类"></p>            </div><!--stackedit_data:eyJoaXN0b3J5IjpbOTk2NTkxMDg1XX0=-->]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm使用总结</title>
      <link href="/2020/02/14/Environment/npm/"/>
      <url>/2020/02/14/Environment/npm/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>只需要在下载命令前加上-g即可，其中下载安装的目录是配置node npm时候，环境变量里面配置的路径</p><p>记录下自己的搭建环境：</p><ul><li>yuque-hexo</li><li>gitbook</li><li>hexo</li></ul><h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><p>部署好hexo之后，项目目录之下也有包管理文件夹，这里面安装的插件就是本地安装</p><p>其中，如果某个项目依赖特定版本，还是要同时结合本地安装特定版本，</p><!--stackedit_data:eyJoaXN0b3J5IjpbLTE4NjU3NTkwMzZdfQ==-->]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy-爬虫框架</title>
      <link href="/2020/02/12/Spider/Scrapy-%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/02/12/Spider/Scrapy-%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><h3 id="Scrapy基础"><a href="#Scrapy基础" class="headerlink" title="Scrapy基础"></a>Scrapy基础</h3><ul><li>是一个爬虫框架，同时易扩展，可以添加新的模块达到自定义扩展</li><li>输出格式多样：json，csv，xml等</li><li>自动处理编码<h3 id="Scrapy框架架构图"><a href="#Scrapy框架架构图" class="headerlink" title="Scrapy框架架构图"></a>Scrapy框架架构图</h3><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://upload-images.jianshu.io/upload_images/16825884-185c90a53935a55b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/801/format/webp" alt="架构图"></li><li>下载方法以及问题，在anaconda博客中</li></ul><h2 id="Scrapy使用"><a href="#Scrapy使用" class="headerlink" title="Scrapy使用"></a>Scrapy使用</h2><h3 id="使用SOP"><a href="#使用SOP" class="headerlink" title="使用SOP"></a>使用SOP</h3><ul><li>创建工程<ul><li>键入<code>cmd</code> <code>cd</code>到需要下载的目录下</li><li>输入<code>scrapy startproject tutorial</code>（最后是项目名字）</li><li><strong>!此后所有有关命令的操作，均在下一级文件夹下，也有是有cfg文件后缀的文件夹下</strong></li></ul></li><li>定义Item，构造爬取的对象</li><li>编写spider，爬虫主体<ul><li><code>scrapy genspider amazon_spider https://……</code></li></ul></li><li>pipelines，默认return item</li><li>编写其他配置，其中pipeline用于处理爬取后所得到的结果</li><li>执行爬虫<ul><li><code>scrapy crawl amazon_spider</code></li></ul></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>查看其官方文档</li><li><a href="https://www.jianshu.com/p/8023fccd7206" target="_blank" rel="noopener">简书</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbLTEzMzc1NzA1ODhdfQ==</li><li>-&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-数据可视化综述</title>
      <link href="/2020/02/10/DataAnalysis/Data-%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2020/02/10/DataAnalysis/Data-%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="查看可视化"><a href="#查看可视化" class="headerlink" title="查看可视化"></a>查看可视化</h2><ul><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/fengge.html" target="_blank" rel="noopener">设置风格</a></li><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/matplotlib1.html" target="_blank" rel="noopener">matplotlib预处理和折线图</a></li><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/matplotlib2.html" target="_blank" rel="noopener">matplotlib条形图</a></li><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/matplotlib3.html" target="_blank" rel="noopener">matplotlib其他常见类型图</a></li><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/pandas.html" target="_blank" rel="noopener">pandas基本画图</a></li><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/seaborn_1.html" target="_blank" rel="noopener">seaborn画图1</a></li><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/scikit_pca.html" target="_blank" rel="noopener">seaborn画图2</a></li><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/bokeh.html" target="_blank" rel="noopener">bokeh画图</a></li><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN/DataAnalysis/pyecharts.html" target="_blank" rel="noopener">pyecharts</a></li></ul><h2 id="补充总结"><a href="#补充总结" class="headerlink" title="补充总结"></a>补充总结</h2><!--stackedit_data:eyJoaXN0b3J5IjpbLTE4MzAwNzA5MDVdfQ==-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
            <tag> pandas </tag>
            
            <tag> seaborn </tag>
            
            <tag> bokeh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas-分组聚合</title>
      <link href="/2020/02/10/DataAnalysis/pandas-%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/"/>
      <url>/2020/02/10/DataAnalysis/pandas-%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="一、分组"><a href="#一、分组" class="headerlink" title="一、分组"></a>一、分组</h2><h3 id="GroupBy对象"><a href="#GroupBy对象" class="headerlink" title="GroupBy对象"></a>GroupBy对象</h3><blockquote><p>· groupedby函数中的参数：</p></blockquote><pre><code>as_index的作用：控制聚合输出是否以组标签为索引值，默认为True，就是分层次的索引，若为False多加一列默认索引索引，相当于非其他数据排序好了。但是这两组标签索引值不同有什么作用呢？=== 作用就是，根据的一列是否为索引列。sort_values的作用：对选定的一列数值数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖）</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot </span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict_obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, </span><br><span class="line">                      <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line">            <span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</span><br><span class="line">                      <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line">            <span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line">            <span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line">df_obj = pd.DataFrame(dict_obj)</span><br><span class="line"><span class="keyword">print</span> (df_obj)</span><br></pre></td></tr></table></figure><pre><code>  key1   key2     data1     data20    a    one -0.147612 -0.3480871    b    one -0.992986  0.9024582    a    two  0.547541 -0.3100403    b  three  0.458871 -1.8953924    a    two  1.224041  0.2201505    b    two -0.200124 -1.5622376    a    one  1.539144 -0.7587167    a  three  0.385845  0.074309</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''1. dataframe根据key2进行分组'''</span></span><br><span class="line">print(df_obj.groupby(<span class="string">'key2'</span>)[<span class="string">'key1'</span>].count())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(df_obj.groupby(<span class="string">'key1'</span>)))</span><br><span class="line"><span class="comment">#没有可视化的输出</span></span><br></pre></td></tr></table></figure><pre><code>key2one      3three    2two      3Name: key1, dtype: int64&lt;class &apos;pandas.core.groupby.generic.DataFrameGroupBy&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''2. 指定列根据key1进行分组'''</span></span><br><span class="line"><span class="keyword">print</span> (type(df_obj[<span class="string">'data1'</span>].groupby(df_obj[<span class="string">'key1'</span>])))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.groupby.generic.SeriesGroupBy&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组运算</span></span><br><span class="line">grouped1 = df_obj.groupby(<span class="string">'key1'</span>,as_index=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">print</span> (grouped1.mean())</span><br><span class="line"></span><br><span class="line">grouped2 = df_obj[<span class="string">'data1'</span>].groupby(df_obj[<span class="string">'key1'</span>])<span class="comment">#指定某一列的数据在该索引下进行分组并且加以聚合</span></span><br><span class="line"><span class="keyword">print</span> (grouped2.mean())</span><br></pre></td></tr></table></figure><pre><code>  key1     data1     data20    a  0.709792 -0.2244771    b -0.244746 -0.851723key1a    0.709792b   -0.244746Name: data1, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''3. 按自定义key分组，列表'''</span></span><br><span class="line">self_def_key = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">df_obj.groupby(self_def_key).mean()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>1</td>      <td>0.116853</td>      <td>-0.338455</td>    </tr>    <tr>      <td>2</td>      <td>0.743484</td>      <td>-0.661761</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_obj</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>a</td>      <td>one</td>      <td>-0.147612</td>      <td>-0.348087</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>one</td>      <td>-0.992986</td>      <td>0.902458</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>two</td>      <td>0.547541</td>      <td>-0.310040</td>    </tr>    <tr>      <td>3</td>      <td>b</td>      <td>three</td>      <td>0.458871</td>      <td>-1.895392</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>two</td>      <td>1.224041</td>      <td>0.220150</td>    </tr>    <tr>      <td>5</td>      <td>b</td>      <td>two</td>      <td>-0.200124</td>      <td>-1.562237</td>    </tr>    <tr>      <td>6</td>      <td>a</td>      <td>one</td>      <td>1.539144</td>      <td>-0.758716</td>    </tr>    <tr>      <td>7</td>      <td>a</td>      <td>three</td>      <td>0.385845</td>      <td>0.074309</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''4. 按多个列多层分组 = = = 通过列表'''</span></span><br><span class="line">grouped2 = df_obj.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>],as_index=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">print</span> (grouped2.mean())</span><br><span class="line">print(<span class="string">'--------比较asindex的差异-------'</span>)</span><br><span class="line">grouped2 = df_obj.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>],as_index=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (grouped2.mean())</span><br></pre></td></tr></table></figure><pre><code>  key1   key2     data1     data20    a    one  0.695766 -0.5534011    a  three  0.385845  0.0743092    a    two  0.885791 -0.0449453    b    one -0.992986  0.9024584    b  three  0.458871 -1.8953925    b    two -0.200124 -1.562237--------比较asindex的差异-------               data1     data2key1 key2                     a    one    0.695766 -0.553401     three  0.385845  0.074309     two    0.885791 -0.044945b    one   -0.992986  0.902458     three  0.458871 -1.895392     two   -0.200124 -1.562237</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多层分组按key的顺序进行===和上面的asindex作用一样，把所选取的列数据当成索引，这才是区别之处</span></span><br><span class="line">grouped3 = df_obj.groupby([<span class="string">'key2'</span>, <span class="string">'key1'</span>])</span><br><span class="line"><span class="keyword">print</span> (grouped3.mean())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'============================================='</span>)</span><br><span class="line"><span class="string">'''PS：如果想按照列进行分组聚合运算 === unstack===也可以通过转置'''</span></span><br><span class="line"><span class="keyword">print</span> (grouped3.mean().unstack())</span><br></pre></td></tr></table></figure><pre><code>               data1     data2key2  key1                    one   a     0.695766 -0.553401      b    -0.992986  0.902458three a     0.385845  0.074309      b     0.458871 -1.895392two   a     0.885791 -0.044945      b    -0.200124 -1.562237=============================================          data1               data2          key1          a         b         a         bkey2                                         one    0.695766 -0.992986 -0.553401  0.902458three  0.385845  0.458871  0.074309 -1.895392two    0.885791 -0.200124 -0.044945 -1.562237</code></pre><h3 id="GroupBy对象遍历迭代"><a href="#GroupBy对象遍历迭代" class="headerlink" title="GroupBy对象遍历迭代"></a>GroupBy对象遍历迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grouped1</span><br></pre></td></tr></table></figure><pre><code>&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001AF5B5F9088&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单层分组</span></span><br><span class="line">print(grouped1.head(<span class="number">5</span>))</span><br><span class="line">print(<span class="string">"------------------------------------分割线------------------------------------------"</span>)</span><br><span class="line"><span class="keyword">for</span> group_name, group_data <span class="keyword">in</span> grouped1:</span><br><span class="line">    <span class="keyword">print</span> (group_name)</span><br><span class="line">    <span class="keyword">print</span> (group_data[<span class="string">'data1'</span>])</span><br></pre></td></tr></table></figure><pre><code>  key1   key2     data1     data20    a    one -0.147612 -0.3480871    b    one -0.992986  0.9024582    a    two  0.547541 -0.3100403    b  three  0.458871 -1.8953924    a    two  1.224041  0.2201505    b    two -0.200124 -1.5622376    a    one  1.539144 -0.7587167    a  three  0.385845  0.074309------------------------------------分割线------------------------------------------a0   -0.1476122    0.5475414    1.2240416    1.5391447    0.385845Name: data1, dtype: float64b1   -0.9929863    0.4588715   -0.200124Name: data1, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多层分组</span></span><br><span class="line"><span class="keyword">for</span> group_name, group_data <span class="keyword">in</span> grouped2:</span><br><span class="line">    <span class="keyword">print</span> (group_name)</span><br><span class="line">    <span class="keyword">print</span> (group_data)</span><br></pre></td></tr></table></figure><pre><code>(&apos;a&apos;, &apos;one&apos;)  key1 key2     data1     data20    a  one -0.147612 -0.3480876    a  one  1.539144 -0.758716(&apos;a&apos;, &apos;three&apos;)  key1   key2     data1     data27    a  three  0.385845  0.074309(&apos;a&apos;, &apos;two&apos;)  key1 key2     data1    data22    a  two  0.547541 -0.310044    a  two  1.224041  0.22015(&apos;b&apos;, &apos;one&apos;)  key1 key2     data1     data21    b  one -0.992986  0.902458(&apos;b&apos;, &apos;three&apos;)  key1   key2     data1     data23    b  three  0.458871 -1.895392(&apos;b&apos;, &apos;two&apos;)  key1 key2     data1     data25    b  two -0.200124 -1.562237</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GroupBy对象转换list</span></span><br><span class="line">print(grouped1.mean())</span><br><span class="line">list(grouped1)</span><br></pre></td></tr></table></figure><pre><code>  key1     data1     data20    a  0.709792 -0.2244771    b -0.244746 -0.851723[(&apos;a&apos;,   key1   key2     data1     data2  0    a    one -0.147612 -0.348087  2    a    two  0.547541 -0.310040  4    a    two  1.224041  0.220150  6    a    one  1.539144 -0.758716  7    a  three  0.385845  0.074309), (&apos;b&apos;,   key1   key2     data1     data2  1    b    one -0.992986  0.902458  3    b  three  0.458871 -1.895392  5    b    two -0.200124 -1.562237)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GroupBy对象转换dict</span></span><br><span class="line">dict(list(grouped1))</span><br></pre></td></tr></table></figure><pre><code>{&apos;a&apos;:   key1   key2     data1     data2 0    a    one -0.147612 -0.348087 2    a    two  0.547541 -0.310040 4    a    two  1.224041  0.220150 6    a    one  1.539144 -0.758716 7    a  three  0.385845  0.074309, &apos;b&apos;:   key1   key2     data1     data2 1    b    one -0.992986  0.902458 3    b  three  0.458871 -1.895392 5    b    two -0.200124 -1.562237}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按列分组</span></span><br><span class="line"><span class="keyword">print</span> (df_obj.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按数据类型分组</span></span><br><span class="line">df_obj.groupby(df_obj.dtypes, axis=<span class="number">1</span>).size()</span><br><span class="line">df_obj.groupby(df_obj.dtypes, axis=<span class="number">1</span>).sum()</span><br></pre></td></tr></table></figure><pre><code>key1      objectkey2      objectdata1    float64data2    float64dtype: object</code></pre><h3 id="其他分组方法"><a href="#其他分组方法" class="headerlink" title="其他分组方法"></a>其他分组方法</h3><ol start="0"><li>其实列表也是分组的一种方式<br> ===用到列表时候，一般都是多层索引了</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df_obj2 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>,<span class="number">5</span>)),</span><br><span class="line">                       columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>],</span><br><span class="line">                       index=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">df_obj2.ix[<span class="number">1</span>, <span class="number">1</span>:<span class="number">4</span>] = np.NaN</span><br><span class="line">df_obj2</span><br></pre></td></tr></table></figure><pre><code>C:\Users\wztli\Anaconda3\lib\site-packages\ipykernel_launcher.py:4: FutureWarning: .ix is deprecated. Please use.loc for label based indexing or.iloc for positional indexingSee the documentation here:http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated  after removing the cwd from sys.path.</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <td>A</td>      <td>4</td>      <td>2.0</td>      <td>6.0</td>      <td>5.0</td>      <td>9</td>    </tr>    <tr>      <td>B</td>      <td>5</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>6</td>    </tr>    <tr>      <td>C</td>      <td>2</td>      <td>3.0</td>      <td>8.0</td>      <td>6.0</td>      <td>3</td>    </tr>    <tr>      <td>D</td>      <td>9</td>      <td>5.0</td>      <td>6.0</td>      <td>5.0</td>      <td>9</td>    </tr>    <tr>      <td>E</td>      <td>4</td>      <td>1.0</td>      <td>6.0</td>      <td>2.0</td>      <td>1</td>    </tr>  </tbody></table></div><ol><li>通过字典分组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过字典分组</span></span><br><span class="line">mapping_dict = &#123;<span class="string">'A'</span>:<span class="string">'python'</span>, <span class="string">'B'</span>:<span class="string">'python'</span>, <span class="string">'C'</span>:<span class="string">'java'</span>, <span class="string">'D'</span>:<span class="string">'C'</span>, <span class="string">'E'</span>:<span class="string">'java'</span>&#125;</span><br><span class="line"><span class="comment">#df_obj2.groupby(mapping_dict, axis=1).size()</span></span><br><span class="line"><span class="comment">#df_obj2.groupby(mapping_dict, axis=1).count() # 非NaN的个数</span></span><br><span class="line">print(df_obj2.groupby(mapping_dict, axis=<span class="number">0</span>).sum())</span><br></pre></td></tr></table></figure><pre><code>        a    b     c    d   eC       9  5.0   6.0  5.0   9java    6  4.0  14.0  8.0   4python  9  2.0   6.0  5.0  15</code></pre><ol start="2"><li>通过函数分组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过函数分组</span></span><br><span class="line">df_obj3 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>,<span class="number">5</span>)),</span><br><span class="line">                       columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>],</span><br><span class="line">                       index=[<span class="string">'AA'</span>, <span class="string">'BBB'</span>, <span class="string">'CC'</span>, <span class="string">'D'</span>, <span class="string">'EE'</span>])</span><br><span class="line"><span class="comment">#df_obj3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">group_key</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        idx 为列索引或行索引</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#return idx</span></span><br><span class="line">    <span class="keyword">return</span> len(idx)</span><br><span class="line"></span><br><span class="line">df_obj3.groupby(group_key).size()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上自定义函数等价于</span></span><br><span class="line"><span class="comment">#df_obj3.groupby(len).size()</span></span><br></pre></td></tr></table></figure><pre><code>1    12    33    1dtype: int64</code></pre><ol start="3"><li>通过层级索引级别分组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过索引级别分组</span></span><br><span class="line">columns = pd.MultiIndex.from_arrays([[<span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>],</span><br><span class="line">                                     [<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>]], names=[<span class="string">'language'</span>, <span class="string">'index'</span>])</span><br><span class="line">df_obj4 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>, <span class="number">5</span>)), columns=columns)</span><br><span class="line">df_obj4</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead tr th {    text-align: left;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>language</th>      <th>Python</th>      <th>Java</th>      <th>Python</th>      <th>Java</th>      <th>Python</th>    </tr>    <tr>      <th>index</th>      <th>A</th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>4</td>      <td>6</td>      <td>8</td>      <td>8</td>      <td>4</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>3</td>      <td>2</td>      <td>3</td>      <td>5</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>1</td>      <td>1</td>      <td>5</td>      <td>6</td>    </tr>    <tr>      <td>3</td>      <td>2</td>      <td>9</td>      <td>3</td>      <td>1</td>      <td>9</td>    </tr>    <tr>      <td>4</td>      <td>4</td>      <td>1</td>      <td>5</td>      <td>6</td>      <td>6</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据language进行分组</span></span><br><span class="line">df_obj4.groupby(level=<span class="string">'language'</span>, axis=<span class="number">1</span>).sum()</span><br><span class="line">df_obj4.groupby(level=<span class="string">'index'</span>, axis=<span class="number">1</span>).sum()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>index</th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>10</td>      <td>12</td>      <td>8</td>    </tr>    <tr>      <td>1</td>      <td>4</td>      <td>7</td>      <td>3</td>    </tr>    <tr>      <td>2</td>      <td>4</td>      <td>7</td>      <td>5</td>    </tr>    <tr>      <td>3</td>      <td>11</td>      <td>12</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>11</td>      <td>6</td>    </tr>  </tbody></table></div><h2 id="二、聚合"><a href="#二、聚合" class="headerlink" title="二、聚合"></a>二、聚合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict_obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, </span><br><span class="line">                      <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line">            <span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</span><br><span class="line">                      <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line">            <span class="string">'data1'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>),</span><br><span class="line">            <span class="string">'data2'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>)&#125;</span><br><span class="line">df_obj5 = pd.DataFrame(dict_obj)</span><br><span class="line"><span class="keyword">print</span> (df_obj5)</span><br></pre></td></tr></table></figure><pre><code>  key1   key2  data1  data20    a    one      9      41    b    one      6      72    a    two      9      43    b  three      9      64    a    two      6      25    b    two      3      36    a    one      1      17    a  three      2      6</code></pre><h3 id="内置的聚合函数"><a href="#内置的聚合函数" class="headerlink" title="内置的聚合函数"></a>内置的聚合函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_obj5</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>a</td>      <td>one</td>      <td>9</td>      <td>4</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>one</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>two</td>      <td>9</td>      <td>4</td>    </tr>    <tr>      <td>3</td>      <td>b</td>      <td>three</td>      <td>9</td>      <td>6</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>two</td>      <td>6</td>      <td>2</td>    </tr>    <tr>      <td>5</td>      <td>b</td>      <td>two</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <td>6</td>      <td>a</td>      <td>one</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <td>7</td>      <td>a</td>      <td>three</td>      <td>2</td>      <td>6</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内置的聚合函数</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').sum())</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').max())</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').min())</span></span><br><span class="line"><span class="keyword">print</span> (df_obj5.groupby(<span class="string">'key1'</span>).mean())</span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').size())</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').count())</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').describe())</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">count：分组中非NA的值</span></span><br><span class="line"><span class="string">std：标准差</span></span><br><span class="line"><span class="string">var：方差</span></span><br><span class="line"><span class="string">median：非NA中的中位数</span></span><br><span class="line"><span class="string">mean：非NA的平均值</span></span><br><span class="line"><span class="string">25%||50%||75%是什么意思==不造？</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><pre><code>      data1     data2key1                 a       5.4  3.400000b       6.0  5.333333&apos;\ncount：分组中非NA的值\nstd：标准差\nvar：方差\nmedian：非NA中的中位数\nmean：非NA的平均值\n25%||50%||75%是什么意思==不造？\n&apos;</code></pre><h3 id="自定义聚合函数"><a href="#自定义聚合函数" class="headerlink" title="自定义聚合函数"></a>自定义聚合函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义聚合函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak_range</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        返回数值范围</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#print type(df) #参数为索引所对应的记录</span></span><br><span class="line">    <span class="keyword">return</span> df.max() - df.min()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (df_obj5.groupby(<span class="string">'key1'</span>).agg(peak_range))</span><br><span class="line"><span class="comment">#print df_obj.groupby('key1').agg(lambda df : df.max() - df.min())</span></span><br><span class="line"><span class="comment">#默认列名就是函数名。</span></span><br></pre></td></tr></table></figure><pre><code>      data1  data2key1              a         8      5b         6      4</code></pre><ol start="3"><li>同时应用多个聚合函数：agg</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时应用多个聚合函数：agg</span></span><br><span class="line"><span class="keyword">print</span> (df_obj.groupby(<span class="string">'key1'</span>).agg([<span class="string">'mean'</span>, <span class="string">'std'</span>, <span class="string">'count'</span>]))</span><br></pre></td></tr></table></figure><pre><code>         data1                     data2                          mean       std count      mean       std countkey1                                                    a     0.709792  0.674293     5 -0.224477  0.385674     5b    -0.244746  0.726957     3 -0.851723  1.528271     3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (df_obj.groupby(<span class="string">'key1'</span>).agg([<span class="string">'mean'</span>, <span class="string">'std'</span>, <span class="string">'count'</span>, (<span class="string">'range'</span>, peak_range)])) <span class="comment"># 通过元组提供新的列名</span></span><br></pre></td></tr></table></figure><pre><code>         data1                               data2                                    mean       std count     range      mean       std count     rangekey1                                                                        a     0.709792  0.674293     5  1.686756 -0.224477  0.385674     5  0.978865b    -0.244746  0.726957     3  1.451857 -0.851723  1.528271     3  2.797850</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每列作用不同的聚合函数</span></span><br><span class="line">dict_mapping = &#123;<span class="string">'data1'</span>:<span class="string">'mean'</span>,</span><br><span class="line">                <span class="string">'data2'</span>:<span class="string">'sum'</span>&#125;</span><br><span class="line"><span class="keyword">print</span> (df_obj.groupby(<span class="string">'key1'</span>).agg(dict_mapping))</span><br></pre></td></tr></table></figure><pre><code>         data1     data2key1                    a     0.709792 -1.122384b    -0.244746 -2.555170</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_mapping = &#123;<span class="string">'data1'</span>:[<span class="string">'mean'</span>,<span class="string">'max'</span>],</span><br><span class="line">                <span class="string">'data2'</span>:<span class="string">'sum'</span>&#125;</span><br><span class="line"><span class="keyword">print</span> (df_obj.groupby(<span class="string">'key1'</span>).agg(dict_mapping))</span><br></pre></td></tr></table></figure><pre><code>         data1               data2          mean       max       sumkey1                              a     0.709792  1.539144 -1.122384b    -0.244746  0.458871 -2.555170</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、分组运算"><a href="#三、分组运算" class="headerlink" title="三、分组运算"></a>三、分组运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="分组和对齐"><a href="#分组和对齐" class="headerlink" title="分组和对齐"></a>分组和对齐</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series(range(<span class="number">10</span>, <span class="number">20</span>), index = range(<span class="number">10</span>))</span><br><span class="line">s2 = pd.Series(range(<span class="number">20</span>, <span class="number">25</span>), index = range(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'s1: '</span> )</span><br><span class="line"><span class="keyword">print</span> (s1)</span><br><span class="line">print(<span class="string">'==========================='</span>) </span><br><span class="line"><span class="keyword">print</span> (<span class="string">'s2: '</span>)</span><br><span class="line"><span class="keyword">print</span> (s2)</span><br></pre></td></tr></table></figure><pre><code>s1: 0    101    112    123    134    145    156    167    178    189    19dtype: int64===========================s2: 0    201    212    223    234    24dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Series 对齐运算</span></span><br><span class="line">s1 + s2</span><br><span class="line">print(s1+s2)</span><br></pre></td></tr></table></figure><pre><code>0    30.01    32.02    34.03    36.04    38.05     NaN6     NaN7     NaN8     NaN9     NaNdtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">2</span>,<span class="number">2</span>)), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">3</span>)), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'df1: '</span>)</span><br><span class="line"><span class="keyword">print</span> (df1)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'================='</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'df2: '</span>)</span><br><span class="line"><span class="keyword">print</span> (df2)</span><br></pre></td></tr></table></figure><pre><code>df1:      a    b0  1.0  1.01  1.0  1.0=================df2:      a    b    c0  1.0  1.0  1.01  1.0  1.0  1.02  1.0  1.0  1.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataFrame对齐操作</span></span><br><span class="line">print(df1 + df2)</span><br></pre></td></tr></table></figure><pre><code>     a    b   c0  2.0  2.0 NaN1  2.0  2.0 NaN2  NaN  NaN NaN</code></pre><p>① 常用运算函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 填充未对齐的数据进行运算</span></span><br><span class="line">print(s1.add(s2, fill_value = <span class="number">-1</span>))</span><br></pre></td></tr></table></figure><pre><code>0    30.01    32.02    34.03    36.04    38.05    14.06    15.07    16.08    17.09    18.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1.sub(df2, fill_value = <span class="number">2.</span>)</span><br><span class="line"><span class="comment">#sub函数</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <td>2</td>      <td>1.0</td>      <td>1.0</td>      <td>1.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充NaN</span></span><br><span class="line">s3 = s1 + s2</span><br><span class="line"><span class="keyword">print</span> (s3)</span><br></pre></td></tr></table></figure><pre><code>0    30.01    32.02    34.03    36.04    38.05     NaN6     NaN7     NaN8     NaN9     NaNdtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s3_filled = s3.fillna(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">print</span> (s3)</span><br></pre></td></tr></table></figure><pre><code>0    30.01    32.02    34.03    36.04    38.05     NaN6     NaN7     NaN8     NaN9     NaNdtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df3 = df1 + df2</span><br><span class="line"><span class="keyword">print</span> (df3)</span><br></pre></td></tr></table></figure><pre><code>     a    b   c0  2.0  2.0 NaN1  2.0  2.0 NaN2  NaN  NaN NaN</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df3.fillna(<span class="number">100</span>, inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (df3)</span><br></pre></td></tr></table></figure><pre><code>       a      b      c0    2.0    2.0  100.01    2.0    2.0  100.02  100.0  100.0  100.0</code></pre><h3 id="统计计算VS聚合运算"><a href="#统计计算VS聚合运算" class="headerlink" title="统计计算VS聚合运算"></a>统计计算VS聚合运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">print(df_obj1)</span><br></pre></td></tr></table></figure><pre><code>          a         b         c         d0 -0.542708  0.201376  1.111431  1.7843241  0.583422  0.231096 -2.801967  0.5684972 -0.577329 -1.668581 -0.842126  1.8030803 -0.128431 -1.769619  2.089983  0.2097614  0.493981 -1.571405  0.690019 -0.215292</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(df_obj1.sum(axis=<span class="number">1</span>))</span><br><span class="line">print(<span class="string">'====================================='</span>)</span><br><span class="line">print(df_obj1.max())</span><br><span class="line">print(<span class="string">'====================================='</span>)</span><br><span class="line">print(df_obj1.min(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>0    2.5544231   -1.4189522   -1.2849563    0.4016944   -0.602698dtype: float64=====================================a    0.583422b    0.231096c    2.089983d    1.803080dtype: float64=====================================0   -0.5427081   -2.8019672   -1.6685813   -1.7696194   -1.571405dtype: float64</code></pre><h3 id="数据分组运算"><a href="#数据分组运算" class="headerlink" title="数据分组运算"></a>数据分组运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组运算后保持shape</span></span><br><span class="line">dict_obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, </span><br><span class="line">                      <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line">            <span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</span><br><span class="line">                      <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line">            <span class="string">'data1'</span>: np.random.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">8</span>),</span><br><span class="line">            <span class="string">'data2'</span>: np.random.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">8</span>)&#125;</span><br><span class="line">df_obj = pd.DataFrame(dict_obj)</span><br><span class="line">df_obj</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>a</td>      <td>one</td>      <td>4</td>      <td>3</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>one</td>      <td>4</td>      <td>4</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>two</td>      <td>9</td>      <td>6</td>    </tr>    <tr>      <td>3</td>      <td>b</td>      <td>three</td>      <td>8</td>      <td>2</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>two</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <td>5</td>      <td>b</td>      <td>two</td>      <td>6</td>      <td>2</td>    </tr>    <tr>      <td>6</td>      <td>a</td>      <td>one</td>      <td>4</td>      <td>1</td>    </tr>    <tr>      <td>7</td>      <td>a</td>      <td>three</td>      <td>2</td>      <td>2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按key1分组后，计算data1，data2的统计信息======并附加到原始表格中</span></span><br><span class="line">k1_sum = df_obj.groupby(<span class="string">'key1'</span>).sum().add_prefix(<span class="string">'sum_'</span>)</span><br><span class="line">print(k1_sum)</span><br><span class="line">print(<span class="string">'================================'</span>)</span><br><span class="line">print(df_obj)</span><br></pre></td></tr></table></figure><pre><code>      sum_data1  sum_data2key1                      a            22         15b            18          8================================  key1   key2  data1  data20    a    one      4      31    b    one      4      42    a    two      9      63    b  three      8      24    a    two      3      35    b    two      6      26    a    one      4      17    a  three      2      2</code></pre><ol><li>merge方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1，使用merge</span></span><br><span class="line">pd.merge(df_obj, k1_sum, left_on=<span class="string">'key1'</span>, right_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>      <th>sum_data1</th>      <th>sum_data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>a</td>      <td>one</td>      <td>4</td>      <td>3</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>two</td>      <td>9</td>      <td>6</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>two</td>      <td>3</td>      <td>3</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>6</td>      <td>a</td>      <td>one</td>      <td>4</td>      <td>1</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>7</td>      <td>a</td>      <td>three</td>      <td>2</td>      <td>2</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>one</td>      <td>4</td>      <td>4</td>      <td>18</td>      <td>8</td>    </tr>    <tr>      <td>3</td>      <td>b</td>      <td>three</td>      <td>8</td>      <td>2</td>      <td>18</td>      <td>8</td>    </tr>    <tr>      <td>5</td>      <td>b</td>      <td>two</td>      <td>6</td>      <td>2</td>      <td>18</td>      <td>8</td>    </tr>  </tbody></table></div><ol start="2"><li>transform方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法2，使用transform</span></span><br><span class="line">k1_sum_tf = df_obj.groupby(<span class="string">'key1'</span>).transform(np.sum).add_prefix(<span class="string">'sum_'</span>)</span><br><span class="line">df_obj[k1_sum_tf.columns] = k1_sum_tf</span><br><span class="line">df_obj</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>      <th>sum_key2</th>      <th>sum_data1</th>      <th>sum_data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>a</td>      <td>one</td>      <td>4</td>      <td>3</td>      <td>onetwotwoonethree</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>one</td>      <td>4</td>      <td>4</td>      <td>onethreetwo</td>      <td>18</td>      <td>8</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>two</td>      <td>9</td>      <td>6</td>      <td>onetwotwoonethree</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>3</td>      <td>b</td>      <td>three</td>      <td>8</td>      <td>2</td>      <td>onethreetwo</td>      <td>18</td>      <td>8</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>two</td>      <td>3</td>      <td>3</td>      <td>onetwotwoonethree</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>5</td>      <td>b</td>      <td>two</td>      <td>6</td>      <td>2</td>      <td>onethreetwo</td>      <td>18</td>      <td>8</td>    </tr>    <tr>      <td>6</td>      <td>a</td>      <td>one</td>      <td>4</td>      <td>1</td>      <td>onetwotwoonethree</td>      <td>22</td>      <td>15</td>    </tr>    <tr>      <td>7</td>      <td>a</td>      <td>three</td>      <td>2</td>      <td>2</td>      <td>onetwotwoonethree</td>      <td>22</td>      <td>15</td>    </tr>  </tbody></table></div><ol start="3"><li>自定义函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义函数传入transform</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_mean</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        返回数据与均值的差值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> s - s.mean()</span><br><span class="line"></span><br><span class="line">df_obj.groupby(<span class="string">'key1'</span>).transform(diff_mean)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>      <th>sum_data1</th>      <th>sum_data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>-0.4</td>      <td>0.000000</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>-2.0</td>      <td>1.333333</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>4.6</td>      <td>3.000000</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>2.0</td>      <td>-0.666667</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>-1.4</td>      <td>0.000000</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>0.0</td>      <td>-0.666667</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>-0.4</td>      <td>-2.000000</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>7</td>      <td>-2.4</td>      <td>-1.000000</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset_path = <span class="string">'./data/starcraft.csv'</span></span><br><span class="line">df_data = pd.read_csv(dataset_path, usecols=[<span class="string">'LeagueIndex'</span>, <span class="string">'Age'</span>, <span class="string">'HoursPerWeek'</span>, </span><br><span class="line">                                             <span class="string">'TotalHours'</span>, <span class="string">'APM'</span>])</span><br></pre></td></tr></table></figure><ul><li>apply</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_n</span><span class="params">(df, n=<span class="number">3</span>, column=<span class="string">'APM'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        返回每个分组按 column 的 top n 数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> df.sort_values(by=column, ascending=<span class="literal">False</span>)[:n]</span><br><span class="line"></span><br><span class="line">df_data.groupby(<span class="string">'LeagueIndex'</span>).apply(top_n)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>LeagueIndex</th>      <th>Age</th>      <th>HoursPerWeek</th>      <th>TotalHours</th>      <th>APM</th>    </tr>    <tr>      <th>LeagueIndex</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <td rowspan="3" valign="top">1</td>      <td>2214</td>      <td>1</td>      <td>20.0</td>      <td>12.0</td>      <td>730.0</td>      <td>172.9530</td>    </tr>    <tr>      <td>2246</td>      <td>1</td>      <td>27.0</td>      <td>8.0</td>      <td>250.0</td>      <td>141.6282</td>    </tr>    <tr>      <td>1753</td>      <td>1</td>      <td>20.0</td>      <td>28.0</td>      <td>100.0</td>      <td>139.6362</td>    </tr>    <tr>      <td rowspan="3" valign="top">2</td>      <td>3062</td>      <td>2</td>      <td>20.0</td>      <td>6.0</td>      <td>100.0</td>      <td>179.6250</td>    </tr>    <tr>      <td>3229</td>      <td>2</td>      <td>16.0</td>      <td>24.0</td>      <td>110.0</td>      <td>156.7380</td>    </tr>    <tr>      <td>1520</td>      <td>2</td>      <td>29.0</td>      <td>6.0</td>      <td>250.0</td>      <td>151.6470</td>    </tr>    <tr>      <td rowspan="3" valign="top">3</td>      <td>1557</td>      <td>3</td>      <td>22.0</td>      <td>6.0</td>      <td>200.0</td>      <td>226.6554</td>    </tr>    <tr>      <td>484</td>      <td>3</td>      <td>19.0</td>      <td>42.0</td>      <td>450.0</td>      <td>220.0692</td>    </tr>    <tr>      <td>2883</td>      <td>3</td>      <td>16.0</td>      <td>8.0</td>      <td>800.0</td>      <td>208.9500</td>    </tr>    <tr>      <td rowspan="3" valign="top">4</td>      <td>2688</td>      <td>4</td>      <td>26.0</td>      <td>24.0</td>      <td>990.0</td>      <td>249.0210</td>    </tr>    <tr>      <td>1759</td>      <td>4</td>      <td>16.0</td>      <td>6.0</td>      <td>75.0</td>      <td>229.9122</td>    </tr>    <tr>      <td>2637</td>      <td>4</td>      <td>23.0</td>      <td>24.0</td>      <td>650.0</td>      <td>227.2272</td>    </tr>    <tr>      <td rowspan="3" valign="top">5</td>      <td>3277</td>      <td>5</td>      <td>18.0</td>      <td>16.0</td>      <td>950.0</td>      <td>372.6426</td>    </tr>    <tr>      <td>93</td>      <td>5</td>      <td>17.0</td>      <td>36.0</td>      <td>720.0</td>      <td>335.4990</td>    </tr>    <tr>      <td>202</td>      <td>5</td>      <td>37.0</td>      <td>14.0</td>      <td>800.0</td>      <td>327.7218</td>    </tr>    <tr>      <td rowspan="3" valign="top">6</td>      <td>734</td>      <td>6</td>      <td>16.0</td>      <td>28.0</td>      <td>730.0</td>      <td>389.8314</td>    </tr>    <tr>      <td>2746</td>      <td>6</td>      <td>16.0</td>      <td>28.0</td>      <td>4000.0</td>      <td>350.4114</td>    </tr>    <tr>      <td>1810</td>      <td>6</td>      <td>21.0</td>      <td>14.0</td>      <td>730.0</td>      <td>323.2506</td>    </tr>    <tr>      <td rowspan="3" valign="top">7</td>      <td>3127</td>      <td>7</td>      <td>23.0</td>      <td>42.0</td>      <td>2000.0</td>      <td>298.7952</td>    </tr>    <tr>      <td>104</td>      <td>7</td>      <td>21.0</td>      <td>24.0</td>      <td>1000.0</td>      <td>286.4538</td>    </tr>    <tr>      <td>1654</td>      <td>7</td>      <td>18.0</td>      <td>98.0</td>      <td>700.0</td>      <td>236.0316</td>    </tr>    <tr>      <td rowspan="3" valign="top">8</td>      <td>3393</td>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>375.8664</td>    </tr>    <tr>      <td>3373</td>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>364.8504</td>    </tr>    <tr>      <td>3372</td>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>355.3518</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apply函数接收的参数会传入自定义的函数中</span></span><br><span class="line">df_data.groupby(<span class="string">'LeagueIndex'</span>).apply(top_n, n=<span class="number">2</span>, column=<span class="string">'Age'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>LeagueIndex</th>      <th>Age</th>      <th>HoursPerWeek</th>      <th>TotalHours</th>      <th>APM</th>    </tr>    <tr>      <th>LeagueIndex</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <td rowspan="2" valign="top">1</td>      <td>3146</td>      <td>1</td>      <td>40.0</td>      <td>12.0</td>      <td>150.0</td>      <td>38.5590</td>    </tr>    <tr>      <td>3040</td>      <td>1</td>      <td>39.0</td>      <td>10.0</td>      <td>500.0</td>      <td>29.8764</td>    </tr>    <tr>      <td rowspan="2" valign="top">2</td>      <td>920</td>      <td>2</td>      <td>43.0</td>      <td>10.0</td>      <td>730.0</td>      <td>86.0586</td>    </tr>    <tr>      <td>2437</td>      <td>2</td>      <td>41.0</td>      <td>4.0</td>      <td>200.0</td>      <td>54.2166</td>    </tr>    <tr>      <td rowspan="2" valign="top">3</td>      <td>1258</td>      <td>3</td>      <td>41.0</td>      <td>14.0</td>      <td>800.0</td>      <td>77.6472</td>    </tr>    <tr>      <td>2972</td>      <td>3</td>      <td>40.0</td>      <td>10.0</td>      <td>500.0</td>      <td>60.5970</td>    </tr>    <tr>      <td rowspan="2" valign="top">4</td>      <td>1696</td>      <td>4</td>      <td>44.0</td>      <td>6.0</td>      <td>500.0</td>      <td>89.5266</td>    </tr>    <tr>      <td>1729</td>      <td>4</td>      <td>39.0</td>      <td>8.0</td>      <td>500.0</td>      <td>86.7246</td>    </tr>    <tr>      <td rowspan="2" valign="top">5</td>      <td>202</td>      <td>5</td>      <td>37.0</td>      <td>14.0</td>      <td>800.0</td>      <td>327.7218</td>    </tr>    <tr>      <td>2745</td>      <td>5</td>      <td>37.0</td>      <td>18.0</td>      <td>1000.0</td>      <td>123.4098</td>    </tr>    <tr>      <td rowspan="2" valign="top">6</td>      <td>3069</td>      <td>6</td>      <td>31.0</td>      <td>8.0</td>      <td>800.0</td>      <td>133.1790</td>    </tr>    <tr>      <td>2706</td>      <td>6</td>      <td>31.0</td>      <td>8.0</td>      <td>700.0</td>      <td>66.9918</td>    </tr>    <tr>      <td rowspan="2" valign="top">7</td>      <td>2813</td>      <td>7</td>      <td>26.0</td>      <td>36.0</td>      <td>1300.0</td>      <td>188.5512</td>    </tr>    <tr>      <td>1992</td>      <td>7</td>      <td>26.0</td>      <td>24.0</td>      <td>1000.0</td>      <td>219.6690</td>    </tr>    <tr>      <td rowspan="2" valign="top">8</td>      <td>3340</td>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>189.7404</td>    </tr>    <tr>      <td>3341</td>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>287.8128</td>    </tr>  </tbody></table></div><ul><li>禁止分组 group_keys=False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data.groupby(<span class="string">'LeagueIndex'</span>, group_keys=<span class="literal">False</span>).apply(top_n)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>LeagueIndex</th>      <th>Age</th>      <th>HoursPerWeek</th>      <th>TotalHours</th>      <th>APM</th>    </tr>  </thead>  <tbody>    <tr>      <td>2214</td>      <td>1</td>      <td>20.0</td>      <td>12.0</td>      <td>730.0</td>      <td>172.9530</td>    </tr>    <tr>      <td>2246</td>      <td>1</td>      <td>27.0</td>      <td>8.0</td>      <td>250.0</td>      <td>141.6282</td>    </tr>    <tr>      <td>1753</td>      <td>1</td>      <td>20.0</td>      <td>28.0</td>      <td>100.0</td>      <td>139.6362</td>    </tr>    <tr>      <td>3062</td>      <td>2</td>      <td>20.0</td>      <td>6.0</td>      <td>100.0</td>      <td>179.6250</td>    </tr>    <tr>      <td>3229</td>      <td>2</td>      <td>16.0</td>      <td>24.0</td>      <td>110.0</td>      <td>156.7380</td>    </tr>    <tr>      <td>1520</td>      <td>2</td>      <td>29.0</td>      <td>6.0</td>      <td>250.0</td>      <td>151.6470</td>    </tr>    <tr>      <td>1557</td>      <td>3</td>      <td>22.0</td>      <td>6.0</td>      <td>200.0</td>      <td>226.6554</td>    </tr>    <tr>      <td>484</td>      <td>3</td>      <td>19.0</td>      <td>42.0</td>      <td>450.0</td>      <td>220.0692</td>    </tr>    <tr>      <td>2883</td>      <td>3</td>      <td>16.0</td>      <td>8.0</td>      <td>800.0</td>      <td>208.9500</td>    </tr>    <tr>      <td>2688</td>      <td>4</td>      <td>26.0</td>      <td>24.0</td>      <td>990.0</td>      <td>249.0210</td>    </tr>    <tr>      <td>1759</td>      <td>4</td>      <td>16.0</td>      <td>6.0</td>      <td>75.0</td>      <td>229.9122</td>    </tr>    <tr>      <td>2637</td>      <td>4</td>      <td>23.0</td>      <td>24.0</td>      <td>650.0</td>      <td>227.2272</td>    </tr>    <tr>      <td>3277</td>      <td>5</td>      <td>18.0</td>      <td>16.0</td>      <td>950.0</td>      <td>372.6426</td>    </tr>    <tr>      <td>93</td>      <td>5</td>      <td>17.0</td>      <td>36.0</td>      <td>720.0</td>      <td>335.4990</td>    </tr>    <tr>      <td>202</td>      <td>5</td>      <td>37.0</td>      <td>14.0</td>      <td>800.0</td>      <td>327.7218</td>    </tr>    <tr>      <td>734</td>      <td>6</td>      <td>16.0</td>      <td>28.0</td>      <td>730.0</td>      <td>389.8314</td>    </tr>    <tr>      <td>2746</td>      <td>6</td>      <td>16.0</td>      <td>28.0</td>      <td>4000.0</td>      <td>350.4114</td>    </tr>    <tr>      <td>1810</td>      <td>6</td>      <td>21.0</td>      <td>14.0</td>      <td>730.0</td>      <td>323.2506</td>    </tr>    <tr>      <td>3127</td>      <td>7</td>      <td>23.0</td>      <td>42.0</td>      <td>2000.0</td>      <td>298.7952</td>    </tr>    <tr>      <td>104</td>      <td>7</td>      <td>21.0</td>      <td>24.0</td>      <td>1000.0</td>      <td>286.4538</td>    </tr>    <tr>      <td>1654</td>      <td>7</td>      <td>18.0</td>      <td>98.0</td>      <td>700.0</td>      <td>236.0316</td>    </tr>    <tr>      <td>3393</td>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>375.8664</td>    </tr>    <tr>      <td>3373</td>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>364.8504</td>    </tr>    <tr>      <td>3372</td>      <td>8</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>355.3518</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!--stackedit_data:eyJoaXN0b3J5IjpbODAwOTMzMjI2XX0=-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas-索引</title>
      <link href="/2020/02/10/DataAnalysis/pandas-%E5%90%84%E7%A7%8D%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/02/10/DataAnalysis/pandas-%E5%90%84%E7%A7%8D%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本索引"><a href="#一、基本索引" class="headerlink" title="一、基本索引"></a>一、基本索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="Series索引"><a href="#Series索引" class="headerlink" title="Series索引"></a>Series索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ser_obj1 = pd.Series(range(<span class="number">5</span>), index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1.head())</span><br></pre></td></tr></table></figure><pre><code>a    0b    1c    2d    3e    4dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''1. 行索引'''</span></span><br><span class="line">print(<span class="string">'行索引===================================================================='</span>)</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="string">'b'</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'切片索引===================================================================='</span>)</span><br><span class="line"><span class="string">'''2. 切片索引'''</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="string">'b'</span>:<span class="string">'d'</span>])</span><br><span class="line">print(<span class="string">'不连续索引索引===================================================================='</span>)</span><br><span class="line"><span class="comment">#注意会不会包含尾巴。。</span></span><br><span class="line"><span class="string">'''3. 不连续索引'''</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[[<span class="string">'a'</span>, <span class="string">'e'</span>]])</span><br><span class="line">print(<span class="string">'布尔索引===================================================================='</span>)</span><br><span class="line"><span class="string">'''4. 布尔索引'''</span></span><br><span class="line"><span class="comment">#是对里面的值进行判断，不是对索引</span></span><br><span class="line">ser_bool = ser_obj1 &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> (ser_bool)</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[ser_bool])<span class="comment">#运用的方式</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[ser_obj1 &gt; <span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>行索引====================================================================10切片索引====================================================================b    1c    2dtype: int64b    1c    2d    3dtype: int64不连续索引索引====================================================================a    0c    2e    4dtype: int64a    0e    4dtype: int64布尔索引====================================================================a    Falseb    Falsec    Falsed     Truee     Truedtype: boold    3e    4dtype: int64d    3e    4dtype: int64</code></pre><h3 id="Dataframe索引"><a href="#Dataframe索引" class="headerlink" title="Dataframe索引"></a>Dataframe索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="keyword">print</span> (df_obj1.head())</span><br></pre></td></tr></table></figure><pre><code>          a         b         c         d0 -0.720611 -0.002543 -0.084255 -0.5837191  0.174715  0.288090 -0.254462 -1.6696682 -1.872654 -0.466842 -0.481040 -1.7355583  1.147668  1.205686  0.625582 -2.1118634  1.177882  0.049581 -0.404098 -0.497125</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''0. 转换成行索引的话===方式一：transpose或者T'''</span></span><br><span class="line">bb=df_obj1.transpose()</span><br><span class="line">print(df_obj1.T)</span><br><span class="line">print(bb)</span><br><span class="line"><span class="string">'''0. 转换成行索引的话===方式二：重构'''</span></span><br></pre></td></tr></table></figure><pre><code>          0         1         2         3         4a -0.720611  0.174715 -1.872654  1.147668  1.177882b -0.002543  0.288090 -0.466842  1.205686  0.049581c -0.084255 -0.254462 -0.481040  0.625582 -0.404098d -0.583719 -1.669668 -1.735558 -2.111863 -0.497125          0         1         2         3         4a -0.720611  0.174715 -1.872654  1.147668  1.177882b -0.002543  0.288090 -0.466842  1.205686  0.049581c -0.084255 -0.254462 -0.481040  0.625582 -0.404098d -0.583719 -1.669668 -1.735558 -2.111863 -0.497125&apos;0. 转换成行索引的话===方式二：重构/重塑===还没有完全明白&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''1. 列索引=====默认为列索引来操作'''</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'列索引'</span>)</span><br><span class="line">print(df_obj1.b)<span class="comment">#当成属性来获取值</span></span><br><span class="line">print(<span class="string">'==================='</span>)</span><br><span class="line"><span class="keyword">print</span> (df_obj1[<span class="string">'a'</span>]) <span class="comment"># 返回Series类型</span></span><br><span class="line"><span class="keyword">print</span> (type(df_obj1[<span class="string">'a'</span>]))</span><br><span class="line"><span class="keyword">print</span> (df_obj1[[<span class="string">'a'</span>]]) <span class="comment"># 返回DataFrame类型</span></span><br><span class="line"><span class="keyword">print</span> (type(df_obj1[[<span class="string">'a'</span>]]))</span><br><span class="line"><span class="string">'''2. 不连续索引'''</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'不连续索引'</span>)</span><br><span class="line"><span class="keyword">print</span> (df_obj1[[<span class="string">'a'</span>,<span class="string">'c'</span>]])</span><br><span class="line"><span class="keyword">print</span> (df_obj1[[<span class="string">'a'</span>,<span class="string">'c'</span>]])</span><br></pre></td></tr></table></figure><pre><code>列索引0   -0.0025431    0.2880902   -0.4668423    1.2056864    0.049581Name: b, dtype: float64===================0   -0.7206111    0.1747152   -1.8726543    1.1476684    1.177882Name: a, dtype: float64&lt;class &apos;pandas.core.series.Series&apos;&gt;          a0 -0.7206111  0.1747152 -1.8726543  1.1476684  1.177882&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;不连续索引          a         c0 -0.720611 -0.0842551  0.174715 -0.2544622 -1.872654 -0.4810403  1.147668  0.6255824  1.177882 -0.404098          a         c0 -0.720611 -0.0842551  0.174715 -0.2544622 -1.872654 -0.4810403  1.147668  0.6255824  1.177882 -0.404098</code></pre><h3 id="三种索引方式"><a href="#三种索引方式" class="headerlink" title="三种索引方式"></a>三种索引方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(ser_obj1)</span><br><span class="line">print(<span class="string">'============================'</span>)</span><br><span class="line">print(df_obj1)</span><br></pre></td></tr></table></figure><pre><code>a    0b    1c    2d    3e    4dtype: int64============================          a         b         c         d0 -0.720611 -0.002543 -0.084255 -0.5837191  0.174715  0.288090 -0.254462 -1.6696682 -1.872654 -0.466842 -0.481040 -1.7355583  1.147668  1.205686  0.625582 -2.1118634  1.177882  0.049581 -0.404098 -0.497125</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''1. 标签索引 loc===用的是index和column的值索引【标签索引】'''</span></span><br><span class="line"><span class="comment"># Series</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="string">'b'</span>:<span class="string">'d'</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1.loc[<span class="string">'b'</span>:<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame</span></span><br><span class="line"><span class="keyword">print</span> (df_obj1[[<span class="string">'a'</span>]])</span><br><span class="line"><span class="keyword">print</span> (df_obj1.loc[<span class="number">0</span>:<span class="number">2</span>,<span class="string">'a'</span>:<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><pre><code>b    1c    2d    3dtype: int64b    1c    2d    3dtype: int64          a0 -0.7206111  0.1747152 -1.8726543  1.1476684  1.177882          a         b         c0 -0.720611 -0.002543 -0.0842551  0.174715  0.288090 -0.2544622 -1.872654 -0.466842 -0.481040</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''2. 位置索引 iloc====用的是index和column的默认0，1，2，3···的值索引【位置索引】'''</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1.iloc[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame</span></span><br><span class="line"><span class="keyword">print</span> (df_obj1.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 注意和df_obj.loc[0:2, 'a']的区别 = = = 行和列：都不包括尾巴</span></span><br></pre></td></tr></table></figure><pre><code>b    1c    2dtype: int64b    1c    2dtype: int64          a         b0 -0.720611 -0.0025431  0.174715  0.288090</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''3. 混合索引 ix===先按标签索引loc尝试操作，然后再按位置索引iloc尝试操作'''</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1.ix[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1.ix[<span class="string">'b'</span>:<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame</span></span><br><span class="line"><span class="keyword">print</span> (df_obj1.ix[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><pre><code>b    1c    2dtype: int64b    1c    2dtype: int64          a         b         c0 -0.720611 -0.002543 -0.0842551  0.174715  0.288090 -0.2544622 -1.872654 -0.466842 -0.481040</code></pre><h2 id="二、Pandas层级索引"><a href="#二、Pandas层级索引" class="headerlink" title="二、Pandas层级索引"></a>二、Pandas层级索引</h2><h3 id="构造层级索引"><a href="#构造层级索引" class="headerlink" title="构造层级索引"></a>构造层级索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ser_obj = pd.Series(np.random.randn(<span class="number">12</span>),</span><br><span class="line">                    index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>],</span><br><span class="line">                           [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment">#列表里面的列表</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj)</span><br></pre></td></tr></table></figure><pre><code>a  0   -0.373441   1    0.615976   2    0.959092b  0    1.743670   1   -0.791517   2   -0.774013c  0    1.271094   1   -0.723264   2    0.253038d  0   -0.767791   1    0.419253   2   -0.691644dtype: float64</code></pre><ul><li>MultiIndex索引对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (type(ser_obj.index))</span><br><span class="line"><span class="keyword">print</span> (ser_obj.index)</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.indexes.multi.MultiIndex&apos;&gt;MultiIndex([(&apos;a&apos;, 0),            (&apos;a&apos;, 1),            (&apos;a&apos;, 2),            (&apos;b&apos;, 0),            (&apos;b&apos;, 1),            (&apos;b&apos;, 2),            (&apos;c&apos;, 0),            (&apos;c&apos;, 1),            (&apos;c&apos;, 2),            (&apos;d&apos;, 0),            (&apos;d&apos;, 1),            (&apos;d&apos;, 2)],           )</code></pre><h3 id="选取子集"><a href="#选取子集" class="headerlink" title="选取子集"></a>选取子集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外层选取</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj[<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><pre><code>0    1.2710941   -0.7232642    0.253038dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内层选取</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj[:, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>a    0.959092b   -0.774013c    0.253038d   -0.691644dtype: float64</code></pre><h3 id="交换分层顺序"><a href="#交换分层顺序" class="headerlink" title="交换分层顺序"></a>交换分层顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_obj2 = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>,<span class="string">'b'</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line"><span class="comment">#print (df_obj1.swaplevel())</span></span><br><span class="line"><span class="keyword">print</span> (df_obj2)</span><br></pre></td></tr></table></figure><pre><code>            a         b         c         da 1  0.273776 -0.018659  1.512727 -0.088091  2 -0.410883 -1.488943  0.917268  1.179941  3 -0.237532 -0.823717  0.189495  1.060476b 1  0.727872  0.323352  0.443786  0.780510  2 -1.407645 -0.059689  1.439843 -1.700740  3 -0.377628 -0.137348 -0.739980  0.122528</code></pre><h3 id="交换并排序分层"><a href="#交换并排序分层" class="headerlink" title="交换并排序分层"></a>交换并排序分层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (df_obj2.swaplevel().sortvalues(by=<span class="string">'a'</span>))</span><br><span class="line"><span class="comment">#Series没有这个内置函数sortlevel===dataframe有</span></span><br></pre></td></tr></table></figure><h2 id="三、透视表和交叉表"><a href="#三、透视表和交叉表" class="headerlink" title="三、透视表和交叉表"></a>三、透视表和交叉表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset_path = <span class="string">'./data/starcraft.csv'</span></span><br><span class="line">df_data = pd.read_csv(dataset_path, usecols=[<span class="string">'LeagueIndex'</span>, <span class="string">'Age'</span>, <span class="string">'HoursPerWeek'</span>, </span><br><span class="line">                                             <span class="string">'TotalHours'</span>, <span class="string">'APM'</span>])</span><br><span class="line">print(df_data.head())</span><br></pre></td></tr></table></figure><pre><code>   LeagueIndex   Age  HoursPerWeek  TotalHours       APM0            5  27.0          10.0      3000.0  143.71801            5  23.0          10.0      5000.0  129.23222            4  30.0          10.0       200.0   69.96123            3  19.0          20.0       400.0  107.60164            3  32.0          10.0       500.0  122.8908</code></pre><h3 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pd.pivot_table(df_data, </span><br><span class="line">               index=[<span class="string">'Age'</span>],</span><br><span class="line">               columns=[<span class="string">'LeagueIndex'</span>],</span><br><span class="line">               aggfunc=np.sum)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead tr th {    text-align: left;}.dataframe thead tr:last-of-type th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="7" halign="left">APM</th>      <th colspan="7" halign="left">HoursPerWeek</th>      <th colspan="7" halign="left">TotalHours</th>    </tr>    <tr>      <th>LeagueIndex</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>...</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>    </tr>    <tr>      <th>Age</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <td>16.0</td>      <td>1062.44754</td>      <td>2919.70434</td>      <td>4851.9222</td>      <td>5149.7310</td>      <td>7787.37780</td>      <td>9042.1722</td>      <td>386.7774</td>      <td>324.0</td>      <td>720.0</td>      <td>778.0</td>      <td>...</td>      <td>1220.0</td>      <td>1280.0</td>      <td>56.0</td>      <td>4307.0</td>      <td>13143.0</td>      <td>29211.0</td>      <td>23581.0</td>      <td>49233.0</td>      <td>51320.0</td>      <td>3000.0</td>    </tr>    <tr>      <td>17.0</td>      <td>655.67280</td>      <td>1661.01540</td>      <td>4181.8920</td>      <td>5525.3586</td>      <td>10052.72100</td>      <td>8310.0858</td>      <td>573.8286</td>      <td>184.0</td>      <td>378.0</td>      <td>664.0</td>      <td>...</td>      <td>1460.0</td>      <td>1116.0</td>      <td>104.0</td>      <td>2044.0</td>      <td>7423.0</td>      <td>16602.0</td>      <td>24005.0</td>      <td>53375.0</td>      <td>45421.0</td>      <td>12700.0</td>    </tr>    <tr>      <td>18.0</td>      <td>704.47680</td>      <td>3300.41040</td>      <td>4847.2152</td>      <td>8763.0783</td>      <td>10988.66100</td>      <td>9134.7240</td>      <td>618.5790</td>      <td>204.0</td>      <td>548.0</td>      <td>886.0</td>      <td>...</td>      <td>1644.0</td>      <td>1194.0</td>      <td>164.0</td>      <td>3570.0</td>      <td>11471.0</td>      <td>21037.0</td>      <td>46034.0</td>      <td>1056486.0</td>      <td>50378.0</td>      <td>3200.0</td>    </tr>    <tr>      <td>19.0</td>      <td>734.55600</td>      <td>2216.81880</td>      <td>5183.7888</td>      <td>8030.1960</td>      <td>9271.09260</td>      <td>11955.6030</td>      <td>696.7770</td>      <td>126.0</td>      <td>458.0</td>      <td>950.0</td>      <td>...</td>      <td>962.0</td>      <td>1642.0</td>      <td>168.0</td>      <td>2355.0</td>      <td>8467.0</td>      <td>31861.0</td>      <td>39705.0</td>      <td>44697.0</td>      <td>70331.0</td>      <td>4166.0</td>    </tr>    <tr>      <td>20.0</td>      <td>1624.89660</td>      <td>2147.23200</td>      <td>4211.5686</td>      <td>10596.2070</td>      <td>10871.65440</td>      <td>14291.8692</td>      <td>NaN</td>      <td>328.0</td>      <td>288.0</td>      <td>654.0</td>      <td>...</td>      <td>1290.0</td>      <td>1816.0</td>      <td>NaN</td>      <td>7212.0</td>      <td>6325.0</td>      <td>20174.0</td>      <td>55083.0</td>      <td>64170.0</td>      <td>105131.0</td>      <td>NaN</td>    </tr>    <tr>      <td>21.0</td>      <td>780.67950</td>      <td>1578.02880</td>      <td>3949.3062</td>      <td>8689.8804</td>      <td>11954.91660</td>      <td>13165.7649</td>      <td>867.3474</td>      <td>162.0</td>      <td>270.0</td>      <td>580.0</td>      <td>...</td>      <td>1446.0</td>      <td>1858.0</td>      <td>62.0</td>      <td>3377.0</td>      <td>7673.0</td>      <td>19095.0</td>      <td>42296.0</td>      <td>68739.0</td>      <td>82061.0</td>      <td>3180.0</td>    </tr>    <tr>      <td>22.0</td>      <td>674.59860</td>      <td>2147.50980</td>      <td>4379.3424</td>      <td>7818.7302</td>      <td>10473.28380</td>      <td>10165.8672</td>      <td>493.1586</td>      <td>146.0</td>      <td>372.0</td>      <td>680.0</td>      <td>...</td>      <td>1304.0</td>      <td>1448.0</td>      <td>112.0</td>      <td>4225.0</td>      <td>10861.0</td>      <td>23030.0</td>      <td>57996.0</td>      <td>84330.0</td>      <td>67069.0</td>      <td>6950.0</td>    </tr>    <tr>      <td>23.0</td>      <td>359.65980</td>      <td>1575.06120</td>      <td>4602.7416</td>      <td>7616.9298</td>      <td>8292.86160</td>      <td>6131.1936</td>      <td>1799.6520</td>      <td>46.0</td>      <td>320.0</td>      <td>598.0</td>      <td>...</td>      <td>998.0</td>      <td>726.0</td>      <td>296.0</td>      <td>896.0</td>      <td>12350.0</td>      <td>23081.0</td>      <td>40025.0</td>      <td>56097.0</td>      <td>43176.0</td>      <td>14290.0</td>    </tr>    <tr>      <td>24.0</td>      <td>439.43040</td>      <td>1717.55340</td>      <td>2876.8572</td>      <td>5503.7736</td>      <td>7292.32740</td>      <td>7240.4076</td>      <td>428.6538</td>      <td>116.0</td>      <td>344.0</td>      <td>406.0</td>      <td>...</td>      <td>668.0</td>      <td>1048.0</td>      <td>36.0</td>      <td>2070.0</td>      <td>9543.0</td>      <td>25421.0</td>      <td>35384.0</td>      <td>36147.0</td>      <td>43114.0</td>      <td>2250.0</td>    </tr>    <tr>      <td>25.0</td>      <td>572.61420</td>      <td>1178.02440</td>      <td>2201.6388</td>      <td>4710.9924</td>      <td>6168.19260</td>      <td>2200.6362</td>      <td>361.4550</td>      <td>124.0</td>      <td>166.0</td>      <td>268.0</td>      <td>...</td>      <td>682.0</td>      <td>256.0</td>      <td>52.0</td>      <td>2440.0</td>      <td>5846.0</td>      <td>11270.0</td>      <td>26610.0</td>      <td>40681.0</td>      <td>14890.0</td>      <td>3300.0</td>    </tr>    <tr>      <td>26.0</td>      <td>418.70874</td>      <td>1165.96680</td>      <td>1794.1890</td>      <td>3139.2852</td>      <td>4016.67060</td>      <td>3301.8498</td>      <td>408.2202</td>      <td>96.0</td>      <td>148.0</td>      <td>272.0</td>      <td>...</td>      <td>418.0</td>      <td>354.0</td>      <td>60.0</td>      <td>1608.0</td>      <td>3417.0</td>      <td>10548.0</td>      <td>16839.0</td>      <td>20100.0</td>      <td>17663.0</td>      <td>2300.0</td>    </tr>    <tr>      <td>27.0</td>      <td>359.17320</td>      <td>1164.15960</td>      <td>1426.4550</td>      <td>2850.1320</td>      <td>3498.30300</td>      <td>2040.8454</td>      <td>NaN</td>      <td>40.0</td>      <td>152.0</td>      <td>226.0</td>      <td>...</td>      <td>340.0</td>      <td>164.0</td>      <td>NaN</td>      <td>1100.0</td>      <td>3615.0</td>      <td>7525.0</td>      <td>15935.0</td>      <td>19770.0</td>      <td>11796.0</td>      <td>NaN</td>    </tr>    <tr>      <td>28.0</td>      <td>333.84240</td>      <td>479.34000</td>      <td>1152.5958</td>      <td>2205.8778</td>      <td>1992.60540</td>      <td>521.7666</td>      <td>NaN</td>      <td>28.0</td>      <td>90.0</td>      <td>220.0</td>      <td>...</td>      <td>186.0</td>      <td>44.0</td>      <td>NaN</td>      <td>466.0</td>      <td>1860.0</td>      <td>7901.0</td>      <td>15370.0</td>      <td>10872.0</td>      <td>2500.0</td>      <td>NaN</td>    </tr>    <tr>      <td>29.0</td>      <td>236.74020</td>      <td>695.88480</td>      <td>568.2594</td>      <td>1447.5906</td>      <td>1398.78540</td>      <td>715.9404</td>      <td>NaN</td>      <td>54.0</td>      <td>56.0</td>      <td>80.0</td>      <td>...</td>      <td>180.0</td>      <td>106.0</td>      <td>NaN</td>      <td>2490.0</td>      <td>2000.0</td>      <td>3816.0</td>      <td>8220.0</td>      <td>10292.0</td>      <td>5950.0</td>      <td>NaN</td>    </tr>    <tr>      <td>30.0</td>      <td>125.53740</td>      <td>441.14160</td>      <td>733.6416</td>      <td>743.4468</td>      <td>578.32020</td>      <td>123.3774</td>      <td>NaN</td>      <td>14.0</td>      <td>54.0</td>      <td>76.0</td>      <td>...</td>      <td>90.0</td>      <td>28.0</td>      <td>NaN</td>      <td>210.0</td>      <td>2440.0</td>      <td>4370.0</td>      <td>6310.0</td>      <td>3440.0</td>      <td>1500.0</td>      <td>NaN</td>    </tr>    <tr>      <td>31.0</td>      <td>41.58600</td>      <td>314.92980</td>      <td>659.2626</td>      <td>1166.7606</td>      <td>315.53460</td>      <td>200.1708</td>      <td>NaN</td>      <td>12.0</td>      <td>36.0</td>      <td>68.0</td>      <td>...</td>      <td>12.0</td>      <td>16.0</td>      <td>NaN</td>      <td>200.0</td>      <td>1300.0</td>      <td>3500.0</td>      <td>8710.0</td>      <td>1050.0</td>      <td>1500.0</td>      <td>NaN</td>    </tr>    <tr>      <td>32.0</td>      <td>179.14380</td>      <td>315.54180</td>      <td>457.5174</td>      <td>541.8996</td>      <td>66.19740</td>      <td>NaN</td>      <td>NaN</td>      <td>40.0</td>      <td>56.0</td>      <td>68.0</td>      <td>...</td>      <td>10.0</td>      <td>NaN</td>      <td>NaN</td>      <td>1600.0</td>      <td>860.0</td>      <td>2300.0</td>      <td>6040.0</td>      <td>800.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>33.0</td>      <td>198.77880</td>      <td>153.34680</td>      <td>284.8218</td>      <td>116.7516</td>      <td>245.45166</td>      <td>NaN</td>      <td>NaN</td>      <td>32.0</td>      <td>12.0</td>      <td>42.0</td>      <td>...</td>      <td>60.0</td>      <td>NaN</td>      <td>NaN</td>      <td>1200.0</td>      <td>220.0</td>      <td>2065.0</td>      <td>1130.0</td>      <td>2050.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>34.0</td>      <td>49.11360</td>      <td>276.88260</td>      <td>268.4100</td>      <td>340.7124</td>      <td>174.54540</td>      <td>NaN</td>      <td>NaN</td>      <td>12.0</td>      <td>56.0</td>      <td>28.0</td>      <td>...</td>      <td>14.0</td>      <td>NaN</td>      <td>NaN</td>      <td>150.0</td>      <td>3380.0</td>      <td>1150.0</td>      <td>2400.0</td>      <td>2764.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>35.0</td>      <td>229.31280</td>      <td>54.04680</td>      <td>170.4930</td>      <td>634.7688</td>      <td>115.06440</td>      <td>NaN</td>      <td>NaN</td>      <td>54.0</td>      <td>8.0</td>      <td>26.0</td>      <td>...</td>      <td>12.0</td>      <td>NaN</td>      <td>NaN</td>      <td>1350.0</td>      <td>500.0</td>      <td>1950.0</td>      <td>3800.0</td>      <td>800.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>36.0</td>      <td>NaN</td>      <td>150.13140</td>      <td>333.6474</td>      <td>73.6980</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>16.0</td>      <td>40.0</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>500.0</td>      <td>1950.0</td>      <td>400.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>37.0</td>      <td>22.05960</td>      <td>49.89600</td>      <td>44.9682</td>      <td>NaN</td>      <td>451.13160</td>      <td>NaN</td>      <td>NaN</td>      <td>12.0</td>      <td>30.0</td>      <td>6.0</td>      <td>...</td>      <td>32.0</td>      <td>NaN</td>      <td>NaN</td>      <td>300.0</td>      <td>125.0</td>      <td>600.0</td>      <td>NaN</td>      <td>1800.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>38.0</td>      <td>71.59500</td>      <td>NaN</td>      <td>334.6878</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>16.0</td>      <td>NaN</td>      <td>46.0</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>300.0</td>      <td>NaN</td>      <td>2280.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>39.0</td>      <td>29.87640</td>      <td>NaN</td>      <td>53.7690</td>      <td>86.7246</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>10.0</td>      <td>NaN</td>      <td>12.0</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>500.0</td>      <td>NaN</td>      <td>450.0</td>      <td>500.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>40.0</td>      <td>38.55900</td>      <td>51.83580</td>      <td>107.4684</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>12.0</td>      <td>14.0</td>      <td>26.0</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>150.0</td>      <td>500.0</td>      <td>1080.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>41.0</td>      <td>NaN</td>      <td>108.45720</td>      <td>77.6472</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>12.0</td>      <td>14.0</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>450.0</td>      <td>800.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>43.0</td>      <td>NaN</td>      <td>86.05860</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>10.0</td>      <td>NaN</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>730.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>44.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>89.5266</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>500.0</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table><p>28 rows × 21 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pd.pivot_table(df_data, </span><br><span class="line">               index=[<span class="string">'Age'</span>],</span><br><span class="line">               columns=[<span class="string">'LeagueIndex'</span>],</span><br><span class="line">               aggfunc=np.sum,</span><br><span class="line">               fill_value=<span class="number">-100.</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead tr th {    text-align: left;}.dataframe thead tr:last-of-type th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="7" halign="left">APM</th>      <th colspan="7" halign="left">HoursPerWeek</th>      <th colspan="7" halign="left">TotalHours</th>    </tr>    <tr>      <th>LeagueIndex</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>...</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>    </tr>    <tr>      <th>Age</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <td>16.0</td>      <td>1062.44754</td>      <td>2919.70434</td>      <td>4851.9222</td>      <td>5149.7310</td>      <td>7787.37780</td>      <td>9042.1722</td>      <td>386.7774</td>      <td>324</td>      <td>720</td>      <td>778</td>      <td>...</td>      <td>1220</td>      <td>1280</td>      <td>56</td>      <td>4307</td>      <td>13143</td>      <td>29211</td>      <td>23581</td>      <td>49233</td>      <td>51320</td>      <td>3000</td>    </tr>    <tr>      <td>17.0</td>      <td>655.67280</td>      <td>1661.01540</td>      <td>4181.8920</td>      <td>5525.3586</td>      <td>10052.72100</td>      <td>8310.0858</td>      <td>573.8286</td>      <td>184</td>      <td>378</td>      <td>664</td>      <td>...</td>      <td>1460</td>      <td>1116</td>      <td>104</td>      <td>2044</td>      <td>7423</td>      <td>16602</td>      <td>24005</td>      <td>53375</td>      <td>45421</td>      <td>12700</td>    </tr>    <tr>      <td>18.0</td>      <td>704.47680</td>      <td>3300.41040</td>      <td>4847.2152</td>      <td>8763.0783</td>      <td>10988.66100</td>      <td>9134.7240</td>      <td>618.5790</td>      <td>204</td>      <td>548</td>      <td>886</td>      <td>...</td>      <td>1644</td>      <td>1194</td>      <td>164</td>      <td>3570</td>      <td>11471</td>      <td>21037</td>      <td>46034</td>      <td>1056486</td>      <td>50378</td>      <td>3200</td>    </tr>    <tr>      <td>19.0</td>      <td>734.55600</td>      <td>2216.81880</td>      <td>5183.7888</td>      <td>8030.1960</td>      <td>9271.09260</td>      <td>11955.6030</td>      <td>696.7770</td>      <td>126</td>      <td>458</td>      <td>950</td>      <td>...</td>      <td>962</td>      <td>1642</td>      <td>168</td>      <td>2355</td>      <td>8467</td>      <td>31861</td>      <td>39705</td>      <td>44697</td>      <td>70331</td>      <td>4166</td>    </tr>    <tr>      <td>20.0</td>      <td>1624.89660</td>      <td>2147.23200</td>      <td>4211.5686</td>      <td>10596.2070</td>      <td>10871.65440</td>      <td>14291.8692</td>      <td>-100.0000</td>      <td>328</td>      <td>288</td>      <td>654</td>      <td>...</td>      <td>1290</td>      <td>1816</td>      <td>-100</td>      <td>7212</td>      <td>6325</td>      <td>20174</td>      <td>55083</td>      <td>64170</td>      <td>105131</td>      <td>-100</td>    </tr>    <tr>      <td>21.0</td>      <td>780.67950</td>      <td>1578.02880</td>      <td>3949.3062</td>      <td>8689.8804</td>      <td>11954.91660</td>      <td>13165.7649</td>      <td>867.3474</td>      <td>162</td>      <td>270</td>      <td>580</td>      <td>...</td>      <td>1446</td>      <td>1858</td>      <td>62</td>      <td>3377</td>      <td>7673</td>      <td>19095</td>      <td>42296</td>      <td>68739</td>      <td>82061</td>      <td>3180</td>    </tr>    <tr>      <td>22.0</td>      <td>674.59860</td>      <td>2147.50980</td>      <td>4379.3424</td>      <td>7818.7302</td>      <td>10473.28380</td>      <td>10165.8672</td>      <td>493.1586</td>      <td>146</td>      <td>372</td>      <td>680</td>      <td>...</td>      <td>1304</td>      <td>1448</td>      <td>112</td>      <td>4225</td>      <td>10861</td>      <td>23030</td>      <td>57996</td>      <td>84330</td>      <td>67069</td>      <td>6950</td>    </tr>    <tr>      <td>23.0</td>      <td>359.65980</td>      <td>1575.06120</td>      <td>4602.7416</td>      <td>7616.9298</td>      <td>8292.86160</td>      <td>6131.1936</td>      <td>1799.6520</td>      <td>46</td>      <td>320</td>      <td>598</td>      <td>...</td>      <td>998</td>      <td>726</td>      <td>296</td>      <td>896</td>      <td>12350</td>      <td>23081</td>      <td>40025</td>      <td>56097</td>      <td>43176</td>      <td>14290</td>    </tr>    <tr>      <td>24.0</td>      <td>439.43040</td>      <td>1717.55340</td>      <td>2876.8572</td>      <td>5503.7736</td>      <td>7292.32740</td>      <td>7240.4076</td>      <td>428.6538</td>      <td>116</td>      <td>344</td>      <td>406</td>      <td>...</td>      <td>668</td>      <td>1048</td>      <td>36</td>      <td>2070</td>      <td>9543</td>      <td>25421</td>      <td>35384</td>      <td>36147</td>      <td>43114</td>      <td>2250</td>    </tr>    <tr>      <td>25.0</td>      <td>572.61420</td>      <td>1178.02440</td>      <td>2201.6388</td>      <td>4710.9924</td>      <td>6168.19260</td>      <td>2200.6362</td>      <td>361.4550</td>      <td>124</td>      <td>166</td>      <td>268</td>      <td>...</td>      <td>682</td>      <td>256</td>      <td>52</td>      <td>2440</td>      <td>5846</td>      <td>11270</td>      <td>26610</td>      <td>40681</td>      <td>14890</td>      <td>3300</td>    </tr>    <tr>      <td>26.0</td>      <td>418.70874</td>      <td>1165.96680</td>      <td>1794.1890</td>      <td>3139.2852</td>      <td>4016.67060</td>      <td>3301.8498</td>      <td>408.2202</td>      <td>96</td>      <td>148</td>      <td>272</td>      <td>...</td>      <td>418</td>      <td>354</td>      <td>60</td>      <td>1608</td>      <td>3417</td>      <td>10548</td>      <td>16839</td>      <td>20100</td>      <td>17663</td>      <td>2300</td>    </tr>    <tr>      <td>27.0</td>      <td>359.17320</td>      <td>1164.15960</td>      <td>1426.4550</td>      <td>2850.1320</td>      <td>3498.30300</td>      <td>2040.8454</td>      <td>-100.0000</td>      <td>40</td>      <td>152</td>      <td>226</td>      <td>...</td>      <td>340</td>      <td>164</td>      <td>-100</td>      <td>1100</td>      <td>3615</td>      <td>7525</td>      <td>15935</td>      <td>19770</td>      <td>11796</td>      <td>-100</td>    </tr>    <tr>      <td>28.0</td>      <td>333.84240</td>      <td>479.34000</td>      <td>1152.5958</td>      <td>2205.8778</td>      <td>1992.60540</td>      <td>521.7666</td>      <td>-100.0000</td>      <td>28</td>      <td>90</td>      <td>220</td>      <td>...</td>      <td>186</td>      <td>44</td>      <td>-100</td>      <td>466</td>      <td>1860</td>      <td>7901</td>      <td>15370</td>      <td>10872</td>      <td>2500</td>      <td>-100</td>    </tr>    <tr>      <td>29.0</td>      <td>236.74020</td>      <td>695.88480</td>      <td>568.2594</td>      <td>1447.5906</td>      <td>1398.78540</td>      <td>715.9404</td>      <td>-100.0000</td>      <td>54</td>      <td>56</td>      <td>80</td>      <td>...</td>      <td>180</td>      <td>106</td>      <td>-100</td>      <td>2490</td>      <td>2000</td>      <td>3816</td>      <td>8220</td>      <td>10292</td>      <td>5950</td>      <td>-100</td>    </tr>    <tr>      <td>30.0</td>      <td>125.53740</td>      <td>441.14160</td>      <td>733.6416</td>      <td>743.4468</td>      <td>578.32020</td>      <td>123.3774</td>      <td>-100.0000</td>      <td>14</td>      <td>54</td>      <td>76</td>      <td>...</td>      <td>90</td>      <td>28</td>      <td>-100</td>      <td>210</td>      <td>2440</td>      <td>4370</td>      <td>6310</td>      <td>3440</td>      <td>1500</td>      <td>-100</td>    </tr>    <tr>      <td>31.0</td>      <td>41.58600</td>      <td>314.92980</td>      <td>659.2626</td>      <td>1166.7606</td>      <td>315.53460</td>      <td>200.1708</td>      <td>-100.0000</td>      <td>12</td>      <td>36</td>      <td>68</td>      <td>...</td>      <td>12</td>      <td>16</td>      <td>-100</td>      <td>200</td>      <td>1300</td>      <td>3500</td>      <td>8710</td>      <td>1050</td>      <td>1500</td>      <td>-100</td>    </tr>    <tr>      <td>32.0</td>      <td>179.14380</td>      <td>315.54180</td>      <td>457.5174</td>      <td>541.8996</td>      <td>66.19740</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>40</td>      <td>56</td>      <td>68</td>      <td>...</td>      <td>10</td>      <td>-100</td>      <td>-100</td>      <td>1600</td>      <td>860</td>      <td>2300</td>      <td>6040</td>      <td>800</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>33.0</td>      <td>198.77880</td>      <td>153.34680</td>      <td>284.8218</td>      <td>116.7516</td>      <td>245.45166</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>32</td>      <td>12</td>      <td>42</td>      <td>...</td>      <td>60</td>      <td>-100</td>      <td>-100</td>      <td>1200</td>      <td>220</td>      <td>2065</td>      <td>1130</td>      <td>2050</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>34.0</td>      <td>49.11360</td>      <td>276.88260</td>      <td>268.4100</td>      <td>340.7124</td>      <td>174.54540</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>12</td>      <td>56</td>      <td>28</td>      <td>...</td>      <td>14</td>      <td>-100</td>      <td>-100</td>      <td>150</td>      <td>3380</td>      <td>1150</td>      <td>2400</td>      <td>2764</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>35.0</td>      <td>229.31280</td>      <td>54.04680</td>      <td>170.4930</td>      <td>634.7688</td>      <td>115.06440</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>54</td>      <td>8</td>      <td>26</td>      <td>...</td>      <td>12</td>      <td>-100</td>      <td>-100</td>      <td>1350</td>      <td>500</td>      <td>1950</td>      <td>3800</td>      <td>800</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>36.0</td>      <td>-100.00000</td>      <td>150.13140</td>      <td>333.6474</td>      <td>73.6980</td>      <td>-100.00000</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>-100</td>      <td>16</td>      <td>40</td>      <td>...</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>500</td>      <td>1950</td>      <td>400</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>37.0</td>      <td>22.05960</td>      <td>49.89600</td>      <td>44.9682</td>      <td>-100.0000</td>      <td>451.13160</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>12</td>      <td>30</td>      <td>6</td>      <td>...</td>      <td>32</td>      <td>-100</td>      <td>-100</td>      <td>300</td>      <td>125</td>      <td>600</td>      <td>-100</td>      <td>1800</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>38.0</td>      <td>71.59500</td>      <td>-100.00000</td>      <td>334.6878</td>      <td>-100.0000</td>      <td>-100.00000</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>16</td>      <td>-100</td>      <td>46</td>      <td>...</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>300</td>      <td>-100</td>      <td>2280</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>39.0</td>      <td>29.87640</td>      <td>-100.00000</td>      <td>53.7690</td>      <td>86.7246</td>      <td>-100.00000</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>10</td>      <td>-100</td>      <td>12</td>      <td>...</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>500</td>      <td>-100</td>      <td>450</td>      <td>500</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>40.0</td>      <td>38.55900</td>      <td>51.83580</td>      <td>107.4684</td>      <td>-100.0000</td>      <td>-100.00000</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>12</td>      <td>14</td>      <td>26</td>      <td>...</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>150</td>      <td>500</td>      <td>1080</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>41.0</td>      <td>-100.00000</td>      <td>108.45720</td>      <td>77.6472</td>      <td>-100.0000</td>      <td>-100.00000</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>-100</td>      <td>12</td>      <td>14</td>      <td>...</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>450</td>      <td>800</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>43.0</td>      <td>-100.00000</td>      <td>86.05860</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>-100.00000</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>-100</td>      <td>10</td>      <td>-100</td>      <td>...</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>730</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>    </tr>    <tr>      <td>44.0</td>      <td>-100.00000</td>      <td>-100.00000</td>      <td>-100.0000</td>      <td>89.5266</td>      <td>-100.00000</td>      <td>-100.0000</td>      <td>-100.0000</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>...</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>      <td>500</td>      <td>-100</td>      <td>-100</td>      <td>-100</td>    </tr>  </tbody></table><p>28 rows × 21 columns</p></div><h3 id="交叉表"><a href="#交叉表" class="headerlink" title="交叉表"></a>交叉表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.crosstab(df_data[<span class="string">'LeagueIndex'</span>],</span><br><span class="line">            df_data[<span class="string">'Age'</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Age</th>      <th>16.0</th>      <th>17.0</th>      <th>18.0</th>      <th>19.0</th>      <th>20.0</th>      <th>21.0</th>      <th>22.0</th>      <th>23.0</th>      <th>24.0</th>      <th>25.0</th>      <th>...</th>      <th>34.0</th>      <th>35.0</th>      <th>36.0</th>      <th>37.0</th>      <th>38.0</th>      <th>39.0</th>      <th>40.0</th>      <th>41.0</th>      <th>43.0</th>      <th>44.0</th>    </tr>    <tr>      <th>LeagueIndex</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <td>1</td>      <td>18</td>      <td>9</td>      <td>13</td>      <td>12</td>      <td>22</td>      <td>12</td>      <td>12</td>      <td>6</td>      <td>9</td>      <td>11</td>      <td>...</td>      <td>1</td>      <td>5</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>38</td>      <td>22</td>      <td>38</td>      <td>32</td>      <td>25</td>      <td>23</td>      <td>28</td>      <td>24</td>      <td>24</td>      <td>18</td>      <td>...</td>      <td>5</td>      <td>1</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>2</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>48</td>      <td>43</td>      <td>56</td>      <td>53</td>      <td>47</td>      <td>44</td>      <td>47</td>      <td>47</td>      <td>32</td>      <td>26</td>      <td>...</td>      <td>3</td>      <td>3</td>      <td>5</td>      <td>1</td>      <td>4</td>      <td>1</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>45</td>      <td>49</td>      <td>78</td>      <td>71</td>      <td>97</td>      <td>81</td>      <td>75</td>      <td>72</td>      <td>52</td>      <td>45</td>      <td>...</td>      <td>4</td>      <td>7</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>55</td>      <td>71</td>      <td>81</td>      <td>68</td>      <td>80</td>      <td>96</td>      <td>81</td>      <td>59</td>      <td>58</td>      <td>51</td>      <td>...</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>50</td>      <td>51</td>      <td>56</td>      <td>73</td>      <td>86</td>      <td>83</td>      <td>68</td>      <td>42</td>      <td>48</td>      <td>15</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>7</td>      <td>2</td>      <td>3</td>      <td>3</td>      <td>4</td>      <td>0</td>      <td>5</td>      <td>3</td>      <td>9</td>      <td>2</td>      <td>2</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>7 rows × 28 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.crosstab(df_data[<span class="string">'LeagueIndex'</span>],</span><br><span class="line">            [df_data[<span class="string">'Age'</span>], df_data[<span class="string">'HoursPerWeek'</span>]])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead tr th {    text-align: left;}.dataframe thead tr:last-of-type th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>Age</th>      <th colspan="10" halign="left">16.0</th>      <th>...</th>      <th>39.0</th>      <th colspan="4" halign="left">40.0</th>      <th colspan="3" halign="left">41.0</th>      <th>43.0</th>      <th>44.0</th>    </tr>    <tr>      <th>HoursPerWeek</th>      <th>0.0</th>      <th>2.0</th>      <th>4.0</th>      <th>6.0</th>      <th>8.0</th>      <th>10.0</th>      <th>12.0</th>      <th>14.0</th>      <th>16.0</th>      <th>20.0</th>      <th>...</th>      <th>12.0</th>      <th>10.0</th>      <th>12.0</th>      <th>14.0</th>      <th>16.0</th>      <th>4.0</th>      <th>8.0</th>      <th>14.0</th>      <th>10.0</th>      <th>6.0</th>    </tr>    <tr>      <th>LeagueIndex</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>3</td>      <td>1</td>      <td>1</td>      <td>2</td>      <td>3</td>      <td>3</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>0</td>      <td>0</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>9</td>      <td>4</td>      <td>4</td>      <td>3</td>      <td>3</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>6</td>      <td>7</td>      <td>6</td>      <td>6</td>      <td>7</td>      <td>2</td>      <td>1</td>      <td>...</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>0</td>      <td>2</td>      <td>5</td>      <td>1</td>      <td>6</td>      <td>4</td>      <td>3</td>      <td>6</td>      <td>3</td>      <td>1</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>0</td>      <td>1</td>      <td>2</td>      <td>1</td>      <td>3</td>      <td>8</td>      <td>3</td>      <td>6</td>      <td>3</td>      <td>6</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>1</td>      <td>1</td>      <td>4</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>4</td>      <td>3</td>      <td>1</td>      <td>7</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>7</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>7 rows × 325 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!--stackedit_data:eyJoaXN0b3J5IjpbLTExNDc4Njk4NzJdfQ==-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas-基本知识</title>
      <link href="/2020/02/10/DataAnalysis/pandas-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/02/10/DataAnalysis/pandas-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Pandas数据结构"><a href="#一、Pandas数据结构" class="headerlink" title="一、Pandas数据结构"></a>一、Pandas数据结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><blockquote><ol><li>通过list构建Series</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ser_obj = pd.Series(range(<span class="number">10</span>, <span class="number">20</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (type(ser_obj))</span><br><span class="line">print(ser_obj)</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.series.Series&apos;&gt;0    101    122    143    164    18dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取索引</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj.index)</span><br><span class="line"><span class="comment">#范围索引数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览数据</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj.head(<span class="number">3</span>))</span><br><span class="line"><span class="comment">#默认输出五行</span></span><br></pre></td></tr></table></figure><pre><code>[10 12 14 16 18]RangeIndex(start=0, stop=5, step=1)0    101    122    14dtype: int64</code></pre><blockquote><ol start="2"><li>通过dict构建Series</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">year_data = &#123;<span class="number">2001</span>: <span class="number">17.8</span>, <span class="number">2002</span>: <span class="number">20.1</span>, <span class="number">2003</span>: <span class="number">16.5</span>,<span class="number">2004</span>:<span class="number">324</span>,<span class="number">2423</span>:<span class="number">243</span>&#125;</span><br><span class="line">ser_obj2 = pd.Series(year_data)</span><br><span class="line"><span class="keyword">print</span> (ser_obj2.head(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (ser_obj2.index)</span><br><span class="line">print(ser_obj2)</span><br></pre></td></tr></table></figure><pre><code>2001    17.82002    20.1dtype: float64Int64Index([2001, 2002, 2003, 2004, 2423], dtype=&apos;int64&apos;)2001     17.82002     20.12003     16.52004    324.02423    243.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># name属性【【【【【出问题了！！！】】】】】</span></span><br><span class="line">ser_obj2.name = <span class="string">'钱'</span></span><br><span class="line">ser_obj2.index.name = <span class="string">'year'</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj2.head())</span><br></pre></td></tr></table></figure><pre><code>year2001     17.82002     20.12003     16.52004    324.02423    243.0Name: 钱, dtype: float64</code></pre><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><blockquote><ol><li>通过ndarray构建DataFrame</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.random.rand(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (array)</span><br><span class="line"></span><br><span class="line">df_obj = pd.DataFrame(array,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"><span class="keyword">print</span> (df_obj.head())</span><br><span class="line">print(df_obj.sort_values(by=<span class="string">'a'</span>, ascending=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><pre><code>[[0.23496522 0.92258429 0.36447462 0.52634697] [0.73743514 0.88175941 0.48944212 0.4173522 ] [0.21214568 0.57148666 0.59496072 0.49490723] [0.7458542  0.74743907 0.70475157 0.28130394] [0.43805937 0.90300134 0.00730653 0.68203725]]          a         b         c         d0  0.234965  0.922584  0.364475  0.5263471  0.737435  0.881759  0.489442  0.4173522  0.212146  0.571487  0.594961  0.4949073  0.745854  0.747439  0.704752  0.2813044  0.438059  0.903001  0.007307  0.682037          a         b         c         d3  0.745854  0.747439  0.704752  0.2813041  0.737435  0.881759  0.489442  0.4173524  0.438059  0.903001  0.007307  0.6820370  0.234965  0.922584  0.364475  0.5263472  0.212146  0.571487  0.594961  0.494907</code></pre><blockquote><ol start="2"><li>通过dict构建DataFrame</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一个键值对就相当于一列！！但是具体到字典里面的值所用到的一些函数还是不能很清楚</span></span><br><span class="line">dict_data = &#123;<span class="string">'A'</span>: <span class="number">1.</span>, </span><br><span class="line">             <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20161217'</span>),</span><br><span class="line">             <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">             <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">             <span class="string">'E'</span> : pd.Categorical([<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"C++"</span>,<span class="string">"C#"</span>]),</span><br><span class="line">             <span class="string">'F'</span> : <span class="string">'ChinaHadoop'</span> &#125;</span><br><span class="line">df_obj2 = pd.DataFrame(dict_data)</span><br><span class="line"><span class="keyword">print</span> (df_obj2.head())</span><br></pre></td></tr></table></figure><pre><code>     A          B    C  D       E            F0  1.0 2016-12-17  1.0  3  Python  ChinaHadoop1  1.0 2016-12-17  1.0  3    Java  ChinaHadoop2  1.0 2016-12-17  1.0  3     C++  ChinaHadoop3  1.0 2016-12-17  1.0  3      C#  ChinaHadoop</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加列</span></span><br><span class="line">df_obj2[<span class="string">'G'</span>] = df_obj2[<span class="string">'D'</span>] + <span class="number">4</span></span><br><span class="line"><span class="keyword">print</span> (df_obj2.head())</span><br><span class="line">xxx = pd.DataFrame(df_obj2,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>],index=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(xxx)</span><br></pre></td></tr></table></figure><pre><code>     A          B    C  D       E            F  G0  1.0 2016-12-17  1.0  3  Python  ChinaHadoop  71  1.0 2016-12-17  1.0  3    Java  ChinaHadoop  72  1.0 2016-12-17  1.0  3     C++  ChinaHadoop  73  1.0 2016-12-17  1.0  3      C#  ChinaHadoop  7     A          B    C    D       E            F    G   H0  1.0 2016-12-17  1.0  3.0  Python  ChinaHadoop  7.0 NaN1  1.0 2016-12-17  1.0  3.0    Java  ChinaHadoop  7.0 NaN2  1.0 2016-12-17  1.0  3.0     C++  ChinaHadoop  7.0 NaN3  1.0 2016-12-17  1.0  3.0      C#  ChinaHadoop  7.0 NaN4  NaN        NaT  NaN  NaN     NaN          NaN  NaN NaN</code></pre><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (type(ser_obj.index))</span><br><span class="line"><span class="keyword">print</span> (type(df_obj2.index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (df_obj2.index)</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.indexes.range.RangeIndex&apos;&gt;&lt;class &apos;pandas.core.indexes.numeric.Int64Index&apos;&gt;Int64Index([0, 1, 2, 3], dtype=&apos;int64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引对象不可变</span></span><br><span class="line">df_obj2.index[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-10-6367894e76d8&gt; in &lt;module&gt;      1 # 索引对象不可变----&gt; 2 df_obj2.index[0] = 2~\Anaconda3\lib\site-packages\pandas\core\indexes\base.py in __setitem__(self, key, value)   4258    4259     def __setitem__(self, key, value):-&gt; 4260         raise TypeError(&quot;Index does not support mutable operations&quot;)   4261    4262     def __getitem__(self, key):TypeError: Index does not support mutable operations</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、Pandas数据操作"><a href="#二、Pandas数据操作" class="headerlink" title="二、Pandas数据操作"></a>二、Pandas数据操作</h2><h3 id="常用函数总结"><a href="#常用函数总结" class="headerlink" title="常用函数总结"></a>常用函数总结</h3><blockquote><p>·shape  获取数据的尺寸</p></blockquote><pre><code>获得df的size：df.shape获得df中的行数：df.shape[0]获得df中的列数： df.shape[1]获得行索引信息：df.index获得列索引信息：df.colomns</code></pre><blockquote><p>·values  获得df中的值===中文没用</p></blockquote><pre><code>df.values === 以列表的形式展现出来，去除了索引===dataframe类型数据转换成array类型</code></pre><blockquote><p>·setindex和resetindex</p></blockquote><pre><code>reset_index可以还原索引，从新变为默认的整型索引     DataFrame.reset_index(level=None, drop=False, inplace=False, col_level=0, col_fill=”)     level控制了具体要还原的那个等级的索引     drop为False则索引列会被还原为普通列，否则会丢失set_index方法，设置单索引和复合索引抑或是添加索引。     DataFrame.set_index(keys, drop=True, append=False, inplace=False, verify_integrity=False)     append添加新索引，drop为False，inplace为True时，索引将会还原为列</code></pre><blockquote><p>·iterrows（）遍历DataFrame中的数据</p></blockquote><pre><code>for index,row in df.iterrows():</code></pre><blockquote><p>·split(sep,n,expand=false)</p></blockquote><pre><code>sep表示用于分割的字符；n表格分割成多少列；expand表示是否展开为数据款，True输出Series，False输出Dataframe。字段拆分：是指按照固定的字符，拆分已有字符串</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="匿名函数应用"><a href="#匿名函数应用" class="headerlink" title="匿名函数应用"></a>匿名函数应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Numpy ufunc 函数</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>) - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (df)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (np.abs(df))</span><br></pre></td></tr></table></figure><pre><code>          0         1         2         30  0.624016 -2.695175 -1.211426 -0.3861511 -1.335385 -1.315232 -0.305902 -0.3613482 -0.349443 -2.032110  0.075995 -0.9667253 -1.631192 -1.051390 -1.767981 -0.3666634 -0.786178 -0.335846 -0.797992 -0.931216          0         1         2         30  0.624016  2.695175  1.211426  0.3861511  1.335385  1.315232  0.305902  0.3613482  0.349443  2.032110  0.075995  0.9667253  1.631192  1.051390  1.767981  0.3666634  0.786178  0.335846  0.797992  0.931216</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用apply应用行或列数据</span></span><br><span class="line">f = <span class="keyword">lambda</span> x : x.max()</span><br><span class="line"><span class="keyword">print</span> (df.apply(f))</span><br></pre></td></tr></table></figure><pre><code>0    0.6240161   -0.3358462    0.0759953   -0.361348dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定轴方向</span></span><br><span class="line"><span class="keyword">print</span> (df.apply(f, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>0    0.6240161   -0.3059022    0.0759953   -0.3666634   -0.335846dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用applymap应用到每个数据</span></span><br><span class="line">f2 = <span class="keyword">lambda</span> x : <span class="string">'%.2f'</span> % x</span><br><span class="line"><span class="keyword">print</span> (df.applymap(f2))</span><br></pre></td></tr></table></figure><pre><code>       0      1      2      30   0.62  -2.70  -1.21  -0.391  -1.34  -1.32  -0.31  -0.362  -0.35  -2.03   0.08  -0.973  -1.63  -1.05  -1.77  -0.374  -0.79  -0.34  -0.80  -0.93</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s4 = pd.Series(range(<span class="number">10</span>, <span class="number">15</span>), index = np.random.randint(<span class="number">5</span>, size=<span class="number">5</span>))</span><br><span class="line"><span class="keyword">print</span> (s4)</span><br></pre></td></tr></table></figure><pre><code>4    101    114    121    131    14dtype: int64</code></pre><blockquote><ol><li>索引排序</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">s4.sort_index()</span><br></pre></td></tr></table></figure><pre><code>1    111    131    144    104    12dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df4 = pd.DataFrame(np.random.randn(<span class="number">3</span>, <span class="number">4</span>), </span><br><span class="line">                   index=np.random.randint(<span class="number">3</span>, size=<span class="number">3</span>),</span><br><span class="line">                   columns=np.random.randint(<span class="number">4</span>, size=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df4</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>2</th>      <th>1</th>      <th>3</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0.007031</td>      <td>1.261990</td>      <td>-1.647929</td>      <td>0.176549</td>    </tr>    <tr>      <td>1</td>      <td>-2.510698</td>      <td>-0.207659</td>      <td>0.628221</td>      <td>0.441352</td>    </tr>    <tr>      <td>0</td>      <td>-0.367051</td>      <td>1.536606</td>      <td>0.167158</td>      <td>-0.236129</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#df4.sort_index(ascending=False)</span></span><br><span class="line">df4.sort_index(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>1</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1.261990</td>      <td>0.176549</td>      <td>0.007031</td>      <td>-1.647929</td>    </tr>    <tr>      <td>1</td>      <td>-0.207659</td>      <td>0.441352</td>      <td>-2.510698</td>      <td>0.628221</td>    </tr>    <tr>      <td>0</td>      <td>1.536606</td>      <td>-0.236129</td>      <td>-0.367051</td>      <td>0.167158</td>    </tr>  </tbody></table></div><blockquote><ol start="2"><li>按值排序</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#df.sortvalues(by='a', ascending=False) === 通过a的值</span></span><br><span class="line"><span class="comment">#    作用是对选定的一列数值（'a'）数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖）</span></span><br><span class="line">df4.sort_values(by=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-22-36ffa8ddd07d&gt; in &lt;module&gt;      2 #df.sortvalues(by=&apos;a&apos;, ascending=False) === 通过a的值      3 #    作用是对选定的一列数值（&apos;a&apos;）数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖）----&gt; 4 df4.sort_values(by=1)~\Anaconda3\lib\site-packages\pandas\core\frame.py in sort_values(self, by, axis, ascending, inplace, kind, na_position)   4991    4992             by = by[0]-&gt; 4993             k = self._get_label_or_level_values(by, axis=axis)   4994    4995             if isinstance(ascending, (tuple, list)):~\Anaconda3\lib\site-packages\pandas\core\generic.py in _get_label_or_level_values(self, key, axis)   1795                     key=key,   1796                     label_axis_name=label_axis_name,-&gt; 1797                     multi_message=multi_message,   1798                 )   1799             )ValueError: The column label &apos;1&apos; is not unique.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!--stackedit_data:eyJoaXN0b3J5IjpbMTMyMjM3MTMyXX0=-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy-使用总结</title>
      <link href="/2020/02/10/DataAnalysis/numpy-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/10/DataAnalysis/numpy-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、NumPy"><a href="#一、NumPy" class="headerlink" title="一、NumPy"></a>一、NumPy</h2><h3 id="ndarray-理解多维数组"><a href="#ndarray-理解多维数组" class="headerlink" title="ndarray 理解多维数组"></a>ndarray 理解多维数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定维度的随机多维数据</span></span><br><span class="line"><span class="comment">#数学建模应该用不到</span></span><br><span class="line">data = np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line"><span class="keyword">print</span> (type(data))</span><br><span class="line"><span class="comment">#type是显示数据类型；shape显示维度；ndim维度个数;type另外的作用</span></span><br></pre></td></tr></table></figure><pre><code>[[0.46686682 0.68844304 0.76663872] [0.70747721 0.47887587 0.25943412]]&lt;class &apos;numpy.ndarray&apos;&gt;</code></pre><blockquote><p>ndim, shape 和 dtype 属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'维度个数'</span>, data.ndim)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'各维度大小: '</span>, data.shape)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'数据类型: '</span>, data.dtype)</span><br></pre></td></tr></table></figure><pre><code>维度个数 2各维度大小:  (2, 3)数据类型:  float64</code></pre><h3 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建ndarray</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''1. array创建'''</span></span><br><span class="line"><span class="comment"># list转换为 ndarray</span></span><br><span class="line">l = range(<span class="number">10</span>)</span><br><span class="line">data = np.array(l)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line"><span class="keyword">print</span> (data.shape)</span><br><span class="line"><span class="keyword">print</span> (data.ndim)</span><br></pre></td></tr></table></figure><pre><code>[0 1 2 3 4 5 6 7 8 9](10,)1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 嵌套序列转换为ndarray</span></span><br><span class="line">l2 = [range(<span class="number">10</span>), range(<span class="number">10</span>)]</span><br><span class="line"><span class="comment">#就这样形成了一个数组</span></span><br><span class="line">data = np.array(l2)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line"><span class="keyword">print</span> (data.shape)</span><br></pre></td></tr></table></figure><pre><code>[[0 1 2 3 4 5 6 7 8 9] [0 1 2 3 4 5 6 7 8 9]](2, 10)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''2. zeros;ones;empty创建'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.zeros</span></span><br><span class="line">zeros_arr = np.zeros((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">#注意元组，这里经常报错</span></span><br><span class="line"><span class="comment"># np.ones</span></span><br><span class="line">ones_arr = np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.empty[不全为零，而且是随机的一些数字]</span></span><br><span class="line">empty_arr = np.empty((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.empty 指定数据类型</span></span><br><span class="line">empty_int_arr = np.empty((<span class="number">3</span>, <span class="number">3</span>), int)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (zeros_arr)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (ones_arr)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (empty_arr)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (empty_int_arr)</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]]-------------[[1. 1. 1.] [1. 1. 1.]]-------------[[0.000e+000 0.000e+000 0.000e+000] [0.000e+000 0.000e+000 2.174e-321] [0.000e+000 0.000e+000 0.000e+000]]-------------[[0 0 0] [0 0 0] [0 0 0]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.arange()</span></span><br><span class="line"><span class="comment">#创建一系列连续的数算是numpy里面类似python里面range的功能</span></span><br><span class="line"><span class="keyword">print</span> (np.arange(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><pre><code>[0 1 2 3 4 5 6 7 8 9]</code></pre><h2 id="二、操作nddarray"><a href="#二、操作nddarray" class="headerlink" title="二、操作nddarray"></a>二、操作nddarray</h2><h3 id="矢量化-vectorization"><a href="#矢量化-vectorization" class="headerlink" title="矢量化 (vectorization)"></a>矢量化 (vectorization)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矢量与矢量运算</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"元素之间相乘："</span>)</span><br><span class="line"><span class="comment">#注意区分矩阵之间的运算。这里的矢量原酸相当于是广播式的运算</span></span><br><span class="line"><span class="keyword">print</span> (arr * arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"矩阵相加："</span>)</span><br><span class="line"><span class="keyword">print</span> (arr + arr)</span><br></pre></td></tr></table></figure><pre><code>元素之间相乘：[[ 1  4  9] [16 25 36]]矩阵相加：[[ 2  4  6] [ 8 10 12]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矢量与标量运算</span></span><br><span class="line"><span class="keyword">print</span> (<span class="number">1.</span> / arr)</span><br><span class="line"><span class="keyword">print</span> (<span class="number">2.</span> * arr)</span><br></pre></td></tr></table></figure><pre><code>[[1.         0.5        0.33333333] [0.25       0.2        0.16666667]][[ 2.  4.  6.] [ 8. 10. 12.]]</code></pre><h3 id="索引与切片"><a href="#索引与切片" class="headerlink" title="索引与切片"></a>索引与切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维数组</span></span><br><span class="line">arr1 = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> (arr1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr1[<span class="number">2</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><pre><code>[0 1 2 3 4 5 6 7 8 9][2 3 4]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多维数组</span></span><br><span class="line">arr2 = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">#要学会定义多维数组，arange是形成12个随机数，之后的reshape是形成维数</span></span><br><span class="line"><span class="comment">#多维数组的空间含义就是比如：3.4.5=长4宽5高3</span></span><br><span class="line"><span class="comment">#还有点数就是应用函数</span></span><br><span class="line"><span class="keyword">print</span> (arr2)</span><br></pre></td></tr></table></figure><pre><code>[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (arr2[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr2[<span class="number">0</span>:<span class="number">2</span>, <span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr2[:, <span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><pre><code>[4 5 6 7][[2 3] [6 7]][[ 1  2] [ 5  6] [ 9 10]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 条件索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 data_arr 中 2015年后的数据</span></span><br><span class="line">data_arr = np.random.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (data_arr)</span><br><span class="line"></span><br><span class="line">year_arr = np.array([[<span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2000</span>],</span><br><span class="line">                     [<span class="number">2005</span>, <span class="number">2002</span>, <span class="number">2009</span>],</span><br><span class="line">                     [<span class="number">2001</span>, <span class="number">2003</span>, <span class="number">2010</span>]])</span><br><span class="line"></span><br><span class="line">is_year_after_2005 = year_arr &gt;= <span class="number">2005</span></span><br><span class="line"><span class="comment">#:他会扩展成同类型的数组</span></span><br><span class="line"><span class="keyword">print</span> (is_year_after_2005, is_year_after_2005.dtype)</span><br><span class="line"></span><br><span class="line">filtered_arr = data_arr[is_year_after_2005]</span><br><span class="line"></span><br><span class="line">filtered_arr = data_arr[year_arr &gt;= <span class="number">2005</span>]</span><br><span class="line"><span class="keyword">print</span> (filtered_arr)</span><br><span class="line"><span class="comment">#中间的一些语句可以删除</span></span><br><span class="line"><span class="comment">#最后生成得是一维数组，进行数据过滤的时候很有用</span></span><br></pre></td></tr></table></figure><pre><code>[[0.61482194 0.0249229  0.28525661] [0.05121173 0.37672803 0.86259463] [0.22648329 0.4581513  0.18620441]][[False False False] [ True False  True] [False False  True]] bool[0.05121173 0.86259463 0.18620441]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个条件&amp; |</span></span><br><span class="line">filtered_arr = data_arr[(year_arr &lt;= <span class="number">2005</span>) &amp; (year_arr % <span class="number">2</span> == <span class="number">0</span>)]</span><br><span class="line"><span class="keyword">print</span> (filtered_arr)</span><br></pre></td></tr></table></figure><pre><code>[0.61482194 0.28525661 0.37672803]</code></pre><h3 id="转置-transpose"><a href="#转置-transpose" class="headerlink" title="转置 === transpose"></a>转置 === transpose</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = np.random.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"><span class="keyword">print</span> (arr.transpose())</span><br></pre></td></tr></table></figure><pre><code>[[0.01538974 0.47573964 0.90684253] [0.93683601 0.64306611 0.63846634]][[0.01538974 0.93683601] [0.47573964 0.64306611] [0.90684253 0.63846634]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#高维数组的转换(图像里面会用得到转换维度)</span></span><br><span class="line"></span><br><span class="line">arr3d = np.random.rand(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (arr3d)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'----------------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (arr3d.transpose((<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))) <span class="comment"># 多维数组的转置和定义不会</span></span><br></pre></td></tr></table></figure><pre><code>[[[0.18074837 0.64652003 0.80527972 0.67800268]  [0.95766577 0.2498768  0.00304503 0.7058178 ]  [0.12523549 0.18796252 0.72463798 0.15352211]] [[0.38808013 0.31075033 0.53082474 0.32254431]  [0.6861262  0.02999367 0.70980993 0.09099878]  [0.14987301 0.78237398 0.90159408 0.82897071]]]----------------------[[[0.18074837 0.64652003 0.80527972 0.67800268]  [0.38808013 0.31075033 0.53082474 0.32254431]] [[0.95766577 0.2498768  0.00304503 0.7058178 ]  [0.6861262  0.02999367 0.70980993 0.09099878]] [[0.12523549 0.18796252 0.72463798 0.15352211]  [0.14987301 0.78237398 0.90159408 0.82897071]]]</code></pre><h3 id="ndarray数据类型转化-astype"><a href="#ndarray数据类型转化-astype" class="headerlink" title="ndarray数据类型转化 === astype"></a>ndarray数据类型转化 === astype</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zeros_float_arr = np.zeros((<span class="number">3</span>, <span class="number">4</span>), dtype=np.float64)</span><br><span class="line"><span class="keyword">print</span> (zeros_float_arr)</span><br><span class="line"><span class="keyword">print</span> (zeros_float_arr.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># astype转换数据类型</span></span><br><span class="line">zeros_int_arr = zeros_float_arr.astype(np.int32)</span><br><span class="line"><span class="keyword">print</span> (zeros_int_arr)</span><br><span class="line"><span class="keyword">print</span> (zeros_int_arr.dtype)</span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]]float64[[0 0 0 0] [0 0 0 0] [0 0 0 0]]int32</code></pre><h3 id="文本文件的读取"><a href="#文本文件的读取" class="headerlink" title="文本文件的读取"></a>文本文件的读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># loadtxt</span></span><br><span class="line">filename = <span class="string">'./presidential_polls.csv'</span></span><br><span class="line">data_array = np.loadtxt(filename,      <span class="comment"># 文件名</span></span><br><span class="line">                        delimiter=<span class="string">','</span>, <span class="comment"># 指定里面的元素分隔符</span></span><br><span class="line">                        dtype=str,     <span class="comment"># 指定数据类型</span></span><br><span class="line">                        usecols=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 指定读取的列索引号</span></span><br><span class="line"><span class="keyword">print</span> (data_array, data_array.shape)</span><br></pre></td></tr></table></figure><pre><code>[[&apos;cycle&apos; &apos;type&apos; &apos;matchup&apos;] [&apos;2016&apos; &apos;&quot;polls-plus&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;] [&apos;2016&apos; &apos;&quot;polls-plus&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;] ... [&apos;2016&apos; &apos;&quot;polls-only&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;] [&apos;2016&apos; &apos;&quot;polls-only&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;] [&apos;2016&apos; &apos;&quot;polls-only&quot;&apos; &apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;]] (10237, 3)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># loadtxt, 明确指定每列数据的类型</span></span><br><span class="line">filename = <span class="string">'./presidential_polls.csv'</span></span><br><span class="line">data_array = np.loadtxt(filename,      <span class="comment"># 文件名</span></span><br><span class="line">                        delimiter=<span class="string">','</span>, <span class="comment"># 分隔符</span></span><br><span class="line">                        skiprows=<span class="number">1</span>,</span><br><span class="line">                        dtype=&#123;<span class="string">'names'</span>:(<span class="string">'cycle'</span>, <span class="string">'type'</span>, <span class="string">'matchup'</span>),</span><br><span class="line">                               <span class="string">'formats'</span>:(<span class="string">'i4'</span>, <span class="string">'S15'</span>, <span class="string">'S50'</span>)&#125;,     <span class="comment"># 数据类型</span></span><br><span class="line">                        usecols=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 指定读取的列索引号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (data_array, data_array.shape) <span class="comment"># 读取的结果是一维的数组，每个元素是一个元组</span></span><br></pre></td></tr></table></figure><pre><code>[(2016, b&apos;&quot;polls-plus&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) (2016, b&apos;&quot;polls-plus&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) (2016, b&apos;&quot;polls-plus&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) ... (2016, b&apos;&quot;polls-only&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) (2016, b&apos;&quot;polls-only&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;) (2016, b&apos;&quot;polls-only&quot;&apos;, b&apos;&quot;Clinton vs. Trump vs. Johnson&quot;&apos;)] (10236,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、np的常用函数"><a href="#三、np的常用函数" class="headerlink" title="三、np的常用函数"></a>三、np的常用函数</h2><h3 id="转置transpose"><a href="#转置transpose" class="headerlink" title="转置transpose"></a>转置transpose</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = np.random.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"><span class="keyword">print</span> (arr.transpose())</span><br></pre></td></tr></table></figure><pre><code>[[0.78485041 0.88817969 0.34809014] [0.32744286 0.97539301 0.94401872]][[0.78485041 0.32744286] [0.88817969 0.97539301] [0.34809014 0.94401872]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#高维数组的转换(图像里面会用得到转换维度)</span></span><br><span class="line"><span class="comment">#不懂这里！！！</span></span><br><span class="line">arr3d = np.random.rand(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (arr3d)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'----------------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (arr3d.transpose((<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))) <span class="comment"># 多维数组的转置和定义不会</span></span><br></pre></td></tr></table></figure><pre><code>[[[0.28492549 0.60197236 0.45582367 0.21992479]  [0.1747163  0.69201365 0.85460359 0.65311699]  [0.62189644 0.25217555 0.16347156 0.29831219]] [[0.42826733 0.81396165 0.187138   0.560564  ]  [0.10162186 0.66419751 0.03261665 0.06969256]  [0.55461652 0.55020586 0.50693591 0.31741807]]]----------------------[[[0.28492549 0.60197236 0.45582367 0.21992479]  [0.42826733 0.81396165 0.187138   0.560564  ]] [[0.1747163  0.69201365 0.85460359 0.65311699]  [0.10162186 0.66419751 0.03261665 0.06969256]] [[0.62189644 0.25217555 0.16347156 0.29831219]  [0.55461652 0.55020586 0.50693591 0.31741807]]]</code></pre><h3 id="ceil和floor和rint和isnan"><a href="#ceil和floor和rint和isnan" class="headerlink" title="ceil和floor和rint和isnan"></a>ceil和floor和rint和isnan</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"><span class="keyword">print</span> (np.ceil(arr))</span><br><span class="line"><span class="comment">#向上最接近的整数</span></span><br><span class="line"><span class="keyword">print</span> (np.floor(arr))</span><br><span class="line"><span class="comment">#向下最接近的整数</span></span><br><span class="line"><span class="keyword">print</span> (np.rint(arr))</span><br><span class="line"><span class="comment">#四舍五入</span></span><br><span class="line"><span class="keyword">print</span> (np.isnan(arr))</span><br><span class="line"><span class="comment">#判断元素是否为NaN</span></span><br><span class="line"><span class="comment">#笔记上还有其他的函数</span></span><br></pre></td></tr></table></figure><pre><code>[[ 0.262106   -1.33680008 -1.08562543] [ 0.3990978   0.1410074   0.64278274]][[ 1. -1. -1.] [ 1.  1.  1.]][[ 0. -2. -2.] [ 0.  0.  0.]][[ 0. -1. -1.] [ 0.  0.  1.]][[False False False] [False False False]]</code></pre><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"></span><br><span class="line">np.where(arr &gt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">#（条件，满足输出，不满足输出）</span></span><br></pre></td></tr></table></figure><pre><code>[[ 2.04688394  0.48063737  1.20876913 -0.93412937] [-0.43427472 -1.47755481  0.36882256 -0.08943138] [-0.2847686   0.96915893  0.32641235  0.28346922]]array([[ 1,  1,  1, -1],       [-1, -1,  1, -1],       [-1,  1,  1,  1]])</code></pre><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (np.sum(arr))</span><br><span class="line"><span class="keyword">print</span> (np.sum(arr, axis=<span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (np.sum(arr, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>[[0 1] [2 3] [4 5] [6 7] [8 9]]45[20 25][ 1  5  9 13 17]</code></pre><h3 id="all和any"><a href="#all和any" class="headerlink" title="all和any"></a>all和any</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.random.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (np.any(arr &gt; <span class="number">0</span>))</span><br><span class="line"><span class="comment">#有一个就对</span></span><br><span class="line"><span class="keyword">print</span> (np.all(arr &gt; <span class="number">0</span>))</span><br><span class="line"><span class="comment">#全部对才对</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">·用处就是判断一组数据当中，是否===有点类似布尔类型的</span></span><br><span class="line"><span class="string">·这个也可以应用在pandas中的DataFrame中</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><pre><code>[[-1.020184   -0.48466272 -0.8496271 ] [ 0.88815825 -0.81911857  0.64570539]]TrueFalse&apos;\n·用处就是判断一组数据当中，是否===有点类似布尔类型的\n·这个也可以应用在pandas中的DataFrame中\n&apos;</code></pre><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"><span class="keyword">print</span> (np.unique(arr))</span><br></pre></td></tr></table></figure><pre><code>[[1 2 1] [2 3 4]][1 2 3 4]</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTEwMDgxODMyNTddfQ==-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-清洗和规整</title>
      <link href="/2020/02/10/DataAnalysis/Data-%E6%B8%85%E6%B4%97%E5%92%8C%E8%A7%84%E6%95%B4/"/>
      <url>/2020/02/10/DataAnalysis/Data-%E6%B8%85%E6%B4%97%E5%92%8C%E8%A7%84%E6%95%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、删除指定行列数据"><a href="#一、删除指定行列数据" class="headerlink" title="一、删除指定行列数据"></a>一、删除指定行列数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict_data = &#123;<span class="string">'A'</span>: <span class="number">1.</span>, </span><br><span class="line">             <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20161217'</span>),</span><br><span class="line">             <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">             <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">             <span class="string">'E'</span> : pd.Categorical([<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"C++"</span>,<span class="string">"C#"</span>]),</span><br><span class="line">             <span class="string">'F'</span> : <span class="string">'ChinaHadoop'</span> &#125;</span><br><span class="line">df_obj2 = pd.DataFrame(dict_data)</span><br><span class="line">print(df_obj2)</span><br></pre></td></tr></table></figure><pre><code>     A          B    C  D       E            F0  1.0 2016-12-17  1.0  3  Python  ChinaHadoop1  1.0 2016-12-17  1.0  3    Java  ChinaHadoop2  1.0 2016-12-17  1.0  3     C++  ChinaHadoop3  1.0 2016-12-17  1.0  3      C#  ChinaHadoop</code></pre><h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><blockquote><p>删除列</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df_obj2[<span class="string">'A'</span>] </span><br><span class="line"><span class="keyword">print</span> (df_obj2.head())</span><br></pre></td></tr></table></figure><pre><code>           B    C  D       E            F0 2016-12-17  1.0  3  Python  ChinaHadoop1 2016-12-17  1.0  3    Java  ChinaHadoop2 2016-12-17  1.0  3     C++  ChinaHadoop3 2016-12-17  1.0  3      C#  ChinaHadoop</code></pre><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><blockquote><p>删除行/列数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict_data = &#123;<span class="string">'A'</span>: <span class="number">1.</span>, </span><br><span class="line">             <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20161217'</span>),</span><br><span class="line">             <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">             <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">             <span class="string">'E'</span> : pd.Categorical([<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"C++"</span>,<span class="string">"C#"</span>]),</span><br><span class="line">             <span class="string">'F'</span> : <span class="string">'ChinaHadoop'</span> &#125;</span><br><span class="line">df_obj3 = pd.DataFrame(dict_data,index = [<span class="string">'sfd'</span>,<span class="string">'sdfd'</span>,<span class="string">'wer'</span>,<span class="string">'rwer'</span>])</span><br><span class="line"><span class="keyword">print</span> (df_obj3.head(<span class="number">7</span>))</span><br><span class="line">print(df_obj3.drop(<span class="string">'wer'</span>))<span class="comment">#删除行</span></span><br><span class="line">print(df_obj3.drop(<span class="string">'F'</span>,axis=<span class="number">1</span>))<span class="comment">#删除列</span></span><br></pre></td></tr></table></figure><pre><code>        A          B   C  D       E            Fsfd   1.0 2016-12-17 NaN  3  Python  ChinaHadoopsdfd  1.0 2016-12-17 NaN  3    Java  ChinaHadoopwer   1.0 2016-12-17 NaN  3     C++  ChinaHadooprwer  1.0 2016-12-17 NaN  3      C#  ChinaHadoop        A          B   C  D       E            Fsfd   1.0 2016-12-17 NaN  3  Python  ChinaHadoopsdfd  1.0 2016-12-17 NaN  3    Java  ChinaHadooprwer  1.0 2016-12-17 NaN  3      C#  ChinaHadoop        A          B   C  D       Esfd   1.0 2016-12-17 NaN  3  Pythonsdfd  1.0 2016-12-17 NaN  3    Javawer   1.0 2016-12-17 NaN  3     C++rwer  1.0 2016-12-17 NaN  3      C#</code></pre><h2 id="二、处理缺失数据"><a href="#二、处理缺失数据" class="headerlink" title="二、处理缺失数据"></a>二、处理缺失数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_data = pd.DataFrame([np.random.randn(<span class="number">3</span>), [<span class="number">1.</span>, np.nan, np.nan],</span><br><span class="line">                       [<span class="number">4.</span>, np.nan, np.nan], [<span class="number">1.</span>, np.nan, <span class="number">2.</span>]])</span><br><span class="line">df_data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>-0.702713</td>      <td>-0.991383</td>      <td>-1.058464</td>    </tr>    <tr>      <td>1</td>      <td>1.000000</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>2</td>      <td>4.000000</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>3</td>      <td>1.000000</td>      <td>NaN</td>      <td>2.000000</td>    </tr>  </tbody></table></div><h3 id="判断是否存在缺失值"><a href="#判断是否存在缺失值" class="headerlink" title="判断是否存在缺失值"></a>判断是否存在缺失值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data.isnull()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>False</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <td>1</td>      <td>False</td>      <td>True</td>      <td>True</td>    </tr>    <tr>      <td>2</td>      <td>False</td>      <td>True</td>      <td>True</td>    </tr>    <tr>      <td>3</td>      <td>False</td>      <td>True</td>      <td>False</td>    </tr>  </tbody></table></div><h3 id="丢弃缺失数据"><a href="#丢弃缺失数据" class="headerlink" title="丢弃缺失数据"></a>丢弃缺失数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(df_data.dropna(axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment">#0是行；1是列</span></span><br></pre></td></tr></table></figure><pre><code>          0         1         20 -0.702713 -0.991383 -1.058464</code></pre><h3 id="填充缺失数据"><a href="#填充缺失数据" class="headerlink" title="填充缺失数据"></a>填充缺失数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_data.fillna(<span class="number">-100.</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>-0.702713</td>      <td>-0.991383</td>      <td>-1.058464</td>    </tr>    <tr>      <td>1</td>      <td>1.000000</td>      <td>-100.000000</td>      <td>-100.000000</td>    </tr>    <tr>      <td>2</td>      <td>4.000000</td>      <td>-100.000000</td>      <td>-100.000000</td>    </tr>    <tr>      <td>3</td>      <td>1.000000</td>      <td>-100.000000</td>      <td>2.000000</td>    </tr>  </tbody></table></div><h2 id="三、数据规整-连接-含索引"><a href="#三、数据规整-连接-含索引" class="headerlink" title="三、数据规整-连接-含索引"></a>三、数据规整-连接-含索引</h2><ul><li>数据连接 merge</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                        <span class="string">'data1'</span> : [<span class="string">'sfd'</span>,<span class="string">'fdsf'</span>,<span class="string">'we'</span>,<span class="number">24</span>,<span class="number">3253</span>,<span class="number">234</span>,<span class="number">23</span>]&#125;)</span><br><span class="line">df_obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],</span><br><span class="line">                        <span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (df_obj1)</span><br><span class="line"><span class="keyword">print</span> (df_obj2)</span><br></pre></td></tr></table></figure><pre><code>  key data10   b   sfd1   b  fdsf2   a    we3   c    244   a  32535   a   2346   b    23  key  data20   a      01   b      62   d      6</code></pre><h3 id="merge和on"><a href="#merge和on" class="headerlink" title="merge和on"></a>merge和on</h3><blockquote><p>默认将重叠列的列名作为“外键”进行连接</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(df_obj1, df_obj2)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>sfd</td>      <td>6</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>fdsf</td>      <td>6</td>    </tr>    <tr>      <td>2</td>      <td>b</td>      <td>23</td>      <td>6</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>we</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>3253</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>234</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># on显示指定“外键”</span></span><br><span class="line">pd.merge(df_obj1, df_obj2, on=<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>sfd</td>      <td>6</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>fdsf</td>      <td>6</td>    </tr>    <tr>      <td>2</td>      <td>b</td>      <td>23</td>      <td>6</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>we</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>3253</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>234</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="left-on和right-on"><a href="#left-on和right-on" class="headerlink" title="left-on和right-on"></a>left-on和right-on</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># left_on，right_on分别指定左侧数据和右侧数据的“外键”</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改列名</span></span><br><span class="line">df_obj1 = df_obj1.rename(columns=&#123;<span class="string">'key'</span>:<span class="string">'key1'</span>&#125;)</span><br><span class="line">df_obj2 = df_obj2.rename(columns=&#123;<span class="string">'key'</span>:<span class="string">'key2'</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(df_obj1)</span><br><span class="line">print(df_obj2)</span><br></pre></td></tr></table></figure><pre><code>  key1 data10    b   sfd1    b  fdsf2    a    we3    c    244    a  32535    a   2346    b    23  key2  data20    a      01    b      62    d      6</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key1'</span>, right_on=<span class="string">'key2'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>data1</th>      <th>key2</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>sfd</td>      <td>b</td>      <td>6</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>fdsf</td>      <td>b</td>      <td>6</td>    </tr>    <tr>      <td>2</td>      <td>b</td>      <td>23</td>      <td>b</td>      <td>6</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>we</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>3253</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>234</td>      <td>a</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># “外连接”</span></span><br><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key1'</span>, right_on=<span class="string">'key2'</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>data1</th>      <th>key2</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>sfd</td>      <td>b</td>      <td>6.0</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>fdsf</td>      <td>b</td>      <td>6.0</td>    </tr>    <tr>      <td>2</td>      <td>b</td>      <td>23</td>      <td>b</td>      <td>6.0</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>we</td>      <td>a</td>      <td>0.0</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>3253</td>      <td>a</td>      <td>0.0</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>234</td>      <td>a</td>      <td>0.0</td>    </tr>    <tr>      <td>6</td>      <td>c</td>      <td>24</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>7</td>      <td>NaN</td>      <td>NaN</td>      <td>d</td>      <td>6.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左连接</span></span><br><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key1'</span>, right_on=<span class="string">'key2'</span>, how=<span class="string">'left'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>data1</th>      <th>key2</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>sfd</td>      <td>b</td>      <td>6.0</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>fdsf</td>      <td>b</td>      <td>6.0</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>we</td>      <td>a</td>      <td>0.0</td>    </tr>    <tr>      <td>3</td>      <td>c</td>      <td>24</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>3253</td>      <td>a</td>      <td>0.0</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>234</td>      <td>a</td>      <td>0.0</td>    </tr>    <tr>      <td>6</td>      <td>b</td>      <td>23</td>      <td>b</td>      <td>6.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 右连接</span></span><br><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key1'</span>, right_on=<span class="string">'key2'</span>, how=<span class="string">'right'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>data1</th>      <th>key2</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>sfd</td>      <td>b</td>      <td>6</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>fdsf</td>      <td>b</td>      <td>6</td>    </tr>    <tr>      <td>2</td>      <td>b</td>      <td>23</td>      <td>b</td>      <td>6</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>we</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>3253</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>234</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <td>6</td>      <td>NaN</td>      <td>NaN</td>      <td>d</td>      <td>6</td>    </tr>  </tbody></table></div><h3 id="处理重复列名suffixes"><a href="#处理重复列名suffixes" class="headerlink" title="处理重复列名suffixes"></a>处理重复列名suffixes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理重复列名</span></span><br><span class="line">df_obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                        <span class="string">'data'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">7</span>)&#125;)</span><br><span class="line">df_obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],</span><br><span class="line">                        <span class="string">'data'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;)</span><br><span class="line"></span><br><span class="line">pd.merge(df_obj1, df_obj2, on=<span class="string">'key'</span>, suffixes=(<span class="string">'_left'</span>, <span class="string">'_right'</span>))</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data_left</th>      <th>data_right</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>9</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>b</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>7</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>3</td>      <td>1</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>4</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按索引连接</span></span><br><span class="line">df_obj3 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                        <span class="string">'data1'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">7</span>)&#125;)</span><br><span class="line">df_obj4 = pd.DataFrame(&#123;<span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(df_obj3)</span><br><span class="line">print(df_obj4)</span><br></pre></td></tr></table></figure><pre><code>  key  data10   b      71   b      42   a      13   c      94   a      25   a      96   b      7   data2a      9b      4d      0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(df_obj3, df_obj4, left_on=<span class="string">'key'</span>, right_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>7</td>      <td>4</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>4</td>      <td>4</td>    </tr>    <tr>      <td>6</td>      <td>b</td>      <td>7</td>      <td>4</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>1</td>      <td>9</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>2</td>      <td>9</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>9</td>      <td>9</td>    </tr>  </tbody></table></div><h3 id="按索引连接right-index"><a href="#按索引连接right-index" class="headerlink" title="按索引连接right_index"></a>按索引连接right_index</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按索引连接</span></span><br><span class="line">df_obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                        <span class="string">'data1'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">7</span>)&#125;)</span><br><span class="line">df_obj2 = pd.DataFrame(&#123;<span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(df_obj1)</span><br><span class="line">print(df_obj2)</span><br></pre></td></tr></table></figure><pre><code>  key  data10   b      01   b      22   a      73   c      34   a      15   a      16   b      6   data2a      2b      1d      1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key'</span>, right_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>b</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>b</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <td>6</td>      <td>b</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>7</td>      <td>2</td>    </tr>    <tr>      <td>4</td>      <td>a</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <td>5</td>      <td>a</td>      <td>1</td>      <td>2</td>    </tr>  </tbody></table></div><h2 id="四、数据合并"><a href="#四、数据合并" class="headerlink" title="四、数据合并"></a>四、数据合并</h2><ul><li><p>数据合并 concat</p></li><li><p>按索引连接===right_index</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="numpy的concat"><a href="#numpy的concat" class="headerlink" title="numpy的concat"></a>numpy的concat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">arr2 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr1)</span><br><span class="line"><span class="keyword">print</span> (arr2)</span><br></pre></td></tr></table></figure><pre><code>[[6 0 3 2] [5 7 9 8] [5 8 0 3]][[6 5 7 9] [0 1 0 0] [1 1 1 7]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.concatenate([arr1, arr2])</span><br></pre></td></tr></table></figure><pre><code>array([[6, 0, 3, 2],       [5, 7, 9, 8],       [5, 8, 0, 3],       [6, 5, 7, 9],       [0, 1, 0, 0],       [1, 1, 1, 7]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.concatenate([arr1, arr2], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[6, 0, 3, 2, 6, 5, 7, 9],       [5, 7, 9, 8, 0, 1, 0, 0],       [5, 8, 0, 3, 1, 1, 1, 7]])</code></pre><h3 id="series上的concat"><a href="#series上的concat" class="headerlink" title="series上的concat"></a>series上的concat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index 没有重复的情况</span></span><br><span class="line">ser_obj1 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>), index=range(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line">ser_obj2 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>), index=range(<span class="number">5</span>,<span class="number">9</span>))</span><br><span class="line">ser_obj3 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>), index=range(<span class="number">9</span>,<span class="number">12</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([ser_obj1, ser_obj2, ser_obj3])</span><br></pre></td></tr></table></figure><pre><code>0     01     42     53     14     95     76     87     58     09     510    911    0dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([ser_obj1, ser_obj2, ser_obj3], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>1</td>      <td>4.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>2</td>      <td>5.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>3</td>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>4</td>      <td>9.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>5</td>      <td>NaN</td>      <td>7.0</td>      <td>NaN</td>    </tr>    <tr>      <td>6</td>      <td>NaN</td>      <td>8.0</td>      <td>NaN</td>    </tr>    <tr>      <td>7</td>      <td>NaN</td>      <td>5.0</td>      <td>NaN</td>    </tr>    <tr>      <td>8</td>      <td>NaN</td>      <td>0.0</td>      <td>NaN</td>    </tr>    <tr>      <td>9</td>      <td>NaN</td>      <td>NaN</td>      <td>5.0</td>    </tr>    <tr>      <td>10</td>      <td>NaN</td>      <td>NaN</td>      <td>9.0</td>    </tr>    <tr>      <td>11</td>      <td>NaN</td>      <td>NaN</td>      <td>0.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index 有重复的情况</span></span><br><span class="line">ser_obj1 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>), index=range(<span class="number">5</span>))</span><br><span class="line">ser_obj2 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>), index=range(<span class="number">4</span>))</span><br><span class="line">ser_obj3 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>), index=range(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (ser_obj1)</span><br><span class="line"><span class="keyword">print</span> (ser_obj2)</span><br><span class="line"><span class="keyword">print</span> (ser_obj3)</span><br></pre></td></tr></table></figure><pre><code>0    51    32    03    84    3dtype: int320    51    32    23    1dtype: int320    51    82    6dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([ser_obj1, ser_obj2, ser_obj3])</span><br></pre></td></tr></table></figure><pre><code>0    51    32    03    84    30    51    32    23    10    51    82    6dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([ser_obj1, ser_obj2, ser_obj3], axis=<span class="number">1</span>, join=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>5</td>      <td>5</td>      <td>5</td>    </tr>    <tr>      <td>1</td>      <td>3</td>      <td>3</td>      <td>8</td>    </tr>    <tr>      <td>2</td>      <td>0</td>      <td>2</td>      <td>6</td>    </tr>  </tbody></table></div><h3 id="dataframe上的concat"><a href="#dataframe上的concat" class="headerlink" title="dataframe上的concat"></a>dataframe上的concat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">2</span>)), index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">                       columns=[<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">df_obj2 = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">2</span>)), index=[<span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                       columns=[<span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line"><span class="keyword">print</span> (df_obj1)</span><br><span class="line"><span class="keyword">print</span> (df_obj2)</span><br></pre></td></tr></table></figure><pre><code>   A  Ba  4  3b  8  1c  6  3   C  Da  1  3b  8  2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([df_obj1, df_obj2])</span><br></pre></td></tr></table></figure><pre><code>C:\Users\wztli\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future versionof pandas will change to not sort by default.To accept the future behavior, pass &apos;sort=False&apos;.To retain the current behavior and silence the warning, pass &apos;sort=True&apos;.  &quot;&quot;&quot;Entry point for launching an IPython kernel.</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <td>a</td>      <td>4.0</td>      <td>3.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>b</td>      <td>8.0</td>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>c</td>      <td>6.0</td>      <td>3.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <td>a</td>      <td>NaN</td>      <td>NaN</td>      <td>1.0</td>      <td>3.0</td>    </tr>    <tr>      <td>b</td>      <td>NaN</td>      <td>NaN</td>      <td>8.0</td>      <td>2.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([df_obj1, df_obj2], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>C:\Users\wztli\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future versionof pandas will change to not sort by default.To accept the future behavior, pass &apos;sort=False&apos;.To retain the current behavior and silence the warning, pass &apos;sort=True&apos;.  &quot;&quot;&quot;Entry point for launching an IPython kernel.</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <td>a</td>      <td>4</td>      <td>3</td>      <td>1.0</td>      <td>3.0</td>    </tr>    <tr>      <td>b</td>      <td>8</td>      <td>1</td>      <td>8.0</td>      <td>2.0</td>    </tr>    <tr>      <td>c</td>      <td>6</td>      <td>3</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><h2 id="五、数据重构"><a href="#五、数据重构" class="headerlink" title="五、数据重构"></a>五、数据重构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_obj = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">10</span>, (<span class="number">5</span>,<span class="number">2</span>)), columns=[<span class="string">'data1'</span>, <span class="string">'data2'</span>])</span><br><span class="line">df_obj</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>4</td>    </tr>    <tr>      <td>1</td>      <td>6</td>      <td>2</td>    </tr>    <tr>      <td>2</td>      <td>9</td>      <td>8</td>    </tr>    <tr>      <td>3</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>3</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stacked = df_obj.stack()</span><br><span class="line"><span class="keyword">print</span> (stacked)</span><br></pre></td></tr></table></figure><pre><code>0  data1    0   data2    41  data1    6   data2    22  data1    9   data2    83  data1    7   data2    04  data1    3   data2    1dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (type(stacked))</span><br><span class="line"><span class="keyword">print</span> (type(stacked.index))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.series.Series&apos;&gt;&lt;class &apos;pandas.core.indexes.multi.MultiIndex&apos;&gt;</code></pre><h3 id="unstack"><a href="#unstack" class="headerlink" title="unstack"></a>unstack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认操作内层索引</span></span><br><span class="line">stacked.unstack()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>4</td>    </tr>    <tr>      <td>1</td>      <td>6</td>      <td>2</td>    </tr>    <tr>      <td>2</td>      <td>9</td>      <td>8</td>    </tr>    <tr>      <td>3</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>3</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过level指定操作索引的级别</span></span><br><span class="line">stacked.unstack(level=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>    </tr>  </thead>  <tbody>    <tr>      <td>data1</td>      <td>0</td>      <td>6</td>      <td>9</td>      <td>7</td>      <td>3</td>    </tr>    <tr>      <td>data2</td>      <td>4</td>      <td>2</td>      <td>8</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><h2 id="六、数据转换"><a href="#六、数据转换" class="headerlink" title="六、数据转换"></a>六、数据转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="重复数据duplicates函数"><a href="#重复数据duplicates函数" class="headerlink" title="重复数据duplicates函数"></a>重复数据duplicates函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_obj = pd.DataFrame(&#123;<span class="string">'data1'</span> : [<span class="string">'a'</span>] * <span class="number">4</span> + [<span class="string">'b'</span>] * <span class="number">4</span>,</span><br><span class="line">                       <span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>)&#125;)</span><br><span class="line">df_obj</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>a</td>      <td>3</td>    </tr>    <tr>      <td>1</td>      <td>a</td>      <td>2</td>    </tr>    <tr>      <td>2</td>      <td>a</td>      <td>2</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>b</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>b</td>      <td>2</td>    </tr>    <tr>      <td>6</td>      <td>b</td>      <td>2</td>    </tr>    <tr>      <td>7</td>      <td>b</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_obj.duplicated()</span><br></pre></td></tr></table></figure><pre><code>0    False1    False2     True3    False4    False5    False6     True7    Falsedtype: bool</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_obj.drop_duplicates()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>a</td>      <td>3</td>    </tr>    <tr>      <td>1</td>      <td>a</td>      <td>2</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>b</td>      <td>0</td>    </tr>    <tr>      <td>5</td>      <td>b</td>      <td>2</td>    </tr>    <tr>      <td>7</td>      <td>b</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_obj.drop_duplicates(<span class="string">'data2'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>a</td>      <td>3</td>    </tr>    <tr>      <td>1</td>      <td>a</td>      <td>2</td>    </tr>    <tr>      <td>3</td>      <td>a</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>b</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ser_obj = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">ser_obj</span><br></pre></td></tr></table></figure><pre><code>0    11    92    13    24    75    26    47    58    49    6dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ser_obj.map(<span class="keyword">lambda</span> x : x ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>0     11    812     13     44    495     46    167    258    169    36dtype: int64</code></pre><h3 id="数据替换repalce"><a href="#数据替换repalce" class="headerlink" title="数据替换repalce"></a>数据替换repalce</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换单个值</span></span><br><span class="line">ser_obj.replace(<span class="number">0</span>, <span class="number">-100</span>)</span><br></pre></td></tr></table></figure><pre><code>0    11    92    13    24    75    26    47    58    49    6dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换多个值</span></span><br><span class="line">ser_obj.replace([<span class="number">0</span>, <span class="number">2</span>], <span class="number">-100</span>)</span><br></pre></td></tr></table></figure><pre><code>0      11      92      13   -1004      75   -1006      47      58      49      6dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换多个值</span></span><br><span class="line">ser_obj.replace([<span class="number">0</span>, <span class="number">2</span>], [<span class="number">-100</span>, <span class="number">-200</span>])</span><br></pre></td></tr></table></figure><pre><code>0      11      92      13   -2004      75   -2006      47      58      49      6dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ser_obj.map(<span class="keyword">lambda</span> x : x ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 3. 数据替换repalce</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换单个值</span></span><br><span class="line">ser_obj.replace(<span class="number">0</span>, <span class="number">-100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换多个值</span></span><br><span class="line">ser_obj.replace([<span class="number">0</span>, <span class="number">2</span>], <span class="number">-100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换多个值</span></span><br><span class="line">ser_obj.replace([<span class="number">0</span>, <span class="number">2</span>], [<span class="number">-100</span>, <span class="number">-200</span>])</span><br></pre></td></tr></table></figure><pre><code>0      11      92      13   -2004      75   -2006      47      58      49      6dtype: int64</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMjE0MTg2OTkxMl19-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-描述数据</title>
      <link href="/2020/02/10/DataAnalysis/Data-%E6%8F%8F%E8%BF%B0%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/02/10/DataAnalysis/Data-%E6%8F%8F%E8%BF%B0%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据预览：tail（）；head（）"><a href="#一、数据预览：tail（）；head（）" class="headerlink" title="一、数据预览：tail（）；head（）"></a>一、数据预览：tail（）；head（）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df_obj = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">print(df_obj.tail())<span class="comment"># 数据预览尾巴</span></span><br><span class="line">print(df_obj.head())<span class="comment"># 数据预览头部</span></span><br></pre></td></tr></table></figure><pre><code>          a         b         c         d0 -0.507788  0.213237  0.003150 -0.7773121 -0.896653 -2.188016 -0.114848  0.1670572 -1.131242 -0.142287 -1.027330  1.8618143  0.369608  0.823453  1.030830 -0.0417784 -0.647625  0.056791 -0.394078 -1.347718          a         b         c         d0 -0.507788  0.213237  0.003150 -0.7773121 -0.896653 -2.188016 -0.114848  0.1670572 -1.131242 -0.142287 -1.027330  1.8618143  0.369608  0.823453  1.030830 -0.0417784 -0.647625  0.056791 -0.394078 -1.347718</code></pre><h2 id="二、数据描述：shape；info"><a href="#二、数据描述：shape；info" class="headerlink" title="二、数据描述：shape；info()"></a>二、数据描述：shape；info()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'数据集有%i行，%i列'</span> %(df_obj.shape[<span class="number">0</span>], df_obj.shape[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><pre><code>数据集有5行，4列</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df_obj.info())</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 5 entries, 0 to 4Data columns (total 4 columns):a    5 non-null float64b    5 non-null float64c    5 non-null float64d    5 non-null float64dtypes: float64(4)memory usage: 288.0 bytesNone</code></pre><h2 id="三、数据统计：describe"><a href="#三、数据统计：describe" class="headerlink" title="三、数据统计：describe()"></a>三、数据统计：describe()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df_obj.describe())</span><br></pre></td></tr></table></figure><pre><code>              a         b         c         dcount  5.000000  5.000000  5.000000  5.000000mean  -0.562740 -0.247365 -0.100455 -0.027587std    0.573191  1.143294  0.747673  1.215808min   -1.131242 -2.188016 -1.027330 -1.34771825%   -0.896653 -0.142287 -0.394078 -0.77731250%   -0.647625  0.056791 -0.114848 -0.04177875%   -0.507788  0.213237  0.003150  0.167057max    0.369608  0.823453  1.030830  1.861814</code></pre><h2 id="四、pandas不完全显示行列"><a href="#四、pandas不完全显示行列" class="headerlink" title="四、pandas不完全显示行列"></a>四、pandas不完全显示行列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pd.set_option(&#39;display.max_rows&#39;, 100)        &#x2F;&#x2F;显示的最大行数（避免只显示部分行数据）</span><br><span class="line">pd.set_option(&#39;display.max_columns&#39;, 1000)    &#x2F;&#x2F;显示的最大列数（避免列显示不全）</span><br><span class="line">pd.set_option(&quot;display.max_colwidth&quot;, 1000)   &#x2F;&#x2F;每一列最大的宽度（避免属性值或列名显示不全）</span><br><span class="line">pd.set_option(&#39;display.width&#39;, 1000)          &#x2F;&#x2F;每一行的宽度（避免换行）</span><br></pre></td></tr></table></figure><!--stackedit_data:eyJoaXN0b3J5IjpbMTI5ODE5MzI1M119-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-读取本地数据</title>
      <link href="/2020/02/10/DataAnalysis/Data-%E6%9C%AC%E5%9C%B0%E8%AF%BB%E5%8F%96/"/>
      <url>/2020/02/10/DataAnalysis/Data-%E6%9C%AC%E5%9C%B0%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、TXT文件操作"><a href="#一、TXT文件操作" class="headerlink" title="一、TXT文件操作"></a>一、TXT文件操作</h2><h3 id="读取全部内容"><a href="#读取全部内容" class="headerlink" title="读取全部内容"></a>读取全部内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/python_wiki.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename,<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取整个文件内容</span></span><br><span class="line">all_content = file_obj.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file_obj.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (all_content)</span><br></pre></td></tr></table></figure><pre><code>Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[24][25] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[26][27] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28]Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.[29]Python interpreters are available for many operating systems, allowing Python code to run on a wide variety of systems. CPython, the reference implementation of Python, is open source software[30] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation.</code></pre><h3 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/python_wiki.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐行读取</span></span><br><span class="line">line1 = file_obj.readline()</span><br><span class="line"><span class="keyword">print</span> (line1)</span><br></pre></td></tr></table></figure><pre><code>Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[24][25] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[26][27] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继续读下一行【不会全部读完】</span></span><br><span class="line">line2 = file_obj.readline()</span><br><span class="line"><span class="keyword">print</span> (line2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure><pre><code>Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.[29]</code></pre><h3 id="读取全部内容，返回列表"><a href="#读取全部内容，返回列表" class="headerlink" title="读取全部内容，返回列表"></a>读取全部内容，返回列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/python_wiki.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">lines = file_obj.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(lines):</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%i: %s'</span> %(i, line))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure><pre><code>0: Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[24][25] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[26][27] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28]1: Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.[29]2: Python interpreters are available for many operating systems, allowing Python code to run on a wide variety of systems. CPython, the reference implementation of Python, is open source software[30] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation.</code></pre><h3 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/test_write.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入全部内容</span></span><br><span class="line">file_obj.write(<span class="string">"《Python数据分析》"</span>)</span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/test_write.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入字符串列表</span></span><br><span class="line">lines = [<span class="string">'这是第%i行\n'</span> %n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">file_obj.writelines(lines)</span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure><h3 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/test_write.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(txt_filename, <span class="string">'r'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    <span class="keyword">print</span> (f_obj.read())</span><br></pre></td></tr></table></figure><pre><code>这是第0行这是第1行这是第2行这是第3行这是第4行这是第5行这是第6行这是第7行这是第8行这是第9行</code></pre><h2 id="二、CSV文件操作"><a href="#二、CSV文件操作" class="headerlink" title="二、CSV文件操作"></a>二、CSV文件操作</h2><h3 id="pandas读csv文件"><a href="#pandas读csv文件" class="headerlink" title="pandas读csv文件"></a>pandas读csv文件</h3><blockquote><p>根据路径导入数据以及指定的列</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">filename = <span class="string">'./files/presidential_polls.csv'</span></span><br><span class="line">df = pd.read_csv(filename, usecols=[<span class="string">'cycle'</span>, <span class="string">'type'</span>, <span class="string">'startdate'</span>])<span class="comment">#导入指定列</span></span><br><span class="line"><span class="keyword">print</span> (type(df))</span><br><span class="line"><span class="keyword">print</span> (df.head())</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;   cycle        type   startdate0   2016  polls-plus  10/25/20161   2016  polls-plus  10/27/20162   2016  polls-plus  10/27/20163   2016  polls-plus  10/20/20164   2016  polls-plus  10/20/2016</code></pre><blockquote><p>引用指定的列</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cycle_se = df[<span class="string">'cycle'</span>]</span><br><span class="line"><span class="keyword">print</span> (type(cycle_se))</span><br><span class="line"><span class="keyword">print</span> (cycle_se.head())</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.series.Series&apos;&gt;0    20161    20162    20163    20164    2016Name: cycle, dtype: int64</code></pre><blockquote><p>多层索引成dataframe类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'./files/presidential_polls.csv'</span></span><br><span class="line">df1 = pd.read_csv(filename,usecols=[<span class="string">'cycle'</span>, <span class="string">'type'</span>, <span class="string">'startdate'</span>,<span class="string">'state'</span>,<span class="string">'grade'</span>],index_col = [<span class="string">'state'</span>,<span class="string">'grade'</span>])</span><br><span class="line">print(df1.head())</span><br></pre></td></tr></table></figure><pre><code>                cycle        type   startdatestate    grade                               U.S.     B       2016  polls-plus  10/25/2016         A+      2016  polls-plus  10/27/2016Virginia A+      2016  polls-plus  10/27/2016Florida  A       2016  polls-plus  10/20/2016U.S.     B+      2016  polls-plus  10/20/2016</code></pre><blockquote><p>跳过指定的行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'./files/presidential_polls.csv'</span></span><br><span class="line">df2 = pd.read_csv(filename,usecols=[<span class="string">'cycle'</span>, <span class="string">'type'</span>, <span class="string">'startdate'</span>,<span class="string">'state'</span>,<span class="string">'grade'</span>],skiprows=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(df2.head())</span><br></pre></td></tr></table></figure><pre><code>   cycle        type         state   startdate grade0   2016  polls-plus       Florida  10/20/2016     A1   2016  polls-plus          U.S.  10/20/2016    B+2   2016  polls-plus          U.S.  10/22/2016     A3   2016  polls-plus          U.S.  10/26/2016    A-4   2016  polls-plus  Pennsylvania  10/25/2016    B-</code></pre><h3 id="pandas写csv文件"><a href="#pandas写csv文件" class="headerlink" title="pandas写csv文件"></a>pandas写csv文件</h3><blockquote><p>·to_csv里面的index参数作用？===可能是不要索引的意思。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'./files/pandas_output.csv'</span></span><br><span class="line">df.to_csv(filename, index=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2 id="三、JSON文件操作"><a href="#三、JSON文件操作" class="headerlink" title="三、JSON文件操作"></a>三、JSON文件操作</h2><h3 id="json读操作"><a href="#json读操作" class="headerlink" title="json读操作"></a>json读操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'./files/global_temperature.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json_data = json.load(f_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值是dict类型</span></span><br><span class="line"><span class="keyword">print</span> (type(json_data))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;dict&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (json_data.keys())</span><br></pre></td></tr></table></figure><pre><code>dict_keys([&apos;description&apos;, &apos;data&apos;])</code></pre><h3 id="json转CSV"><a href="#json转CSV" class="headerlink" title="json转CSV"></a>json转CSV</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#print json_data['data'].keys()</span></span><br><span class="line"><span class="keyword">print</span> (json_data[<span class="string">'data'</span>].values())</span><br></pre></td></tr></table></figure><pre><code>dict_values([&apos;-0.1247&apos;, &apos;-0.0707&apos;, &apos;-0.0710&apos;, &apos;-0.1481&apos;, &apos;-0.2099&apos;, &apos;-0.2220&apos;, &apos;-0.2101&apos;, &apos;-0.2559&apos;, &apos;-0.1541&apos;, &apos;-0.1032&apos;, &apos;-0.3233&apos;, &apos;-0.2552&apos;, &apos;-0.3079&apos;, &apos;-0.3221&apos;, &apos;-0.2828&apos;, &apos;-0.2279&apos;, &apos;-0.0971&apos;, &apos;-0.1232&apos;, &apos;-0.2578&apos;, &apos;-0.1172&apos;, &apos;-0.0704&apos;, &apos;-0.1471&apos;, &apos;-0.2535&apos;, &apos;-0.3442&apos;, &apos;-0.4240&apos;, &apos;-0.2967&apos;, &apos;-0.2208&apos;, &apos;-0.3767&apos;, &apos;-0.4441&apos;, &apos;-0.4332&apos;, &apos;-0.3862&apos;, &apos;-0.4367&apos;, &apos;-0.3318&apos;, &apos;-0.3205&apos;, &apos;-0.1444&apos;, &apos;-0.0747&apos;, &apos;-0.2979&apos;, &apos;-0.3193&apos;, &apos;-0.2118&apos;, &apos;-0.2082&apos;, &apos;-0.2152&apos;, &apos;-0.1517&apos;, &apos;-0.2318&apos;, &apos;-0.2161&apos;, &apos;-0.2510&apos;, &apos;-0.1464&apos;, &apos;-0.0618&apos;, &apos;-0.1506&apos;, &apos;-0.1749&apos;, &apos;-0.2982&apos;, &apos;-0.1016&apos;, &apos;-0.0714&apos;, &apos;-0.1214&apos;, &apos;-0.2481&apos;, &apos;-0.1075&apos;, &apos;-0.1445&apos;, &apos;-0.1173&apos;, &apos;-0.0204&apos;, &apos;-0.0318&apos;, &apos;-0.0157&apos;, &apos;0.0927&apos;, &apos;0.1974&apos;, &apos;0.1549&apos;, &apos;0.1598&apos;, &apos;0.2948&apos;, &apos;0.1754&apos;, &apos;-0.0013&apos;, &apos;-0.0455&apos;, &apos;-0.0471&apos;, &apos;-0.0550&apos;, &apos;-0.1579&apos;, &apos;-0.0095&apos;, &apos;0.0288&apos;, &apos;0.0997&apos;, &apos;-0.1118&apos;, &apos;-0.1305&apos;, &apos;-0.1945&apos;, &apos;0.0538&apos;, &apos;0.1145&apos;, &apos;0.0640&apos;, &apos;0.0252&apos;, &apos;0.0818&apos;, &apos;0.0924&apos;, &apos;0.1100&apos;, &apos;-0.1461&apos;, &apos;-0.0752&apos;, &apos;-0.0204&apos;, &apos;-0.0112&apos;, &apos;-0.0282&apos;, &apos;0.0937&apos;, &apos;0.0383&apos;, &apos;-0.0775&apos;, &apos;0.0280&apos;, &apos;0.1654&apos;, &apos;-0.0698&apos;, &apos;0.0060&apos;, &apos;-0.0769&apos;, &apos;0.1996&apos;, &apos;0.1139&apos;, &apos;0.2288&apos;, &apos;0.2651&apos;, &apos;0.3024&apos;, &apos;0.1836&apos;, &apos;0.3429&apos;, &apos;0.1510&apos;, &apos;0.1357&apos;, &apos;0.2308&apos;, &apos;0.3710&apos;, &apos;0.3770&apos;, &apos;0.2982&apos;, &apos;0.4350&apos;, &apos;0.4079&apos;, &apos;0.2583&apos;, &apos;0.2857&apos;, &apos;0.3420&apos;, &apos;0.4593&apos;, &apos;0.3225&apos;, &apos;0.5185&apos;, &apos;0.6335&apos;, &apos;0.4427&apos;, &apos;0.4255&apos;, &apos;0.5455&apos;, &apos;0.6018&apos;, &apos;0.6145&apos;, &apos;0.5806&apos;, &apos;0.6583&apos;, &apos;0.6139&apos;, &apos;0.6113&apos;, &apos;0.5415&apos;, &apos;0.6354&apos;, &apos;0.7008&apos;, &apos;0.5759&apos;, &apos;0.6219&apos;, &apos;0.6687&apos;, &apos;0.7402&apos;, &apos;0.8990&apos;])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换key</span></span><br><span class="line">year_str_lst = json_data[<span class="string">'data'</span>].keys()</span><br><span class="line">year_lst = [int(year_str) <span class="keyword">for</span> year_str <span class="keyword">in</span> year_str_lst]</span><br><span class="line"><span class="keyword">print</span> (year_lst)</span><br></pre></td></tr></table></figure><pre><code>[1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换value</span></span><br><span class="line">temp_str_lst = json_data[<span class="string">'data'</span>].values()</span><br><span class="line">temp_lst = [float(temp_str) <span class="keyword">for</span> temp_str <span class="keyword">in</span> temp_str_lst]</span><br><span class="line"><span class="keyword">print</span> (temp_lst)</span><br></pre></td></tr></table></figure><pre><code>[-0.1247, -0.0707, -0.071, -0.1481, -0.2099, -0.222, -0.2101, -0.2559, -0.1541, -0.1032, -0.3233, -0.2552, -0.3079, -0.3221, -0.2828, -0.2279, -0.0971, -0.1232, -0.2578, -0.1172, -0.0704, -0.1471, -0.2535, -0.3442, -0.424, -0.2967, -0.2208, -0.3767, -0.4441, -0.4332, -0.3862, -0.4367, -0.3318, -0.3205, -0.1444, -0.0747, -0.2979, -0.3193, -0.2118, -0.2082, -0.2152, -0.1517, -0.2318, -0.2161, -0.251, -0.1464, -0.0618, -0.1506, -0.1749, -0.2982, -0.1016, -0.0714, -0.1214, -0.2481, -0.1075, -0.1445, -0.1173, -0.0204, -0.0318, -0.0157, 0.0927, 0.1974, 0.1549, 0.1598, 0.2948, 0.1754, -0.0013, -0.0455, -0.0471, -0.055, -0.1579, -0.0095, 0.0288, 0.0997, -0.1118, -0.1305, -0.1945, 0.0538, 0.1145, 0.064, 0.0252, 0.0818, 0.0924, 0.11, -0.1461, -0.0752, -0.0204, -0.0112, -0.0282, 0.0937, 0.0383, -0.0775, 0.028, 0.1654, -0.0698, 0.006, -0.0769, 0.1996, 0.1139, 0.2288, 0.2651, 0.3024, 0.1836, 0.3429, 0.151, 0.1357, 0.2308, 0.371, 0.377, 0.2982, 0.435, 0.4079, 0.2583, 0.2857, 0.342, 0.4593, 0.3225, 0.5185, 0.6335, 0.4427, 0.4255, 0.5455, 0.6018, 0.6145, 0.5806, 0.6583, 0.6139, 0.6113, 0.5415, 0.6354, 0.7008, 0.5759, 0.6219, 0.6687, 0.7402, 0.899]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 dataframe</span></span><br><span class="line">year_se = pd.Series(year_lst, name = <span class="string">'year'</span>)</span><br><span class="line">temp_se = pd.Series(temp_lst, name = <span class="string">'temperature'</span>)</span><br><span class="line">result_df = pd.concat([year_se, temp_se], axis = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (result_df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存csv</span></span><br><span class="line">result_df.to_csv(<span class="string">'./files/json_to_csv.csv'</span>, index = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><pre><code>   year  temperature0  1880      -0.12471  1881      -0.07072  1882      -0.07103  1883      -0.14814  1884      -0.2099</code></pre><h3 id="写json操作"><a href="#写json操作" class="headerlink" title="写json操作"></a>写json操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">book_dict = [&#123;<span class="string">'书名'</span>:<span class="string">'无声告白'</span>, <span class="string">'作者'</span>:<span class="string">'伍绮诗'</span>&#125;, &#123;<span class="string">'书名'</span>:<span class="string">'我不是潘金莲'</span>, <span class="string">'作者'</span>:<span class="string">'刘震云'</span>&#125;, &#123;<span class="string">'书名'</span>:<span class="string">'沉默的大多数 (王小波集)'</span>, <span class="string">'作者'</span>:<span class="string">'王小波'</span>&#125;]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'./files/json_output.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    f_obj.write(json.dumps(book_dict, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 不需要加, encoding='utf-8'参数</span></span><br></pre></td></tr></table></figure><h2 id="四、SQLite基本操作"><a href="#四、SQLite基本操作" class="headerlink" title="四、SQLite基本操作"></a>四、SQLite基本操作</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">db_path = <span class="string">'./files/test.sqlite'</span></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(db_path)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">conn.text_factory = str  <span class="comment"># 处理中文</span></span><br></pre></td></tr></table></figure><h3 id="获取基本信息"><a href="#获取基本信息" class="headerlink" title="获取基本信息"></a>获取基本信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">'SELECT SQLITE_VERSION()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'SQLite版本：%s'</span> %str(cur.fetchone()[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><pre><code>SQLite版本：3.30.0</code></pre><h3 id="逐条插入数据"><a href="#逐条插入数据" class="headerlink" title="逐条插入数据"></a>逐条插入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">"DROP TABLE IF EXISTS book"</span>)</span><br><span class="line">cur.execute(<span class="string">"CREATE TABLE book(id INT, name TEXT, price DOUBLE)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(1,'肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷',14.40)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(2,'法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册) (两种封面随机发货)',100.00)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(3,'活着本来单纯:丰子恺散文漫画精品集(收藏本)',30.90)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(4,'自在独行:贾平凹的独行世界',26.80)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(5,'当你的才华还撑不起你的梦想时',23.00)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(6,'巨人的陨落(套装共3册)',84.90)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(7,'孤独深处(收录雨果奖获奖作品《北京折叠》)',21.90)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(8,'世界知名企业员工指定培训教材:所谓情商高,就是会说话',22.00)"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;sqlite3.Cursor at 0x2d2d64e7c00&gt;</code></pre><h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">books = (</span><br><span class="line">    (<span class="number">9</span>, <span class="string">'人间草木'</span>, <span class="number">30.00</span>),</span><br><span class="line">    (<span class="number">10</span>,<span class="string">'你的善良必须有点锋芒'</span>, <span class="number">20.50</span>),</span><br><span class="line">    (<span class="number">11</span>, <span class="string">'这么慢,那么美'</span>, <span class="number">24.80</span>),</span><br><span class="line">    (<span class="number">12</span>, <span class="string">'考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版)'</span>, <span class="number">23.90</span>)</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">"INSERT INTO book VALUES(?, ?, ?)"</span>, books)</span><br></pre></td></tr></table></figure><pre><code>&lt;sqlite3.Cursor at 0x2d2d64e7c00&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">'SELECT * FROM book'</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引号访问</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'序号: %i, 书名: %s, 价格: %.2f'</span> %(row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><pre><code>序号: 1, 书名: 肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷, 价格: 14.40序号: 2, 书名: 法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册) (两种封面随机发货), 价格: 100.00序号: 3, 书名: 活着本来单纯:丰子恺散文漫画精品集(收藏本), 价格: 30.90序号: 4, 书名: 自在独行:贾平凹的独行世界, 价格: 26.80序号: 5, 书名: 当你的才华还撑不起你的梦想时, 价格: 23.00序号: 6, 书名: 巨人的陨落(套装共3册), 价格: 84.90序号: 7, 书名: 孤独深处(收录雨果奖获奖作品《北京折叠》), 价格: 21.90序号: 8, 书名: 世界知名企业员工指定培训教材:所谓情商高,就是会说话, 价格: 22.00序号: 9, 书名: 人间草木, 价格: 30.00序号: 10, 书名: 你的善良必须有点锋芒, 价格: 20.50序号: 11, 书名: 这么慢,那么美, 价格: 24.80序号: 12, 书名: 考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版), 价格: 23.90</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conn.row_factory = sqlite3.Row</span><br><span class="line">cur = conn.cursor() </span><br><span class="line">cur.execute(<span class="string">'SELECT * FROM book'</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过列名访问</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'序号: %i, 书名: %s, 价格: %.2f'</span> %(row[<span class="string">'id'</span>], row[<span class="string">'name'</span>], row[<span class="string">'price'</span>]))</span><br></pre></td></tr></table></figure><pre><code>序号: 1, 书名: 肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷, 价格: 14.40序号: 2, 书名: 法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册) (两种封面随机发货), 价格: 100.00序号: 3, 书名: 活着本来单纯:丰子恺散文漫画精品集(收藏本), 价格: 30.90序号: 4, 书名: 自在独行:贾平凹的独行世界, 价格: 26.80序号: 5, 书名: 当你的才华还撑不起你的梦想时, 价格: 23.00序号: 6, 书名: 巨人的陨落(套装共3册), 价格: 84.90序号: 7, 书名: 孤独深处(收录雨果奖获奖作品《北京折叠》), 价格: 21.90序号: 8, 书名: 世界知名企业员工指定培训教材:所谓情商高,就是会说话, 价格: 22.00序号: 9, 书名: 人间草木, 价格: 30.00序号: 10, 书名: 你的善良必须有点锋芒, 价格: 20.50序号: 11, 书名: 这么慢,那么美, 价格: 24.80序号: 12, 书名: 考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版), 价格: 23.90</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="五、SQLite-json操作"><a href="#五、SQLite-json操作" class="headerlink" title="五、SQLite_json操作"></a>五、SQLite_json操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">db_path = <span class="string">'./files/test_join.sqlite'</span></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(db_path)</span><br><span class="line">cur = conn.cursor()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建 depaetment 表，并插入数据</span></span><br><span class="line">cur.execute(<span class="string">"DROP TABLE IF EXISTS department"</span>)</span><br><span class="line">cur.execute(<span class="string">"CREATE TABLE department(\</span></span><br><span class="line"><span class="string">                id INT PRIMARY KEY NOT NULL, \</span></span><br><span class="line"><span class="string">                dept CHAR(50) NOT NULL, \</span></span><br><span class="line"><span class="string">                emp_id INT NOT NULL)"</span>)</span><br><span class="line">depts = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'IT Builing'</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'Engineerin'</span>, <span class="number">2</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'Finance'</span>, <span class="number">7</span>)</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">"INSERT INTO department VALUES(?, ?, ?)"</span>, depts)</span><br></pre></td></tr></table></figure><pre><code>&lt;sqlite3.Cursor at 0x2d2d64f70a0&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="CROSS-JOIN-交叉连接"><a href="#CROSS-JOIN-交叉连接" class="headerlink" title="CROSS JOIN 交叉连接"></a>CROSS JOIN 交叉连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company CROSS JOIN department;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建 company 表，并插入数据</span></span><br><span class="line">cur.execute(<span class="string">"DROP TABLE IF EXISTS company"</span>)</span><br><span class="line">cur.execute(<span class="string">"CREATE TABLE company(\</span></span><br><span class="line"><span class="string">                    id INT PRIMARY KEY NOT NULL, \</span></span><br><span class="line"><span class="string">                    name CHAR(50) NOT NULL, \</span></span><br><span class="line"><span class="string">                    age INT NOT NULL, \</span></span><br><span class="line"><span class="string">                    address CHAR(50) NOT NULL,\</span></span><br><span class="line"><span class="string">                    salary DOUBLE NOT NULL)"</span>)</span><br><span class="line">companies = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'Paul'</span>, <span class="number">32</span>, <span class="string">'California'</span>, <span class="number">20000.0</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'Allen'</span>, <span class="number">25</span>, <span class="string">'Texas'</span>, <span class="number">15000.0</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'Teddy'</span>, <span class="number">23</span>, <span class="string">'Norway'</span>, <span class="number">20000.0</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">'Mark'</span>, <span class="number">25</span>, <span class="string">'Rich-Mond'</span>, <span class="number">65000.0</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">'David'</span>, <span class="number">27</span>, <span class="string">'Texas'</span>, <span class="number">85000.0</span>),</span><br><span class="line">        (<span class="number">6</span>, <span class="string">'Kim'</span>, <span class="number">22</span>, <span class="string">'South-Hall'</span>, <span class="number">45000.0</span>),</span><br><span class="line">        (<span class="number">7</span>, <span class="string">'James'</span>, <span class="number">24</span>, <span class="string">'Houston'</span>, <span class="number">10000.0</span>)</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">"INSERT INTO company VALUES (?, ?, ?, ?, ?)"</span>, companies)</span><br></pre></td></tr></table></figure><pre><code>&lt;sqlite3.Cursor at 0x2d2d64f70a0&gt;</code></pre><h3 id="INNER-JOIN-内连接"><a href="#INNER-JOIN-内连接" class="headerlink" title="INNER JOIN 内连接"></a>INNER JOIN 内连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company INNER JOIN department \</span></span><br><span class="line"><span class="string">            ON company.id = department.emp_id;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><pre><code>(1, &apos;Paul&apos;, &apos;IT Builing&apos;)(2, &apos;Allen&apos;, &apos;Engineerin&apos;)(7, &apos;James&apos;, &apos;Finance&apos;)</code></pre><h3 id="OUTER-JOIN-外连接"><a href="#OUTER-JOIN-外连接" class="headerlink" title="OUTER JOIN 外连接"></a>OUTER JOIN 外连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左连接</span></span><br><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company LEFT OUTER JOIN department \</span></span><br><span class="line"><span class="string">            ON company.id = department.emp_id;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><pre><code>(1, &apos;Paul&apos;, &apos;IT Builing&apos;)(2, &apos;Allen&apos;, &apos;Engineerin&apos;)(None, &apos;Teddy&apos;, None)(None, &apos;Mark&apos;, None)(None, &apos;David&apos;, None)(None, &apos;Kim&apos;, None)(7, &apos;James&apos;, &apos;Finance&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 右连接 （目前不支持）</span></span><br><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company RIGHT OUTER JOIN department \</span></span><br><span class="line"><span class="string">            ON company.id = department.emp_id;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------OperationalError                          Traceback (most recent call last)&lt;ipython-input-41-ce0fc573748b&gt; in &lt;module&gt;      1 # 右连接 （目前不支持）      2 cur.execute(&quot;SELECT emp_id, name, dept FROM company RIGHT OUTER JOIN department \----&gt; 3             ON company.id = department.emp_id;&quot;)      4 rows = cur.fetchall()      5 for row in rows:OperationalError: RIGHT and FULL OUTER JOINs are not currently supported</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 右连接，交换两张表</span></span><br><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM department LEFT OUTER JOIN company \</span></span><br><span class="line"><span class="string">            ON company.id = department.emp_id;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><pre><code>(1, &apos;Paul&apos;, &apos;IT Builing&apos;)(2, &apos;Allen&apos;, &apos;Engineerin&apos;)(7, &apos;James&apos;, &apos;Finance&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT</span><br><span class="line">      ON COMPANY.ID = DEPARTMENT.EMP_ID;</span><br></pre></td></tr></table></figure><pre><code>  File &quot;&lt;ipython-input-43-a0833b733075&gt;&quot;, line 1    sqlite&gt; SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT                        ^SyntaxError: invalid syntax</code></pre><h2 id="六、Excel文件操作"><a href="#六、Excel文件操作" class="headerlink" title="六、Excel文件操作"></a>六、Excel文件操作</h2><p>pandas.read_excel(io, sheet_name=0, header=0, names=None, index_col=None, usecols=None, squeeze=False, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, comment=None, skipfooter=0, convert_float=True, mangle_dupe_cols=True, **kwds)</p><p>df_fujian = pd.read_excel(“./datafiles/fujian.xlsx”,sheet_name=’日数据’)</p><!--stackedit_data:eyJoaXN0b3J5IjpbLTk4OTMzNTQyM119-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spider-爬虫python</title>
      <link href="/2020/02/08/Spider/Spider-%E7%88%AC%E8%99%ABpython/"/>
      <url>/2020/02/08/Spider/Spider-%E7%88%AC%E8%99%ABpython/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫基本架构"><a href="#爬虫基本架构" class="headerlink" title="爬虫基本架构"></a>爬虫基本架构</h1><h2 id="url管理模块"><a href="#url管理模块" class="headerlink" title="url管理模块"></a>url管理模块</h2><ul><li><p>就是管理自己爬取的的网页不要重复爬取，避免爬取进入死循环</p></li><li><p>使用python当中的set数据结构</p><h2 id="网页下载模块"><a href="#网页下载模块" class="headerlink" title="网页下载模块"></a>网页下载模块</h2></li><li><p>将对应的url模块下载到本地或者读入内存</p></li><li><p>实现方式：</p><ol><li>通过url下载<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen </span><br><span class="line">test_url &#x3D; &quot;https:&#x2F;&#x2F;wztlink1013.github.io&quot;</span><br><span class="line">response &#x3D; urlopen(test_url)</span><br><span class="line">print (response.getcode()) # 200 表示访问成功</span><br><span class="line">print (response.read())</span><br></pre></td></tr></table></figure></li><li>通过Request访问</li><li>通过cookie访问<h2 id="网页解析模块"><a href="#网页解析模块" class="headerlink" title="网页解析模块"></a>网页解析模块</h2></li></ol></li><li><p>从已经下载的网页中爬取数据</p></li><li><p>实现方式有：</p><ol><li>正则表达式</li><li>html.parser</li><li><strong>BeautifulSoup：结构化解析网页</strong></li><li>lxml</li><li>结构化解析</li><li>DOM（Document Object Model），树形结构，就是html的基本骨架</li></ol></li></ul><h1 id="BeautifulSoup解析网页"><a href="#BeautifulSoup解析网页" class="headerlink" title="BeautifulSoup解析网页"></a>BeautifulSoup解析网页</h1><h2 id="待会再总结"><a href="#待会再总结" class="headerlink" title="待会再总结"></a>待会再总结</h2><h1 id="爬虫项目"><a href="#爬虫项目" class="headerlink" title="爬虫项目"></a>爬虫项目</h1><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a><a href="https://github.com/wztlink1013/Python_Spider" target="_blank" rel="noopener">GitHub</a></h2><!--stackedit_data:eyJoaXN0b3J5IjpbMTg5MzM2ODddfQ==-->]]></content>
      
      
      <categories>
          
          <category> Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> beautifulsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-apply函数和入口函数</title>
      <link href="/2020/02/08/Language/Python-apply%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
      <url>/2020/02/08/Language/Python-apply%E5%87%BD%E6%95%B0%E5%92%8C%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="pandas之apply函数"><a href="#pandas之apply函数" class="headerlink" title="pandas之apply函数"></a>pandas之apply函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.apply(func, axis&#x3D;0, broadcast&#x3D;False, raw&#x3D;False, reduce&#x3D;None, args&#x3D;(), **kwds)</span><br></pre></td></tr></table></figure><p>第一个参数，这个参数是函数，相当于C/C++的函数指针。</p><p>这个函数需要自己实现，函数的传入参数根据axis来定，比如axis = 1，就会把一行数据作为Series的数据<br>结构传入给自己实现的函数中，我们在函数中实现对Series不同属性之间的计算，返回一个结果，则apply函数<br>会自动遍历每一行DataFrame的数据，最后将所有结果组合成一个Series数据结构并返回。</p><h2 id="if-name-‘main’"><a href="#if-name-‘main’" class="headerlink" title="if name == ‘main’"></a>if <strong>name</strong> == ‘main’</h2><p><a href="https://zhuanlan.zhihu.com/p/34112508" target="_blank" rel="noopener">参考：知乎用户</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataAnalysis-SOP</title>
      <link href="/2020/02/08/DataAnalysis/DataAnalysis-SOP/"/>
      <url>/2020/02/08/DataAnalysis/DataAnalysis-SOP/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于数据分析"><a href="#一、关于数据分析" class="headerlink" title="一、关于数据分析"></a>一、关于数据分析</h2><p>a. 互联网最热职位：研发工程师、产品经理、人力资源、市场营销、运营、数据分析（供不应求）<br>b. 数据分析的步骤：明确目的/思路、数据收集、数据处理、数据分析、数据展现<br>c. 数据分析工具对比</p><pre><code>i. Python||R||Matlab||Scala||Sas||Spssii. python做数据分析是因为库比较多</code></pre><p>d. 什么是数据分析？：数据分析是一个检查Inspecting、清理Cleansing、转换Tranforming、和建模数据Modeling的过程，其目标是发现有用的信息，提出结论和支持决策。统计、计算、可视化和数据挖掘是数据分析师工作描述的各个方面。数据分析师，一般执行相同的功能，在一定程度上具有相同的资格。然而，特定的企业或行业可以塑造工作职责、技能、资格以及就业和晋升前景。</p><pre><code>职位概述：数据分析师专业人员做什么？数据分析师获取、组装并帮助其他人解释和理解数据。要做到这一点，分析师必须培养分析、沟通、计算机、数学和统计方面等的技能。具体的经济部门可以指导分析人员使用的数据类型。例如，医疗数据分析师的工作描述需要处理不同的信息，如实验室数据、保险索赔、处方记录、办公室或医院访问。在市场营销中，他们处理的是处理客户偏好、销售和统计数据分析中重要部分的客户。数据分析师工作职责：使用统计公式计算和分析数据。验证数据的准确性、完整性和可靠性。使用记录、报告和调查等资源编译统计信息。将数据和其他信息输入计算机。在研究或调查中采访参与者，跟踪或记录他们的回答。收集或准备图表、图表、表格和其他对数据、调查和发现的描述。寻找和识别新的数据收集源和方法。获取客户数据收集需求数据分析师工作基本技能：分析能力。数据分析师的工作描述包括识别模式和基于数据呈现其他结论的能力。通过分析技能，数据分析师还可以确定数据、来源和物料的可靠性。计算机技能。数据分析人员依靠数据库、文字处理器和其他计算机应用程序来计算数据、概率和其他统计数据，并准备显示数据。事实上，软件应用程序包括结构化查询语言(SQL)和其他数据库用户查询产品，以及面向分析或科学方法的查询产品。数学能力。要分析和计算数据，分析人员必须具备数学技能，例如乘法、除法和使用其他数学操作。计算比率、分数、百分比和各种公式的能力可以帮助数据分析师准备有用的图表、报告和图表。沟通技巧。倾听和理解参与者的回答有助于确保可靠的调查和结果。沟通还包括清晰而直接地向主管、团队成员以及第三方用户展示结果、结论和其他信息。成为一名数据分析师在数据分析师的工作描述中包含了数学、统计学和计算机方面的背景知识，这取决于企业或行业，潜在的数据分析师包括与行业相关的课程和获得资格的工作经验。工作经验数据分析师可以从需要使用电子表格、数据库和其他计算机应用程序的工作中获得经验。对于某些公司，数据分析师职位描述要求应聘者具有SQL服务器和其他数据库系统的经验。那些有数据挖掘经验的人也可以提高就业前景。与教育和培训一样，企业可能更青睐具有特定行业经验的求职者。例如，财产保险公司的数据分析师可能曾为其他保险公司、抵押贷款公司、银行或保险机构工作。在学校环境中，申请人通常会带着以前的工作经历来学习或衡量学生的表现和教学方法。数据分析师的潜在短缺，就业机会比比皆是。随着公司寻求提高市场份额，寻找客户或控制成本，对数据分析师的需求应该会增加，特别是在营销，销售和医疗保健方面。总而言之，为了帮助组织实现这些目标和其他目标，数据分析师必须确保获取它们的数据和方法可靠且清晰地传达。</code></pre><h2 id="二、工作环境准备"><a href="#二、工作环境准备" class="headerlink" title="二、工作环境准备"></a>二、工作环境准备</h2><pre><code>a. python2和python3的差异、2.7和3版本的选用    &apos;&apos;&apos;bytes和str的相互应用&apos;&apos;&apos;    ch_str=&apos;python的新特性&apos;    #print(ch_str+&apos;\n&apos;)    #print(type(ch_str))    b_str=ch_str.encode(&apos;utf-8&apos;)#字符型转化为字节型    #print(b_str)    #print(type(b_str))    ch_str=b_str.decode(&apos;utf-8&apos;)#字节性转化字符型    print(ch_str)    print(type(ch_str))    【有什么作用呢？？】b. Six库c. 编码方式的差异：中文编码方式——UTF-8的选加d. python环境    i. Anaconda：有许多的第三方库        1) Jupyter notebook：想办法把本地的文件开源到GitHub上    ii. IDE：没有最好的，只有适合自己的；全都需要自己配置        1) Eclipse+Pydev完全免费        2) Pycharm部分免费        设置配置python解释器有问题！===配置路径被隐藏的问题        调试：断点调试/交互式调试====不是很会用！！！        3) spyder完全免费，适合熟悉matlab的开发者    iii. Ipython：简单验证思路===交互式命令的使用        § 在对像后面加一个&apos;?&apos;===显示对象的信息&apos;??&apos;===显示多个信息        Eg：fucktion_name??        ps：不要在后面加注释#否则会出错===我也不知道为啥        § 魔术命令的使用%time %timeit（一条语句） %%time %%timeit(多条语句)        Eg：%timeit output&gt;&gt;&gt;        26.9 ns ± 1.8 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)</code></pre><h2 id="三、建模四个基本模型"><a href="#三、建模四个基本模型" class="headerlink" title="三、建模四个基本模型"></a>三、建模四个基本模型</h2><h3 id="分类：离散预测值；预先定义的"><a href="#分类：离散预测值；预先定义的" class="headerlink" title="分类：离散预测值；预先定义的"></a>分类：离散预测值；预先定义的</h3><ul><li>朴素贝叶斯</li><li>人工神经网络<h3 id="回归：连续预测值"><a href="#回归：连续预测值" class="headerlink" title="回归：连续预测值"></a>回归：连续预测值</h3></li><li>Logistic回归<h3 id="聚类：预先没有被定义-未被标记的。"><a href="#聚类：预先没有被定义-未被标记的。" class="headerlink" title="聚类：预先没有被定义===未被标记的。"></a>聚类：预先没有被定义===未被标记的。</h3></li><li>K-Means聚类<h3 id="时序分析："><a href="#时序分析：" class="headerlink" title="时序分析："></a>时序分析：</h3></li><li>ARIMA时序</li></ul><h2 id="四、Code-SOP"><a href="#四、Code-SOP" class="headerlink" title="四、Code_SOP"></a>四、Code_SOP</h2><h3 id="载入常用包"><a href="#载入常用包" class="headerlink" title="载入常用包"></a>载入常用包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seaborn as sns</span><br><span class="line">from scipy import stats</span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[&#39;font.sans-serif&#39;]&#x3D;[&#39;SimHei&#39;]</span><br><span class="line">matplotlib.rcParams[&#39;axes.unicode_minus&#39;]&#x3D;False</span><br></pre></td></tr></table></figure><h3 id="获取并查看数据"><a href="#获取并查看数据" class="headerlink" title="获取并查看数据"></a>获取并查看数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data &#x3D; &#39;.&#x2F;data&#x2F;train.csv&#39;</span><br><span class="line">data_1 &#x3D; pd.read_csv(data)</span><br><span class="line"></span><br><span class="line">print (&#39;基本信息有：\n&#39;)</span><br><span class="line">print (data_1.info())</span><br><span class="line">print (&#39;数据集有%i行，%i列&#39; %(data_1.shape[0], data_1.shape[1]))</span><br><span class="line">print (&#39;数据预览:&#39;)</span><br><span class="line">print (data_1.head(10))</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="数据的清洗和规整"><a href="#数据的清洗和规整" class="headerlink" title="数据的清洗和规整"></a>数据的清洗和规整</h3><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3><!--stackedit_data:eyJoaXN0b3J5IjpbMzAxODM2Njk1XX0=-->]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-路径和nltk</title>
      <link href="/2020/02/07/Bug/python-%E8%B7%AF%E5%BE%84%E5%92%8Cnltk/"/>
      <url>/2020/02/07/Bug/python-%E8%B7%AF%E5%BE%84%E5%92%8Cnltk/</url>
      
        <content type="html"><![CDATA[<h2 id="一、路径相关"><a href="#一、路径相关" class="headerlink" title="一、路径相关"></a>一、路径相关</h2><h3 id="路径相关报错信息"><a href="#路径相关报错信息" class="headerlink" title="路径相关报错信息"></a>路径相关报错信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IOError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.read_csv() 报错 OSError: Initializing <span class="keyword">from</span> file failed</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(unicode error) <span class="string">'unicodeescape'</span> codec can<span class="string">'t decode bytes in position 2-3: truncated \UXXXXXXXX escape [duplicate]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">b'train.csv'</span> does <span class="keyword">not</span> exist even though file exist</span><br></pre></td></tr></table></figure><h3 id="分析与解决问题"><a href="#分析与解决问题" class="headerlink" title="分析与解决问题"></a>分析与解决问题</h3><p>编写python代码过程中，出现了类似这种一系列路径相关的错误，原因是，自己更改了<strong>相关文件夹/文件在电脑中的位置</strong>，解决办法就新建一个项目建一个全新路径或者修改现有路径</p><ul><li><code>\</code>绝对路径 会报错（转义字符）处理：①双引号前面加一个r②<code>\</code>换成<code>\\</code>（硬盘代号后面的第一个）</li><li><code>./</code>相对路径</li></ul><blockquote><p>三种解决方式</p><p><code>r&quot;C:\Users\YJG\Desktop\pi_digits.txt&quot;</code><br><code>&quot;C:\\Users\\YJG\\Desktop\\pi_digits.txt&quot;</code><br><code>&quot;C:/Users/YJG/Desktop/pi_digits.txt&quot;</code></p></blockquote><h3 id="PS：路径含中文"><a href="#PS：路径含中文" class="headerlink" title="PS：路径含中文"></a>PS：路径含中文</h3><p>假如路径、文件名都完整，还是报错的原因是这个参数中有中文，即使Python3已经支持中文，但是调用pandas的read_csv()方法时，默认使用C engine作为parser engine，而当文件名中含有中文的时候，用C engine在部分情况下就会出错。所以在调用read_csv()方法时指定engine为Python就可以解决问题。根治：将路径编程全英文，这是必要素养习惯！</p><p><code>da4=pd.read_csv(xxxxxxxxxx,engine=&#39;python&#39;)</code></p><h3 id="PS：utf-8"><a href="#PS：utf-8" class="headerlink" title="PS：utf-8"></a>PS：utf-8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError：: &#39;utf-8&#39; codec can&#39;t decode byte 0xc8 in position 0: invalid contin</span><br></pre></td></tr></table></figure><blockquote><p>解决办法：<code>data_1 = pd.read_csv(data1, encoding = &#39;gb2312&#39;)</code>或者gb2312换成gbk<br>参考：<a href="https://blog.csdn.net/qq_18888869/article/details/82625343" target="_blank" rel="noopener">https://blog.csdn.net/qq_18888869/article/details/82625343</a></p></blockquote><h2 id="二、nltk相关"><a href="#二、nltk相关" class="headerlink" title="二、nltk相关"></a>二、nltk相关</h2><h3 id="nltk下载报错信息"><a href="#nltk下载报错信息" class="headerlink" title="nltk下载报错信息"></a>nltk下载报错信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bug:[WinError 10054] 远程主机强迫关闭了一个现有的连接</span><br></pre></td></tr></table></figure><h3 id="分析与解决问题-1"><a href="#分析与解决问题-1" class="headerlink" title="分析与解决问题"></a>分析与解决问题</h3><p>原因：模型权重参数文件（.h5）较大，下载出现中断，下载失败</p><blockquote><ul><li>解决办法：手动下载模型，放到指定目录</li><li><code>C:\Users\XXX\AppData\Roaming</code></li></ul></blockquote><p><a href="https://pan.baidu.com/s/1oUsf-FgVAZnQAtZWRwiK4w" target="_blank" rel="noopener">下载地址</a>  （密码9sar）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/zln_whu/article/details/103448420" target="_blank" rel="noopener">CSDN-103448420</a></li><li><a href="https://www.jianshu.com/p/0e1d51a7549d" target="_blank" rel="noopener">nltk简书详细讲解</a></li></ul><!--stackedit_data:eyJoaXN0b3J5IjpbMjAyNDg0NDc4NF19-->]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门机器学习scikit-learn</title>
      <link href="/2020/02/05/MachingLearning/scikit-learn%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
      <url>/2020/02/05/MachingLearning/scikit-learn%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、机器学习的一些概念"><a href="#一、机器学习的一些概念" class="headerlink" title="一、机器学习的一些概念"></a>一、机器学习的一些概念</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>特征：一组数据所多个属性</li><li>标签：人为指定特征</li><li>监督学习：就像分类（离散化的标签），回归（连续性的标签）、【“有标准答案”】</li><li>无监督学习：就像聚类【“无标准答案”】</li><li><strong>数据</strong>：是机器学习的命脉<h3 id="基本框架图"><a href="#基本框架图" class="headerlink" title="基本框架图"></a>基本框架图</h3><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/machinglearning.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323161525.png" alt="知识图谱"><h2 id="二、机器学习的一些阶段-步骤"><a href="#二、机器学习的一些阶段-步骤" class="headerlink" title="二、机器学习的一些阶段/步骤"></a>二、机器学习的一些阶段/步骤</h2></li></ul><h3 id="sklearn相关提及"><a href="#sklearn相关提及" class="headerlink" title="sklearn相关提及"></a>sklearn相关提及</h3><p><a href="https://scikit-learn.org/stable/testimonials/testimonials.html" target="_blank" rel="noopener">官网scikit-learn</a></p><ol><li><p>包含聚类、分类、回归等算法</p><p>  eg：随机森林、k-means、SVM等</p></li><li><p>包含模型筛选、降维、预处理等算法</p></li><li><p>要特别注意安装该包使用要注意的细节，具体参考上一篇博客</p></li></ol><h3 id="sklearn处理机器学习的一般化sop"><a href="#sklearn处理机器学习的一般化sop" class="headerlink" title="sklearn处理机器学习的一般化sop"></a>sklearn处理机器学习的一般化sop</h3><ol><li><strong>准备数据集</strong><ul><li><a href="">数据分析</a>:（利用np.reshape()成二维(n_samples,n_features)）</li><li>划分数据集：train_test_split()</li><li>特征工程：特征的提取、特征的归一化nomalization</li></ul></li><li><strong>选择模型</strong><ul><li>根据不同场景选择合适的模型:<a href="https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html" target="_blank" rel="noopener">scikit-learn的模型选择路线图</a></li><li>分类、聚类、回归……</li></ul></li><li>在训练集上<strong>训练模型</strong>，并调整参数<ul><li>经验选定参数</li><li>交叉验证确定最优的参数cross validation</li></ul></li><li>在测试集上<strong>测试模型</strong><ul><li>predict预测、score真实值预测值评分、etc</li></ul></li><li><strong>保存模型</strong><ul><li><code>import pickle</code></li></ul></li></ol><h3 id="主成分分析：将特征降维"><a href="#主成分分析：将特征降维" class="headerlink" title="主成分分析：将特征降维"></a>主成分分析：将特征降维</h3><ul><li>统计学相关知识：方差（衡量在一个维度的偏差）、协方差（衡量一个维度是否对另一个维度有影响cov（x，y））</li><li>线代相关知识：特征值、特征向量、协方差向量</li><li>PCA</li></ul><p><a href="http://q5e49p23n.bkt.clouddn.com/scikit_pca.html" target="_blank" rel="noopener">相关代码html页面</a></p><h2 id="三、通过scikit-learn认识机器学习"><a href="#三、通过scikit-learn认识机器学习" class="headerlink" title="三、通过scikit-learn认识机器学习"></a>三、通过scikit-learn认识机器学习</h2><h3 id="加载示例数据集"><a href="#加载示例数据集" class="headerlink" title="加载示例数据集"></a>加载示例数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()<span class="comment">#用sklearn自身配带的数据</span></span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line"><span class="comment"># C:\Users\wztli\Anaconda3\pkgs\scikit-learn-0.21.3-py37h6288b17_0\Lib\site-packages\sklearn\datasets\data</span></span><br><span class="line"><span class="comment"># 数据集在电脑中的位置</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据集</span></span><br><span class="line"><span class="comment"># iris</span></span><br><span class="line">print(iris.data[:<span class="number">5</span>])</span><br><span class="line">print(iris.data.shape)</span><br><span class="line">print(iris.target_names)</span><br><span class="line">print(iris.target)</span><br></pre></td></tr></table></figure><pre><code>[[5.1 3.5 1.4 0.2] [4.9 3.  1.4 0.2] [4.7 3.2 1.3 0.2] [4.6 3.1 1.5 0.2] [5.  3.6 1.4 0.2]](150, 4)[&apos;setosa&apos; &apos;versicolor&apos; &apos;virginica&apos;][0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># digits</span></span><br><span class="line">print(digits.data)</span><br><span class="line">print(digits.data.shape)</span><br><span class="line">print(digits.target_names)</span><br><span class="line">print(digits.target)</span><br></pre></td></tr></table></figure><pre><code>[[ 0.  0.  5. ...  0.  0.  0.] [ 0.  0.  0. ... 10.  0.  0.] [ 0.  0.  0. ... 16.  9.  0.] ... [ 0.  0.  1. ...  6.  0.  0.] [ 0.  0.  2. ... 12.  0.  0.] [ 0.  0. 10. ... 12.  1.  0.]](1797, 64)[0 1 2 3 4 5 6 7 8 9][0 1 2 ... 8 9 8]</code></pre><h3 id="在训练集上训练模型"><a href="#在训练集上训练模型" class="headerlink" title="在训练集上训练模型"></a>在训练集上训练模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动划分训练集、测试集 </span></span><br><span class="line">n_test = <span class="number">100</span> <span class="comment"># 测试样本个数</span></span><br><span class="line">train_X = digits.data[:-n_test, :]</span><br><span class="line">train_y = digits.target[:-n_test]</span><br><span class="line"></span><br><span class="line">test_X = digits.data[-n_test:, :]</span><br><span class="line">y_true = digits.target[-n_test:]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择SVM模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line">svm_model = svm.SVC(gamma=<span class="number">0.001</span>, C=<span class="number">100.</span>)</span><br><span class="line"><span class="comment"># svm_model = svm.SVC(gamma=100., C=1.)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">svm_model.fit(train_X, train_y)</span><br><span class="line"><span class="comment">#训练要放入两个参数：样本的特征数据，样本的标签</span></span><br></pre></td></tr></table></figure><pre><code>SVC(C=100.0, cache_size=200, class_weight=None, coef0=0.0,    decision_function_shape=&apos;ovr&apos;, degree=3, gamma=0.001, kernel=&apos;rbf&apos;,    max_iter=-1, probability=False, random_state=None, shrinking=True,    tol=0.001, verbose=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择LR（逻辑回归）模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">lr_model = LogisticRegression()</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">lr_model.fit(train_X, train_y)</span><br></pre></td></tr></table></figure><pre><code>C:\Users\wztli\Anaconda3\lib\site-packages\sklearn\linear_model\logistic.py:432: FutureWarning: Default solver will be changed to &apos;lbfgs&apos; in 0.22. Specify a solver to silence this warning.  FutureWarning)C:\Users\wztli\Anaconda3\lib\site-packages\sklearn\linear_model\logistic.py:469: FutureWarning: Default multi_class will be changed to &apos;auto&apos; in 0.22. Specify the multi_class option to silence this warning.  &quot;this warning.&quot;, FutureWarning)LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,                   intercept_scaling=1, l1_ratio=None, max_iter=100,                   multi_class=&apos;warn&apos;, n_jobs=None, penalty=&apos;l2&apos;,                   random_state=None, solver=&apos;warn&apos;, tol=0.0001, verbose=0,                   warm_start=False)</code></pre><h3 id="在测试集上测试模型"><a href="#在测试集上测试模型" class="headerlink" title="在测试集上测试模型"></a>在测试集上测试模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_pred_svm = svm_model.predict(test_X)</span><br><span class="line">y_pred_lr = lr_model.predict(test_X)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看结果</span></span><br><span class="line"><span class="comment"># 评价指标</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment">#print '预测标签：', y_pred</span></span><br><span class="line"><span class="comment">#print '真实标签：', y_true</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'SVM结果：'</span>, accuracy_score(y_true, y_pred_svm))</span><br><span class="line">print(<span class="string">'LR结果：'</span>, accuracy_score(y_true, y_pred_lr))</span><br></pre></td></tr></table></figure><pre><code>SVM结果： 0.98LR结果： 0.94</code></pre><h3 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'svm_model.pkl'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(svm_model, f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载模型进行预测</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'svm_model.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    model = pickle.load(f)</span><br><span class="line"></span><br><span class="line">random_samples_index = np.random.randint(<span class="number">0</span>, <span class="number">1796</span>, <span class="number">5</span>)</span><br><span class="line">random_samples = digits.data[random_samples_index, :]</span><br><span class="line">random_targets = digits.target[random_samples_index]</span><br><span class="line"></span><br><span class="line">random_predict = model.predict(random_samples)</span><br><span class="line"></span><br><span class="line">print(random_predict)</span><br><span class="line">print(random_targets)</span><br></pre></td></tr></table></figure><pre><code>[2 2 1 3 8][2 2 1 3 8]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、scikit-learn入门"><a href="#四、scikit-learn入门" class="headerlink" title="四、scikit-learn入门"></a>四、scikit-learn入门</h2><h3 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">y = np.random.randint(<span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">y.sort()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'样本：'</span>)</span><br><span class="line">print(X)</span><br><span class="line">print(<span class="string">'标签：'</span>, y)</span><br></pre></td></tr></table></figure><pre><code>样本：[[43 43 18 78] [74 24 42 37] [36 69 84 47] [70 62 77 30] [87 38  3 96] [68 67 24  7] [66 36 72 72] [12 94 87 72] [66  5 92  6] [41 59 60 91]]标签： [0 0 0 2 2 2 2 3 3 3]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分割训练集、测试集</span></span><br><span class="line"><span class="comment"># random_state确保每次随机分割得到相同的结果</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>) </span><br><span class="line"></span><br><span class="line">print(<span class="string">'训练集：'</span>)</span><br><span class="line">print(X_train)</span><br><span class="line">print(y_train)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'测试集：'</span>)</span><br><span class="line">print(X_test)</span><br><span class="line">print(y_test)</span><br></pre></td></tr></table></figure><pre><code>训练集：[[63 56  7 42] [40 47 17 23] [41 31 26  8] [79 30 22 88] [54 85 48 54] [89 73 77 41]][0 1 1 0 1 1]测试集：[[ 3  0 42 86] [42 96 83 38] [33 45  8 37] [ 1 44 75  7]][1 1 0 0]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特征归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">x1 = np.random.randint(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">5</span>).reshape(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">x2 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>).reshape(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">x3 = np.random.randint(<span class="number">0</span>, <span class="number">100000</span>, <span class="number">5</span>).reshape(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">X = np.concatenate([x1, x2, x3], axis=<span class="number">1</span>)</span><br><span class="line">print(X)</span><br></pre></td></tr></table></figure><pre><code>[[  353     4 27241] [  999     4 34684] [  911     4 78606] [  310     6 44593] [  817     9  6356]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(preprocessing.scale(X))</span><br></pre></td></tr></table></figure><pre><code>[[-1.12443958 -0.71443451 -0.46550183] [ 1.11060033 -0.71443451 -0.15209341] [ 0.80613669 -0.71443451  1.69736578] [-1.27321159  0.30618622  0.26515287] [ 0.48091416  1.83711731 -1.34492342]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成分类数据进行验证scale的必要性</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_classification</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">X, y = make_classification(n_samples=<span class="number">300</span>, n_features=<span class="number">2</span>, n_redundant=<span class="number">0</span>, n_informative=<span class="number">2</span>, </span><br><span class="line">                           random_state=<span class="number">25</span>, n_clusters_per_class=<span class="number">1</span>, scale=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>], X[:,<span class="number">1</span>], c=y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/scikitsandian1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉以下这句表示不进行特征归一化     </span></span><br><span class="line">X = preprocessing.scale(X)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>) </span><br><span class="line">svm_classifier = svm.SVC()</span><br><span class="line">svm_classifier.fit(X_train, y_train)</span><br><span class="line">svm_classifier.score(X_test, y_test)</span><br></pre></td></tr></table></figure><pre><code>C:\Users\wztli\Anaconda3\lib\site-packages\sklearn\svm\base.py:193: FutureWarning: The default value of gamma will change from &apos;auto&apos; to &apos;scale&apos; in version 0.22 to account better for unscaled features. Set gamma explicitly to &apos;auto&apos; or &apos;scale&apos; to avoid this warning.  &quot;avoid this warning.&quot;, FutureWarning)0.25</code></pre><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回归模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">boston_data = datasets.load_boston()</span><br><span class="line">X = boston_data.data</span><br><span class="line">y = boston_data.target</span><br><span class="line"></span><br><span class="line">print(<span class="string">'样本：'</span>)</span><br><span class="line">print(X[:<span class="number">5</span>, :])</span><br><span class="line">print(<span class="string">'标签：'</span>)</span><br><span class="line">print(y[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><pre><code>样本：[[6.3200e-03 1.8000e+01 2.3100e+00 0.0000e+00 5.3800e-01 6.5750e+00  6.5200e+01 4.0900e+00 1.0000e+00 2.9600e+02 1.5300e+01 3.9690e+02  4.9800e+00] [2.7310e-02 0.0000e+00 7.0700e+00 0.0000e+00 4.6900e-01 6.4210e+00  7.8900e+01 4.9671e+00 2.0000e+00 2.4200e+02 1.7800e+01 3.9690e+02  9.1400e+00] [2.7290e-02 0.0000e+00 7.0700e+00 0.0000e+00 4.6900e-01 7.1850e+00  6.1100e+01 4.9671e+00 2.0000e+00 2.4200e+02 1.7800e+01 3.9283e+02  4.0300e+00] [3.2370e-02 0.0000e+00 2.1800e+00 0.0000e+00 4.5800e-01 6.9980e+00  4.5800e+01 6.0622e+00 3.0000e+00 2.2200e+02 1.8700e+01 3.9463e+02  2.9400e+00] [6.9050e-02 0.0000e+00 2.1800e+00 0.0000e+00 4.5800e-01 7.1470e+00  5.4200e+01 6.0622e+00 3.0000e+00 2.2200e+02 1.8700e+01 3.9690e+02  5.3300e+00]]标签：[24.  21.6 34.7 33.4 36.2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择线性回顾模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">lr_model = LinearRegression()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割训练集、测试集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">lr_model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><pre><code>LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回参数</span></span><br><span class="line">lr_model.get_params()</span><br></pre></td></tr></table></figure><pre><code>{&apos;copy_X&apos;: True, &apos;fit_intercept&apos;: True, &apos;n_jobs&apos;: None, &apos;normalize&apos;: False}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lr_model.score(X_train, y_train)</span><br></pre></td></tr></table></figure><pre><code>0.7598132492351114</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lr_model.score(X_test, y_test)</span><br></pre></td></tr></table></figure><pre><code>0.6693852753319398</code></pre><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">10</span>) </span><br><span class="line"></span><br><span class="line">k_range = range(<span class="number">1</span>, <span class="number">31</span>)</span><br><span class="line">cv_scores = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> k_range:</span><br><span class="line">    knn = KNeighborsClassifier(n)</span><br><span class="line">    scores = cross_val_score(knn, X_train, y_train, cv=<span class="number">10</span>, scoring=<span class="string">'accuracy'</span>) <span class="comment"># 分类问题使用</span></span><br><span class="line">    <span class="comment">#scores = cross_val_score(knn, X_train, y_train, cv=10, scoring='neg_mean_squared_error') # 回归问题使用</span></span><br><span class="line">    cv_scores.append(scores.mean())</span><br><span class="line">    </span><br><span class="line">plt.plot(k_range, cv_scores)</span><br><span class="line">plt.xlabel(<span class="string">'K'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/scikitsandian2.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择最优的K</span></span><br><span class="line">best_knn = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">best_knn.fit(X_train, y_train)</span><br><span class="line">print(best_knn.score(X_test, y_test))</span><br><span class="line">print(best_knn.predict(X_test))</span><br></pre></td></tr></table></figure><pre><code>0.96[1 2 0 1 0 1 2 1 0 1 1 2 1 0 0 2 1 0 0 0 2 2 2 0 1 0 1 1 1 2 1 1 2 2 2 0 2 2 2 2 0 0 1 0 1 0 1 2 2 2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>本文相关链接</strong></p><ul><li><a href="https://github.com/wztlink1013/scikit-learn" target="_blank" rel="noopener">scikit-learn中文文档github</a>文中链接为英文文档</li><li><a href="https://blog.csdn.net/Little_Fire/article/details/81062447" target="_blank" rel="noopener">解释iris数据集</a></li></ul></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> MachingLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sklearn </tag>
            
            <tag> scikit-learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode编写C/C++及其他使用</title>
      <link href="/2020/01/28/Environment/vscode/"/>
      <url>/2020/01/28/Environment/vscode/</url>
      
        <content type="html"><![CDATA[<h2 id="一、VScode常用插件"><a href="#一、VScode常用插件" class="headerlink" title="一、VScode常用插件"></a>一、VScode常用插件</h2><ul><li><input checked="" disabled="" type="checkbox"> Markdown Preview Github Styling</li><li><input checked="" disabled="" type="checkbox"> Markdown All in One</li><li><input disabled="" type="checkbox"> GBKtoUTF8</li><li><input disabled="" type="checkbox"> CodeRunner</li><li><input checked="" disabled="" type="checkbox"> Chinese (simplified)Language pack for Visual Code</li><li><input disabled="" type="checkbox"> C/C++</li><li><input disabled="" type="checkbox"> Bracket Pair Colorrizer 2 【优化大括号】</li><li><input disabled="" type="checkbox"> background 【添加背景图片】</li><li><input disabled="" type="checkbox"> AnsiComment</li><li><input checked="" disabled="" type="checkbox"> vscode-icons【美化图标】</li><li><input disabled="" type="checkbox"> Path Intellisense【补全】</li><li><input disabled="" type="checkbox"> GitLens 【显示当前行commit信息，管理git】</li><li><input disabled="" type="checkbox"> Git History 【查看commit信息】</li><li><input checked="" disabled="" type="checkbox"> Waka Time【记录软件编写各类语言时间分配】</li><li><input checked="" disabled="" type="checkbox"> Todo Tree【优化TODO：侧边栏】</li><li><input checked="" disabled="" type="checkbox"> Todo Highlight【优化TODO：高亮】</li></ul><h2 id="二、VScode编写C和C"><a href="#二、VScode编写C和C" class="headerlink" title="二、VScode编写C和C++"></a>二、VScode编写C和C++</h2><p><a href="https://www.zhihu.com/question/30315894" target="_blank" rel="noopener">https://www.zhihu.com/question/30315894</a></p><h2 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h2><p>vscode可以自定义markdown预览样式，css文件以外链的方式放上</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://segmentfault.com/a/1190000006697219" target="_blank" rel="noopener">vscode 插件推荐 - 献给所有前端工程师</a>](<a href="https://segmentfault.com/a/1190000006697219#item-1" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006697219#item-1</a>)</p></li><li><p><a href="https://www.zhihu.com/question/30315894" target="_blank" rel="noopener">C&amp;C++环境https://www.zhihu.com/question/30315894</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbNDM3NTU3ODUwXX0=</p></li><li><p>-&gt;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置java开发环境</title>
      <link href="/2020/01/27/Environment/java-jdk-jre/"/>
      <url>/2020/01/27/Environment/java-jdk-jre/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p><a href="https://www.oracle.com/cn/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/cn/java/technologies/javase-downloads.html</a></p><h2 id="二、环境变量配置"><a href="#二、环境变量配置" class="headerlink" title="二、环境变量配置"></a>二、环境变量配置</h2><p>在系统变量下</p><h3 id="CLASSPATH"><a href="#CLASSPATH" class="headerlink" title="CLASSPATH"></a>CLASSPATH</h3><blockquote><p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;%CATALINA_HOME%\common\lib\servlet-api.jar;</p></blockquote><p>其中<code>%CATALINA_HOME%\common\lib\servlet-api.jar;</code>为tomcat的加包配置</p><h3 id="JAVA-HOME"><a href="#JAVA-HOME" class="headerlink" title="JAVA_HOME"></a>JAVA_HOME</h3><blockquote><p>C:\Program Files\Java\jdk1.8.0_181</p></blockquote><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><blockquote><p>%JAVA_HOME%\bin</p><p>%JAVA_HOME%\jre\bin</p></blockquote><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>CMD下输入<code>java -version</code></p><!--stackedit_data:eyJoaXN0b3J5IjpbMTUxNTk5NjQ2NV19-->]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML-CSS-JavaScript综述</title>
      <link href="/2020/01/24/Language/HTML-CSS-JavaScript%E7%BB%BC%E8%BF%B0/"/>
      <url>/2020/01/24/Language/HTML-CSS-JavaScript%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、HTML技术"><a href="#一、HTML技术" class="headerlink" title="一、HTML技术"></a>一、HTML技术</h2><blockquote><p>单标记和双标记</p></blockquote><blockquote><p>熟悉一些常用标签的使用</p></blockquote><p>文本控制、文本标签、图像标签、表格标签、表单标签、列表标签、超链接标签、div</p><p><strong>学会查帮助文档</strong></p><h2 id="二、CSS技术"><a href="#二、CSS技术" class="headerlink" title="二、CSS技术"></a>二、CSS技术</h2><blockquote><p>目的：让网页内容和样似分离，便于网站代码后期维护<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200401155450.png" alt=""></p></blockquote><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><blockquote><p>行内式、内嵌式、链入式、导入式<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200401155518.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle31/20200401155742.png" alt=""></p></blockquote><h3 id="常用选择器及属性"><a href="#常用选择器及属性" class="headerlink" title="常用选择器及属性"></a>常用选择器及属性</h3><p>标记选择器、class选择器、id选择器、通配符选择器（优先级：id&gt;class&gt;标记&gt;通配）</p><blockquote><p>id属性值唯一，class属性值通用</p></blockquote><h2 id="三、JavaScript技术"><a href="#三、JavaScript技术" class="headerlink" title="三、JavaScript技术"></a>三、JavaScript技术</h2><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200401163915.png" alt=""></p><h3 id="JavaScript语法知识"><a href="#JavaScript语法知识" class="headerlink" title="JavaScript语法知识"></a>JavaScript语法知识</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200401165112.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm,Anaconda,JetBrains系列app相关总结</title>
      <link href="/2020/01/23/Environment/jetBrains-pycharm-anaconda%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/01/23/Environment/jetBrains-pycharm-anaconda%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Anaconda和Pycharm下载与配置"><a href="#一、Anaconda和Pycharm下载与配置" class="headerlink" title="一、Anaconda和Pycharm下载与配置"></a>一、Anaconda和Pycharm下载与配置</h2><h3 id="下载Anaconda且配置"><a href="#下载Anaconda且配置" class="headerlink" title="下载Anaconda且配置"></a>下载Anaconda且配置</h3><ul><li>（更新）下载了anaconda就不要单独下载python，之前下的也删掉，以此避免路径冲突</li><li>方式一：<strong>迅雷下载</strong>（推荐）；方式二：提取链接<strong>网盘下载</strong>；方式三：清华镜像下载，下载完安装【直接next即可】</li><li><strong>测试</strong>：<code>win + R</code> 进入终端输入<code>conda</code>出现conda命令使用指南，即证明成功安装</li><li><strong>配置环境变量</strong>：在<strong>系统变量</strong>path路径中加入下面配置（具体路径具体填写）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://res.cloudinary.com/shandong-nomal-university/image/upload/v1579771440/%E6%89%B9%E6%B3%A8_2020-01-23_172305_bgfs7g.png" alt="" title="环境变量"></p><h3 id="下载Pycharm且配置"><a href="#下载Pycharm且配置" class="headerlink" title="下载Pycharm且配置"></a>下载Pycharm且配置</h3><ul><li><p><strong>下载版本</strong><a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">社区/专业</a>：专业版本需要激活码，社区版本功能基本能应付日常使用  <del>（大学学生时期可以用学生邮箱申请使用JetBrains系列软件）</del> </p><ul><li><strong>❗补充：取消上面用学生邮箱去申请JetBrains系列软件使用方法。先去GitHub申请学生包，然后通过GitHub已认证的GitHub账号再去申请JetBrains系列软件较为方便 <a href="https://www.jetbrains.com/zh-cn/community/education/?_ga=2.186354217.1063699871.1594345232-1379189663.1590592761#students" target="_blank" rel="noopener">JetBrains申请链接🔗</a></strong></li></ul></li><li><p>Pycharm使用Anaconda的配置 （ <strong>❗补充：下面貌似是社区版本的添加方式，但是专业版本会自动识别</strong> ）：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/pycharm1.png" alt="" title="环境配置"></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/Snipaste_2020-03-20_16-2254-23.png" alt=""></p><h2 id="二、Anaconda环境管理"><a href="#二、Anaconda环境管理" class="headerlink" title="二、Anaconda环境管理"></a>二、Anaconda环境管理</h2><h3 id="pip-conda-Miniconda-Anaconda"><a href="#pip-conda-Miniconda-Anaconda" class="headerlink" title="pip,conda,Miniconda,Anaconda"></a>pip,conda,Miniconda,Anaconda</h3><blockquote><ul><li>pip包管理工具，python官方认证</li><li>conda是一种通用包管理系统，旨在构建和管理任何语言和任何类型的软件。包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。</li><li>Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，就是把很多常用的不常用的库都给你装好了。同时利用配置/工具/命令conda来进行package和<strong>environment</strong>的管理。</li><li>Miniconda，它只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。就只包含最基本的东西，其他的库得自己装。</li></ul></blockquote><h3 id="Python相关包路径的查看"><a href="#Python相关包路径的查看" class="headerlink" title="Python相关包路径的查看"></a>Python相关包路径的查看</h3><ul><li><code>win+R</code>  输入<code>cmd</code>  输入<code>python</code> 输入<code>import sys</code> 输入<code>sys.path</code></li><li>标准库：anaconda文件夹下的lib文件夹</li><li>第三方库：下述代码中的文件夹<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\wztli\Anaconda3\Lib\site-packages</span><br></pre></td></tr></table></figure><h3 id="Sklearn包安装失败总结"><a href="#Sklearn包安装失败总结" class="headerlink" title="Sklearn包安装失败总结"></a>Sklearn包安装失败总结</h3>安装scikit-learn包，导入sklearn的Bug</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: DLL load failed: 找不到指定的模块</span><br></pre></td></tr></table></figure><p><code>scikit-learn</code>的下载会对numpy、scipy、joblib三个库相应版本有所要求，总之如果用anaconda的话，全部更新为最新即可（<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">参考whl版本</a>）</p><blockquote><ul><li><code>C:\Users\wztli\Anaconda3\pkgs\scikit-learn-0.21.3-py37h6288b17_0\Lib\site-packages\sklearn\datasets\data</code></li><li>数据集在电脑中的位置</li></ul></blockquote><h3 id="Scrapy包安装失败总结"><a href="#Scrapy包安装失败总结" class="headerlink" title="Scrapy包安装失败总结"></a>Scrapy包安装失败总结</h3><ul><li>pip 下载可能会失败</li><li>使用conda（镜像）下载<code>conda install -c scrapinghub scrapy</code></li></ul><h3 id="Loading"><a href="#Loading" class="headerlink" title="Loading"></a>Loading</h3><p>pip下载/管理经常bug，用conda结合anaconda/miniconda方便使用</p><h2 id="三、JetBrains系列软件的高效使用"><a href="#三、JetBrains系列软件的高效使用" class="headerlink" title="三、JetBrains系列软件的高效使用"></a>三、JetBrains系列软件的高效使用</h2><h3 id="JetBrains之初始配置"><a href="#JetBrains之初始配置" class="headerlink" title="JetBrains之初始配置"></a>JetBrains之初始配置</h3><blockquote><p>界面字体大小、代码字体大小、主题默认（dark）、背景图片（看心情）</p></blockquote><ul><li>字体相关<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/20200303113206.png" alt=""></li><li>主题相关<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/20200303113319.png" alt=""></li></ul><h3 id="JetBrains之Debug断点调试"><a href="#JetBrains之Debug断点调试" class="headerlink" title="JetBrains之Debug断点调试"></a>JetBrains之Debug断点调试</h3><p>断点调试是优于打印输出的一种调试程序的一种手段</p><fancybox><img src='https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/pycharmdebug.png'></fancybox><blockquote><ul><li>Ctrl+F5（左上角）：（return “project”）重新debug该文件</li><li>F9：（resume program）一个断点接着一个断点走，不按行走（eg：有循环会随着i一步一步走完）</li><li>F8：（step over） 一行一行走代码</li><li>F7：（step into） 进入函数内部</li><li>Alt+shift+F7：（step into mycode）遇到自己函数  进去 </li><li>shift+F8：（step out）跳出，进入函数后，跳出来</li><li>Alt+F10：（show execution point）指针显示当前断点旁边</li><li><strong>Show Python Prompt</strong>按键<br>交互式调试命令</li></ul></blockquote><h3 id="JetBrains之结合GitHub使用"><a href="#JetBrains之结合GitHub使用" class="headerlink" title="JetBrains之结合GitHub使用"></a>JetBrains之结合GitHub使用</h3><ol><li>配置Git和GitHub（先连接本地git，然后登录GitHub）<br>页面  依次点击<code>File</code> <code>Setting</code> <code>Version Control</code> <code>GitHub</code>然后登录账户进行配置</li><li>将项目新建在GitHub<br>菜单栏 依次点击 <code>VCS</code> <code>Import into Version Control</code> <code>Share Project on GitHub</code></li><li>讲项目克隆在本地 <code>VCS</code> <code>Get from Version Control</code></li></ol><p>……</p><h3 id="IDEA之破解以及初始用"><a href="#IDEA之破解以及初始用" class="headerlink" title="IDEA之破解以及初始用"></a>IDEA之破解以及初始用</h3><p>在编译器选择方面，Eclipse和IDEA，还是选择后者····</p><p><a href="https://shimo.im/docs/9pJJRJPr6thtPxJd/read" target="_blank" rel="noopener">https://shimo.im/docs/9pJJRJPr6thtPxJd/read</a></p><p><a href="https://segmentfault.com/a/1190000021220727" target="_blank" rel="noopener">https://segmentfault.com/a/1190000021220727</a></p><ul><li>初次运行IDEA编写helloworld程序<ul><li><code>新建一个项目</code> <code>选择SDK</code> <code>是否需要加入模板（一般不要）</code> <code>更改路径和命名</code></li><li><code>在scr目录下新建java类正式编写（注意对类命名要有意义）</code></li></ul></li></ul><h3 id="JetBrains之TODO的使用"><a href="#JetBrains之TODO的使用" class="headerlink" title="JetBrains之TODO的使用"></a>JetBrains之TODO的使用</h3><p>便于编写大型代码，将注释加上前缀以便分类处理，以下图片展示<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200710105013.png" alt=""></p><p>参考：</p><ul><li><a href="https://www.jetbrains.com/help/pycharm/using-todo.html" target="_blank" rel="noopener">TODO的使用官方文档</a></li><li><a href="https://blog.csdn.net/weixin_34277853/article/details/94205060?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5" target="_blank" rel="noopener">TODO的用法</a><h3 id="JetBrains之插件枚举"><a href="#JetBrains之插件枚举" class="headerlink" title="JetBrains之插件枚举"></a>JetBrains之插件枚举</h3></li><li>Waka Time：持续记录自己的IDE以及编程语言的使用时长</li></ul><h3 id="JetBrains之初用警告"><a href="#JetBrains之初用警告" class="headerlink" title="JetBrains之初用警告"></a>JetBrains之初用警告</h3><p>一般下载完开始使用，IDE会报一个 <code>Windows安全中心</code> 的警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Windows Defender might be impacting your build performance. PyCharm checked the following directorie</span><br></pre></td></tr></table></figure><p>解决：<img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200710105924.png" alt=""><br>然后再进入排除项添加报错的文件夹即可</p><!--stackedit_data:eyJoaXN0b3J5IjpbLTk5ODI3NTI4OCw3MTk4NzA1MV19-->]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter环境的扩展</title>
      <link href="/2020/01/22/Environment/jupyter/"/>
      <url>/2020/01/22/Environment/jupyter/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Jupyter环境的搭建"><a href="#一、Jupyter环境的搭建" class="headerlink" title="一、Jupyter环境的搭建"></a>一、Jupyter环境的搭建</h2><ol><li>pip下载</li><li>跟随anaconda下载</li></ol><h2 id="二、高效使用，安装扩展插件"><a href="#二、高效使用，安装扩展插件" class="headerlink" title="二、高效使用，安装扩展插件"></a>二、高效使用，安装扩展插件</h2><p>一般只需要下面两条命令，就可以重新打开就可看见新安装的插件环境。</p><p><code>pip install jupyter_contrib_nbextensions</code></p><p>或者</p><p><code>jupyter contrib nbextension install</code></p><p>但是pip下载完，会出现jupyter_contrib_nbextension扩展功能后不显示Nbextensions标签的bug，在此记录下解决的方式。</p><h2 id="三、扩展插件不显示的解决方法"><a href="#三、扩展插件不显示的解决方法" class="headerlink" title="三、扩展插件不显示的解决方法"></a>三、扩展插件不显示的解决方法</h2><ol><li><p>如果之前已经用上述两条命令之一安装了上述包，且用pip list查看的确成功安装，则依次进行下面删除命令（选y）:</p><p> <code>pip uninstall jupyter_contrib_nbextensions</code></p><p> <code>pip uninstall jupyter_nbextensions_configurator</code></p></li><li><p>打开Anaconda Prompt窗口，执行第一个命令，用于安装nbextensions:</p><p> <code>pip install jupyter_contrib_nbextensions</code></p></li><li><p>再执行第下面命令，用于安装 javascript and css files:</p><p> <code>jupyter contrib nbextension install --user</code></p></li><li><p>最后执行，用于安装configurator:</p><p> <code>pip install jupyter_nbextensions_configurator</code></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>安装的扩展插件参考以下网站：</p><ul><li><a href="https://www.jiqizhixin.com/articles/2018-12-20-12" target="_blank" rel="noopener">五个常用插件 - 简书</a></li><li><a href="https://www.zhihu.com/question/59392251/answer/560977151" target="_blank" rel="noopener">如何优雅地使用 Jupyter？ - 量子位的回答 - 知乎</a></li><li><a href="https://blog.csdn.net/xiaodongxiexie/article/details/54633183" target="_blank" rel="noopener">jupyter使用技巧</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbLTY1ODI1MDI3Nl19</li><li>-&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装系统</title>
      <link href="/2020/01/18/Environment/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/01/18/Environment/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于重装"><a href="#一、关于重装" class="headerlink" title="一、关于重装"></a>一、关于重装</h2><h3 id="重装缘由"><a href="#重装缘由" class="headerlink" title="重装缘由"></a>重装缘由</h3><p>总结几次重装的步骤，为了今后更快地重装。</p><h3 id="重装好处"><a href="#重装好处" class="headerlink" title="重装好处"></a>重装好处</h3><p>电脑重装系统能解决大多数问题（对鄙人能解决100%问题//手动滑稽），在此总结一下自己重装系统过程步骤以及遇到的问题</p><h2 id="二、重装系统SOP"><a href="#二、重装系统SOP" class="headerlink" title="二、重装系统SOP"></a>二、重装系统SOP</h2><h3 id="1-制作启动盘"><a href="#1-制作启动盘" class="headerlink" title="1. 制作启动盘"></a>1. 制作启动盘</h3><ul><li><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">法一：MSDN下载</a><br>①迅雷下载  ②网盘下载</li></ul><p>下载完镜像之后，再用 <del>ULtralSO/</del> rufus软件刻录在U盘（大于4G的U盘）</p><ul><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10" target="_blank" rel="noopener">法二：微软官方下载</a><br>网速不能太慢，WiFi较快的可以用这个，不过下载的电脑原装版本，不追求专业版本的Windows，最好还是下这个吧</li></ul><blockquote><p>坑1：如果下载的镜像大于4G左右，ULtralSO不能刻录。但是在学校重装为啥就可以，是u盘问题嘛，醉了。</p><p>亮2：官方下载，可以匹配自己电脑本来的版本；可以直接刻录在U盘，唯一不足应该就是网速问题。</p><p>坑3：U盘如果“身患重伤”，下个相关优化U盘软件处理一下</p></blockquote><ul><li><p>（更新）<a href="http://www.kqidong.com/index.html" target="_blank" rel="noopener">法三：快启动</a>先用法一下好镜像。</p><h3 id="2-正式重装"><a href="#2-正式重装" class="headerlink" title="2. 正式重装"></a>2. 正式重装</h3></li><li><p>进入bios界面</p><p>开机刚要出现<code>HP</code>字样，一直点 <em>esc</em> 键，然后再设置开机进入启动盘</p></li><li><p>Next Wait即可</p><p> 格式化C盘→安装→等候→登录微软账号…</p><h3 id="3-磁盘管理"><a href="#3-磁盘管理" class="headerlink" title="3. 磁盘管理"></a>3. 磁盘管理</h3></li><li><p><strong>磁盘管理器</strong>：根据需求将磁盘分区</p></li><li><p>问题1：给C盘扩展时不能扩展？磁盘只有相邻卷才能扩展卷：解决办法就是把右边的磁盘删除（状态为未分配空间），然后用左边的磁盘合并之（使用扩展卷）</p></li></ul><h3 id="4-关于破解"><a href="#4-关于破解" class="headerlink" title="4. 关于破解"></a>4. 关于破解</h3><p>首先有条件购买支持正版，支持同行</p><p>其次下载自己笔记本出厂Windows版本，则不需要激活码，自带</p><p>最后破解之</p><p><code>hwid.kms38.gen.mk6</code>软件</p><h2 id="三、Computer"><a href="#三、Computer" class="headerlink" title="三、Computer"></a>三、Computer</h2><h3 id="谷歌浏览器"><a href="#谷歌浏览器" class="headerlink" title="谷歌浏览器"></a>谷歌浏览器</h3><ul><li><del>谷歌访问助手插件 让谷歌先连上网 然后构建SSR/</del> ByWave</li><li>登录谷歌账号同步书签插件等设置</li><li><del>下载<a href="http://www.carrotchou.blog/59.html" target="_blank" rel="noopener">IDM下载器</a></del></li></ul><h3 id="文件备份及恢复"><a href="#文件备份及恢复" class="headerlink" title="文件备份及恢复"></a>文件备份及恢复</h3><ul><li>网盘常用文件夹备份</li><li>GitHub同步开发项目</li></ul><h3 id="开发环境的搭建"><a href="#开发环境的搭建" class="headerlink" title="开发环境的搭建"></a>开发环境的搭建</h3><ul><li>Git：配置全局用户 <del>（非个人电脑配置多用户环境</del>）</li><li>Nodejs</li><li>Unix：VMware15</li><li>Java：jdkjdk1.8.0_181、jrejdk1.8.0_181</li><li>MySQL</li></ul><h3 id="通用软件"><a href="#通用软件" class="headerlink" title="通用软件"></a>通用软件</h3><ul><li>百度网盘，Dropbox，迅雷</li><li>Bandizip</li><li>PDF：Adobe Acrobat DC <del>/福昕阅读器</del></li><li><del>有道翻译</del></li><li>Office2019 <del>(已经集成Onenote2016)，再另外下载onenote插件</del></li><li>Potplayer播放器</li></ul><h3 id="社交软件"><a href="#社交软件" class="headerlink" title="社交软件"></a>社交软件</h3><p>QQ、微信、网易邮箱大师、网易云、酷狗</p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul><li>C&amp;C++：VScode(轻量)<del>、Codeblocks(次选)、VS2019(PC空间大则优选)</del></li><li>Python：Anaconda、Pycharm(配置nltk、tensorflow等)(<del>关于破解或</del> 学生用户登录)</li><li>Java/JavaWeb：jdk、IDEA/Eclipse(配置Tomcat)</li><li>Web：VScode <del>/webstorm</del> </li><li>DataBase：<del><a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=30438" target="_blank" rel="noopener">SQL Server 2008</a> 和 <a href="https://zhuanlan.zhihu.com/p/65630194" target="_blank" rel="noopener">安装教程</a> 、</del> Navicat Premium 12</li><li><del>OS：CPU Simulator</del></li><li><del>Matlab</del></li><li><del>研究-CAJViewer 7.3</del></li><li><del>研究-AxMath</del></li><li><del>研究-AxGlyph</del></li></ul><h3 id="后期制作"><a href="#后期制作" class="headerlink" title="后期制作"></a>后期制作</h3><p>Ps、Pr、Ae <del>、An、Au、EV录频、Format factory格式转换工厂</del></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> （全局代理下载）</li><li>Snipaste-2.3-64位（网盘）</li><li><del>阿里云的oss-browser</del></li><li><del>HexoClient</del></li><li><del>火萤桌面视频</del></li><li><del>Rainmeter</del></li></ul><!--stackedit_data:eyJoaXN0b3J5IjpbLTY3NDQ3MzI2OSwxNzM0NDIyNDM1XX0=-->]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN(卷积)和GCN(离散卷积)</title>
      <link href="/2020/01/18/MachingLearning/CNN-%E5%8D%B7%E7%A7%AF%E5%92%8CGCN-%E7%A6%BB%E6%95%A3%E5%8D%B7%E7%A7%AF/"/>
      <url>/2020/01/18/MachingLearning/CNN-%E5%8D%B7%E7%A7%AF%E5%92%8CGCN-%E7%A6%BB%E6%95%A3%E5%8D%B7%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、CNN"><a href="#一、CNN" class="headerlink" title="一、CNN"></a>一、CNN</h2><h3 id="1-卷积的理解"><a href="#1-卷积的理解" class="headerlink" title="1. 卷积的理解"></a>1. 卷积的理解</h3><ul><li>从数学角度来看，卷积就是一种运算，就好比是线性代数的内积、向量积等。</li><li>卷积分两种类型，一种是连续类型，一种是离散类型。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://pic1.zhimg.com/v2-d3df01f12b869d431c65f97ad307508f_r.jpg" alt="离散↓和连续↑定义" title="上为连续下为离散"></li></ul><h3 id="2-Examples"><a href="#2-Examples" class="headerlink" title="2. Examples"></a>2. Examples</h3><ol><li><p>离散卷积===掷骰子</p><p>加入同时掷两个骰子，求骰子显现数之和为4的概率为多少？其实就是高中所学的排列组合问题，可以看作是卷积离散形式的显性表现形式。</p></li><li><p>连续卷积===做馒头</p><p>由于时间变化和食物腐败特性，做馒头的同时也会有馒头的腐败，给定相关数据，求一天之中腐败的馒头数量。</p></li></ol><h3 id="3-卷积在计算机领域简单应用"><a href="#3-卷积在计算机领域简单应用" class="headerlink" title="3. 卷积在计算机领域简单应用"></a>3. 卷积在计算机领域简单应用</h3><ul><li>降噪图像：将图像按照矩阵的形式表达为一个数据集，对目标的一个像素点，进行平均矩阵运算，此时的矩阵表达形式可以映射到卷积的数学表达形式。</li></ul><h2 id="二、GCN"><a href="#二、GCN" class="headerlink" title="二、GCN"></a>二、GCN</h2><p>卷积的区分：</p><ul><li>数学运算当中的卷积：“”</li><li>深度学习里面的卷积</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.zhihu.com/question/22298352/answer/228543288" target="_blank" rel="noopener">如何通俗易懂地解释卷积？ - 马同学的回答 - 知乎</a></li><li><a href="https://www.zhihu.com/question/52237725/answer/545340892" target="_blank" rel="noopener">解释一下卷积神经网络的卷积核？ - superbrother的回答 - 知乎</a></li><li><a href="https://www.zhihu.com/question/54504471/answer/332657604" target="_blank" rel="noopener">如何理解 Graph Convolutional Network（GCN）？-superbrother的回答-知乎</a></li><li><a href="https://www.cnblogs.com/maybe2030/p/4665847.html#top" target="_blank" rel="noopener">复杂网络的解释</a><br>&lt;!–stackedit_data:<br>eyJoaXN0b3J5IjpbLTUwNzQ0MjY4XX0=</li><li>-&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> MachingLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS</title>
      <link href="/2020/01/17/PostProduction/PS/"/>
      <url>/2020/01/17/PostProduction/PS/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本工具"><a href="#一、基本工具" class="headerlink" title="一、基本工具"></a>一、基本工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">认识PS&#x3D;&#x3D;&#x3D;有许多功能eg：绘画等等</span><br><span class="line">准备工作&#x3D;&#x3D;&#x3D;了解菜单栏；工具栏；基本功能</span><br><span class="line">1、图层面板的认识</span><br><span class="line">图层顺序 上一层遮挡下一层 蒙版也是图层</span><br><span class="line">混合模式 就是这层图层与下一层混合叠加的效果</span><br><span class="line">@@滤色 就是消去黑色深色只显示白色亮色的部分 案例光晕 用黑背景绘画光晕的图案选择滤色混合样式</span><br><span class="line">图层样式</span><br><span class="line">不透明</span><br><span class="line">创建 删除 解锁</span><br><span class="line"></span><br><span class="line">2、图片的裁切</span><br><span class="line">选框工具不行&#x3D;&#x3D;&#x3D;无法确定像素 不能缩放要显示的区域</span><br><span class="line">裁剪工具不行&#x3D;&#x3D;&#x3D;能确定像素 但不能缩放要显示的区域只是同时裁剪图片和画布</span><br><span class="line">图像&#x3D;&#x3D;&#x3D;大小不行--只是压缩图片和画布而已 </span><br><span class="line">画布大小（前提是图层不是背景层没有被锁定）</span><br><span class="line">调整画布的大小+自由变换工具缩放+移动工具</span><br><span class="line">我们想要的大小 调整图像等比例缩放 移动到我们要显示的区域</span><br><span class="line"></span><br><span class="line">3、蒙版作用</span><br><span class="line">蒙版只有白和黑 只是在通道建立一个白色的蒙版图层（默认全部显示；有选区时，选区是白色的非选区是黑色的）</span><br><span class="line">黑透明，白不透明</span><br><span class="line">画笔涂抹 透明度 流量</span><br><span class="line">一般用来合成图片</span><br><span class="line">对图像擦除的效果 但不影响原始图像的像素 便于后期修改</span><br><span class="line">如果用橡皮擦会破坏原始素材</span><br><span class="line"></span><br><span class="line">4、正确校色</span><br><span class="line">图像-调整&#x3D;&#x3D;&#x3D;对图像校色是不可逆的 不适合后期修改</span><br><span class="line">创建新的填充和调整图层的按钮 添加带蒙版的调整图层</span><br><span class="line">带蒙版的调整图层 是可逆的</span><br><span class="line">如果想只对**一个图层作用 右击图层-创建剪切蒙版  </span><br><span class="line"></span><br><span class="line">5、钢笔工具 </span><br><span class="line">点击-点击&#x3D;&#x3D;&#x3D;是直线</span><br><span class="line">点击-点击不要松开手&#x3D;&#x3D;&#x3D;拖动 就是曲线勒</span><br><span class="line">alt+ 点击瞄点拖拉会产生操纵杆&#x3D;&#x3D;&#x3D;并且把直线变成曲线</span><br><span class="line">点击单个操纵杆会单独操纵一边的 </span><br><span class="line">crtl+ 移动瞄点</span><br><span class="line">属性栏【自动添加&#x2F;删除】打勾时 点击线能添加点 点击点不拖动能删除点</span><br><span class="line">描绘到一半的没闭合的图层 要闭合的话就要先ctrl点击最后一点 在点击初始点</span><br><span class="line">抠出的区域转为选区 选中图层 点击路径面板-将路径转为选区</span><br><span class="line">这时候的选区可以 建立蒙版把他抠出来单独单独显示 这种抠图是可逆的</span><br><span class="line"></span><br><span class="line">6、修片时用到的工具</span><br><span class="line">红眼 &#x3D;&#x3D;&#x3D;记得是整个眼睛</span><br><span class="line">污点 &#x3D;&#x3D;&#x3D;可以吧污点附近的像素自动修改污点 但是对麻子脸没用</span><br><span class="line">修复画笔 &#x3D;&#x3D;&#x3D;把目标的像素填充涂抹的地方 并且能自动融合边缘</span><br><span class="line">修补工具 &#x3D;&#x3D;&#x3D;框选一个目标选区 填充涂抹的地方 并且能自动融合边缘</span><br></pre></td></tr></table></figure><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><!--stackedit_data:eyJoaXN0b3J5IjpbNjk1ODYwNTQxXX0=-->]]></content>
      
      
      <categories>
          
          <category> PostProduction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AN</title>
      <link href="/2020/01/16/PostProduction/AN/"/>
      <url>/2020/01/16/PostProduction/AN/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本功能"><a href="#一、基本功能" class="headerlink" title="一、基本功能"></a>一、基本功能</h2><p>铅笔工具：属性面板和工具栏下方公共栏都有修改属性设置，笔触颜色， 模式（伸直平滑墨水） 样式下拉菜单中选斑马线测试</p><p>线条工具：shift划线，水平垂直45度角    端点</p><p>矩形工具：形状，笔触和填充两种颜色  Shift正方形  接合</p><p>基本矩形工具：图元，跟形状重合不会破坏，形状之间融合</p><p>椭圆工具：不要笔触颜色   不要填充颜色  </p><p>基本椭圆工具：直接在图上拖动修改  圆环  扇形</p><p>多角星形工具：多边形，星形（属性-工具设置-选项-样式-星形）</p><p>选择工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.选择功能：单击填充选填充，双击填充选边框+填充，双击边框选连通边框</span><br><span class="line">2.移动功能：选择，按着鼠标移动</span><br><span class="line">3.复制功能：选择，ALT+按着鼠标移动可复制</span><br><span class="line">4.变形功能：鼠标放在边框上当光标变了，按着鼠标拖动可以做变形</span><br></pre></td></tr></table></figure><p>月亮和叶子制作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">画笔工具（刷子工具）： 有边框无填充矩形，用刷子工具测试刷子模式（画笔模式）。</span><br><span class="line">画笔工具（艺术画笔工具）：可点击画笔库按钮打开预设，双击某种画笔，添加到属性面板的样式下拉列表</span><br><span class="line">颜料桶工具：修改填充颜色   空隙大小</span><br><span class="line">墨水瓶工具：修改笔触颜色 改宽度和样式，细边粗边斑马</span><br><span class="line">滴管工具：选择边框，修改笔触颜色，选择填充，修改填充颜色，并同时转换成墨水瓶或颜料桶工具</span><br><span class="line">任意变形工具：有点像PS的自由变换  导入外部文件并打散（CTRL+B）做变形</span><br><span class="line">渐变变形工具：气球制作（填充颜色选渐变，用颜色调板变换颜色，用颜料桶工具填充）</span><br><span class="line">部分选择工具：红心制作（只有填充没有边框的正圆-复制正圆两只圆叠加心的半成品-部分选择工具移动下面锚点成心形）</span><br><span class="line">文字工具：七彩文字（颜料桶工具填充为线性渐变）   透视文字（任意变形工具 扭曲） </span><br><span class="line">         波浪文字（任意变形工具 封套）</span><br><span class="line">3D旋转平移工具：两种工具只对影片剪辑元件起作用（插入讲元件，花元件，对齐面板排列）</span><br></pre></td></tr></table></figure><p>时间轴，普通帧，关键帧，空白关键帧</p><p>逐帧动画：</p><ol><li>导入文件名连续的多张图片，文件-导入-导入到舞台-此文件看起来是图像序列的组成部分，是否导入序列中的所有图像？是-在时间轴上查看，生成若干关键帧，每帧一幅图像，CTRL-Enter测试影片，1帧频2关键帧后插入普通帧放慢速度（选择关键帧-插入-时间轴-普通帧）</li><li>小球跳跃，从屏幕左边跳到右边，再跳回来（插入关键帧，每个关键帧中小球改变位置，时间轴上选择所有帧，按着Alt键拖动可复制，对复制帧鼠标右键选翻转帧）</li><li>Connecting制作<h2 id="二、补间形状动画"><a href="#二、补间形状动画" class="headerlink" title="二、补间形状动画"></a>二、补间形状动画</h2></li><li>小球移动  第一帧画圆-选择时间轴上的帧-鼠标右键-创建补间形状-时间轴上选第25帧创建关键帧，这个关键帧跟前面距离它最近的关键帧一样，把小球移动到右边- CTRL-Enter测试影片</li><li>蓝色方形变红色圆</li><li>“3 变色文字”实现时注意，文字必须打散为形状，才能做补间形状动画</li><li>“4 形状提示“ 同一图中两个不同动画是通过创建图层，不同图层上不同动画；形状提示的添加方法：修改-形状-添加形状提示</li></ol><h2 id="三、传统补间动画"><a href="#三、传统补间动画" class="headerlink" title="三、传统补间动画"></a>三、传统补间动画</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">传统补间动画-小球为例子</span><br><span class="line">画圆-帧-鼠标右键-创建传统补间-注意圆已经被转换为图形元件-30帧处创建关键帧-圆移动到右边-测试影片-在库中找到自动建立的图形元件，双击修改为径向渐变填充-选择第一帧点击-修改帧属性中的旋转为顺时针，测试影片。-选择第二个关键帧中的圆，在属性中选择色彩效果-样式中的各种选项-测试效果 </span><br><span class="line">6-1 动作动画-放大</span><br><span class="line">导入图-帧-鼠标右键-创建传统补间-30帧处创建关键帧-放大第二个关键帧中图片元件-选择第一帧-帧属性中缓动设置为-100</span><br><span class="line">补间形状和传统补间的区别</span><br><span class="line">6-2 动作动画-小人跑步</span><br><span class="line">设置舞台颜色-制作路图层-制作小人影片剪辑动画-生成小人走路图层-设置两个关键帧中小人属性</span><br><span class="line">读ppt13-ppt17对图形元件和影片剪辑元件属性设置的不同</span><br><span class="line">引导动画-小球抛物线</span><br><span class="line">要创建运动引导动画，至少需要两个图层：一个是被引导图层，用于存放运动的对象，必须是传统补间动画；另一个是引导层，用于绘制作为对象运动路径的辅助线。使用鼠标右键单击，在弹出的快捷菜单中，选择【添加传统运动引导层】选项，即可添加一个传统运动引导层。</span><br><span class="line">创建一个传统补间动画-小球从频幕左边走到右边-在图层左边空白处鼠标右键单击，在弹出的快捷菜单中，选择【添加传统运动引导层】选项，即可添加一个传统运动引导层。用直线工具画直线，小球自动吸附到线上-用选择工具把直线变成抛物线-测试</span><br><span class="line">遮罩动画</span><br><span class="line">遮罩动画是Flash的一种基本动画方式，制作遮罩动画至少需要2个图层，即遮罩层和被遮罩层。在时间轴上，位于上层的图层是遮罩层，这个遮罩层中的对象就像一个窗口一样，透过它的填充区域可以看到位于其下方的被遮罩层中的区域。而任何的非填充区域都是不透明的，被遮罩层在此区域中的图像将不可见。</span><br><span class="line">导入women1照片-建立新图层-画椭圆遮住女孩头部-图层左边空白处鼠标右键单击，在弹出的快捷菜单中，选择【遮罩层】，看效果。</span><br><span class="line"></span><br><span class="line">补间形状动画</span><br><span class="line">改变的形状</span><br><span class="line">单纯位置的移动</span><br><span class="line">传统补间动画</span><br><span class="line">多个属性可以改变：旋转、放大、透明……</span><br><span class="line"></span><br><span class="line">引导层</span><br><span class="line">eg：旋转的字</span><br><span class="line">遮罩动画</span><br><span class="line">eg：闪光灯文字效果</span><br><span class="line"></span><br><span class="line">影片剪辑动画&#x3D;&#x3D;&#x3D;how？</span><br><span class="line">滤镜&#x3D;&#x3D;&#x3D;实现灰色地带</span><br><span class="line">帧的种类与差异</span><br><span class="line">切割字幕：线条工具&#x2F;铅笔</span><br><span class="line">从库那里打开文件，直接拖动，可以保留被拖动的东西属性</span><br><span class="line"></span><br><span class="line">魔戒：</span><br><span class="line">向下滚动的文字&#x3D;&#x3D;不同时间掉下&#x3D;&#x3D;&#x3D;该百年属性，图形原件，各个掉下的文字改成不同的帧数</span><br></pre></td></tr></table></figure><h2 id="四、部件动画"><a href="#四、部件动画" class="headerlink" title="四、部件动画"></a>四、部件动画</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">补间动画</span><br><span class="line"> </span><br><span class="line">补间动画（CS4开始）是基于对象的，传统补间是基于帧的</span><br><span class="line"> </span><br><span class="line">生成补间动画方法：</span><br><span class="line">①选择对象，右击，选创建补间动画；</span><br><span class="line">②选择帧，右击选创建补间动画，系统自动生成补间范围，容纳一秒所需帧</span><br><span class="line"> </span><br><span class="line">创建补间动画后，帧色彩是浅蓝色，与传统补间补间形状比（淡紫色 绿色）</span><br><span class="line">（生成一个新图层，创建传统补间，查看颜色）</span><br><span class="line"> </span><br><span class="line">补间对象可以是元件（图形元件、影片剪辑、按钮）、文本（演示传统补间如何做文字运动，自动把文本转换为图形元件，而补间动画直接对文本做补间）</span><br><span class="line"> </span><br><span class="line">编辑补间动画范围：</span><br><span class="line">补间动画可以方便调整帧数  传统补间不能像补间动画范围那样拉伸或改变大小，只能分别选择这些帧并插入或删除才能拉伸或缩短动画</span><br><span class="line">注意：在时间轴上，第一帧最后一帧边缘按着鼠标拖动，帧们按比例压缩或者增长；如果按着shift键拖动，可保持原来关键帧之间的距离，尾部自动生成普通帧</span><br><span class="line">延长动画持续时间，可以将范围左侧边缘或右侧边缘拖动到期望的帧上。</span><br><span class="line">    “基于整体范围的选择”（时间轴右上角下拉菜单）勾选时，鼠标拖过希望选择的帧的同时按下ctrl键可以在动画范围内选择一定范围内的帧，（ctrl+鼠标拖动可以同时选多个图层多个帧），选择后拖动可以移动关键帧到图层的新位置，按着Alt的同时拖动是复制帧</span><br><span class="line">    </span><br><span class="line">选择帧后鼠标右键，拆分动画，产生两个补间范围</span><br><span class="line">eg：</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">关键帧和属性关键帧？？？</span><br><span class="line">不同，关键帧只时间轴上某一帧中元件实例首次出现在舞台上；属性关键帧是flash cs4增加的，指在补间动画中为特定时间或某一帧某个属性定义的一个值</span><br><span class="line">添加属性关键帧：</span><br><span class="line">1）手动添加：播放头放在要添加帧的位置，右击-插入关键帧-           </span><br><span class="line">2）自动添加:播放头放在要添加帧的位置，属性改变</span><br><span class="line"> </span><br><span class="line">编辑运动路径</span><br><span class="line">      创建&#x2F;修改运动路径：可以用选择工具移动路径（包括对象）、路径变形、用部分选择工具修改路径，可用选择工具重新定位路径也可以用任意变形工具缩放处理路径，还可以菜单修改-变形更多范围处理路径</span><br><span class="line"></span><br><span class="line">      将播放头定位在路径中间位置，修改对象位置，会自动改变路径</span><br><span class="line">      创建复炸路径：新建一个铅笔图层，铅笔工具绘制图在该图层，ctrl+X，选择时间轴内的动画范围或舞台上的对象ctrl+v粘贴，就可以生成路径，</span><br><span class="line">      Ctrl+shift+V不改变原图形位置复制</span><br><span class="line">注意：路径不能闭合，比如地球绕太阳旋转的题，用补间动画实现时，园必须有缝隙，小球才能在缝隙处开始</span><br><span class="line"></span><br><span class="line">Eg：</span><br><span class="line">1）飞机头跟着路径走。</span><br><span class="line">2）海底海豚</span><br><span class="line">Ø 影片剪辑动画尾巴的摆动：新建元件（影片剪辑），再导入三张海豚图片（改变相关的帧）生成海豚摆尾巴的一个小影片剪辑</span><br><span class="line">Ø 学会导入影片所需要的剪辑动画①同时打开fla文件，库当中导入②文件选项导入到舞台</span><br><span class="line">Ø 还要勾选“调整到路径”</span><br><span class="line"></span><br><span class="line">补间动画使用并保存为预设动画</span><br><span class="line">传统补间不行，只能是补间动画才行</span><br><span class="line">动画预设使用：选择动画预设中的相关预设，鼠标右键“在当前位置结束” </span><br><span class="line">自己创建预设：方形从左到右，创建补间动画，在动画预设工具中选左下第一个生成预设命令，或者右上弹出菜单中选“保存”，即可在自定义预设中定义自己的预设</span><br><span class="line">    另外，再同样生成传统补间，同样保存，会出现不能创建对话框。</span><br><span class="line">    如果画形状（如圆），可直接应用动画预设，但是，注意别只选择元的心或者轮廓，这样，会保留没选择部分为一个图层，选择部分自动生成新图层</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">位置与颜色效果动画：</span><br><span class="line">         1）打开素材，延长帧到117</span><br><span class="line">           2）新建图层2，第11帧F6插入关键帧，库中拖动P00元件，到舞台底部，并创建补间动画</span><br><span class="line">           3）14帧处右击，插入属性关键帧-全部，向上移动P00，到下面细条一半进入----快速上移</span><br><span class="line">           4）25帧插入属性关键帧，Poo上移一点，到细条全显示--慢速上移</span><br><span class="line">           5）新建图层3 ，33帧处插入关键帧，元件“按钮1” 拖入放在上端和大字上端齐平，选按钮1，属性面板中设亮度为80%,创建补间动画</span><br><span class="line">           6）41帧处插入属性关键帧，向下拖动对象到顶端比上面的细线低不少，亮度设为0%</span><br><span class="line">           7) 46帧F6，向上拖动图到最终位置，图像的下端与下面的细条的上端齐平</span><br><span class="line"></span><br><span class="line">           8）选择补间范围，在“动画预设”面板创建并存储新的动画预设</span><br><span class="line">           9）新建图层，36帧处插入关键帧，元件“按钮2” 拖入放在上端和大字上端齐平，将刚创建的动画预设应用到元件上</span><br><span class="line">           10）依次创建新图层，拖入按钮3,4，应用动画预设</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">运动及运动引导动画 </span><br><span class="line">                    1)打开素材文件，把Symboll0拖入场景，转换为影片剪辑运动动画第一帧窗机补间动画，新建图层，绘制曲线，ctrl+X，回到图层一，ctrl+shift+V原位粘贴</span><br><span class="line">                   2）生成图层3，错后几帧建立关键帧，拖入Symbol0，还是创建补间动画，绘制曲线，复制粘贴</span><br><span class="line">                   3）生成图层4，重复2）</span><br><span class="line">                   4）回到场景，图层一背景，图层2放入运动动画，按Alt拖动复制若干，调整位置，使得播放时有更多花瓣飞出</span><br><span class="line">摄像头动画</span><br><span class="line">创建：时间轴下方&#x2F;左边工具里面</span><br><span class="line">在控制台修改属性，补间动画，传统补间</span><br><span class="line">还可以左右移动摄像机</span><br></pre></td></tr></table></figure><h2 id="五、按钮"><a href="#五、按钮" class="headerlink" title="五、按钮"></a>五、按钮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">三种元件</span><br><span class="line">图形</span><br><span class="line">影片剪辑</span><br><span class="line">按钮</span><br><span class="line"></span><br><span class="line">按钮</span><br><span class="line">（使用和指针使用有关）</span><br><span class="line">四种状态：</span><br><span class="line">弹起状态</span><br><span class="line">指针点击状态</span><br><span class="line">按下状态</span><br><span class="line">滑过状态</span><br><span class="line">ps：2热区、点击状态</span><br><span class="line"></span><br><span class="line">⚪的制作</span><br><span class="line">四个图层</span><br><span class="line">选择&#x3D;&#x3D;&#x3D;变形&#x3D;&#x3D;&#x3D;</span><br><span class="line">Ctrl+x 制作外环&#x3D;&#x3D;&#x3D;在制作成影片剪辑原件（用补间动画制作）</span><br><span class="line">加在一起&#x3D;&#x3D;&#x3D;都选择&#x3D;&#x3D;&#x3D;对齐命令</span><br><span class="line">加入音乐</span><br><span class="line"></span><br><span class="line">史努比的实现</span><br><span class="line">抠图&#x3D;&#x3D;&#x3D;魔棒……</span><br><span class="line">扩大热区</span><br><span class="line"></span><br><span class="line">游动的鱼</span><br><span class="line">影片剪辑</span><br><span class="line">隐形动画</span><br><span class="line"></span><br><span class="line">动作脚本（a来显示）</span><br><span class="line">窗口&#x3D;&#x3D;&#x3D;动画&#x3D;&#x3D;&#x3D;写代码</span><br><span class="line">①小球停止</span><br><span class="line">②星球环绕：第二帧跳到第一帧</span><br><span class="line">创建：</span><br><span class="line">①动作里面的</span><br><span class="line">②代码片段里面</span><br><span class="line">新建一个图层，用其他人的按钮代码片段</span><br><span class="line"></span><br><span class="line">经典交互程序</span><br><span class="line">四个商店</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">声音</span><br><span class="line">选择第一帧，拖动过来</span><br><span class="line">同步：不要选择“事件”，选择“开始”，“数据流”只在选择的的帧出声音</span><br><span class="line">拖动音乐进来之后：插入普通帧不要关键帧</span><br><span class="line"></span><br><span class="line">文本（歌词）</span><br><span class="line">三种类型：</span><br><span class="line">①静态文本：从头到尾不变</span><br><span class="line">②动态文本</span><br><span class="line">③输入文本：交互</span><br><span class="line"></span><br><span class="line">按F7（第一个F7之后插入F6），在文本（歌词）图层中，</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不同场景按钮：</span><br><span class="line">三个按钮，响应进入另一个场景，插入场景&#x3D;&#x3D;&#x3D;用到代码片段</span><br><span class="line">代码实现</span><br></pre></td></tr></table></figure><!--stackedit_data:eyJoaXN0b3J5IjpbLTE1ODkzMzY2MDBdfQ==-->]]></content>
      
      
      <categories>
          
          <category> PostProduction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OS小结</title>
      <link href="/2020/01/16/OS/OS%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/01/16/OS/OS%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="学期完一点想法"><a href="#学期完一点想法" class="headerlink" title="学期完一点想法"></a>学期完一点想法</h2><p>OS学的不深，许多经典算法没有自己实现，只是表层的理解原理而已。</p><p>OS的学习以后还有待加强！</p><h2 id="他人的话"><a href="#他人的话" class="headerlink" title="他人的话"></a>他人的话</h2><p>上大学上的的最有意义的四门课：</p><ol><li>操作系统/实习：从零开始写了一个操作系统，从实模式到bash，包括文件系统</li><li>计算机网络：从零实现tcp协议栈，以及路由算法</li><li>编译原理/实习：从零写python静态类型推导以及runtime库</li><li>计算机体系结构：这个没做什么项目，但是了解了cpu的基本原理，发展历史，以及现代处理器的工作模式。</li></ol><p>至于这四门课都学完后我的收益是什么？ 任何一个计算机软件层面的问题，我都可以按照这四门课教我的方法，系统性的分析到根源，从未失手过。 目前面试过的人得有100+，感觉985科班出身的会好一些，感觉CS大学教育还是有待加强</p><h2 id="java对os的复习"><a href="#java对os的复习" class="headerlink" title="java对os的复习"></a>java对os的复习</h2><h3 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h3><ul><li>CPU<ul><li>对内存的数据，执行相关数据</li></ul></li><li>内存<ul><li>数据是如何存储的？</li></ul></li><li>外存<ul><li>硬盘、cd、驱动</li></ul></li><li>输出设备<ul><li>显示器（分辨率，点距）</li></ul></li><li>输入设备<ul><li>键盘</li></ul></li><li>调制解调器</li></ul><h3 id="程序的本质"><a href="#程序的本质" class="headerlink" title="程序的本质"></a>程序的本质</h3><p>封装一个极其智能软件</p><ul><li>机器语言</li><li>汇编语言：对上一语言做了部分封装，所以需要了编译器</li><li>高级语言：就想学英语一样（要学好英语，提升词汇量等），也需要编译器来转换机器所能认识的机器语言或虚拟机器语言</li></ul><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>java能开发很多平台应用，使用范围广泛</p><p>java的一些特征</p><!--stackedit_data:eyJoaXN0b3J5IjpbNDUyNTQ0ODk4XX0=-->]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB-概述</title>
      <link href="/2020/01/16/Language/MATLAB-%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/01/16/Language/MATLAB-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="MATLAB概述"><a href="#MATLAB概述" class="headerlink" title="MATLAB概述"></a>MATLAB概述</h2><p>MATLAB(矩阵实验室)是数字计算，可视化和编程的第四代高级编程语言和交互式环境。MATLAB是由MathWorks开发的。</p><p>它允许矩阵操纵，绘制功能和数据; 实现算法; 创建用户界面; 与其他语言编写的程序(包括C语言，C++，Java和FORTRAN)进行交互; 分析数据; 开发算法; 并创建模型和应用程序。</p><p>它有许多内置命令和数学函数，可以帮助您进行数学计算，生成图形和执行数值方法。</p><h2 id="MATLAB计算数学"><a href="#MATLAB计算数学" class="headerlink" title="MATLAB计算数学"></a>MATLAB计算数学</h2><p>MATLAB用于计算数学的各个方面，以下是最常用的常用数学计算方法 -</p><ul><li><p>处理矩阵和数组</p></li><li><p>2D和3D绘图和图形</p></li><li><p>线性代数</p></li><li><p>代数方程</p></li><li><p>非线性函数</p></li><li><p>统计</p></li><li><p>数据分析</p></li><li><p>微积分和微分方程</p></li><li><p>数值计算</p></li><li><p>积分</p></li><li><p>变换</p></li><li><p>曲线拟合</p></li><li><p>各种其他特殊功能</p><h2 id="MATLAB特点"><a href="#MATLAB特点" class="headerlink" title="MATLAB特点"></a>MATLAB特点</h2><p>以下是MATLAB的基本特性 -</p></li><li><p>它是数字计算，可视化和应用程序开发的高级语言。</p></li><li><p>它还为迭代探索，设计和解决问题提供了一个交互式环境。</p></li><li><p>它为线性代数，统计学，傅里叶分析，滤波，优化，数值积分和求解常微分方程提供了广泛的数学函数库。</p></li><li><p>它提供内置的图形，用于可视化数据和工具，用于创建自定义绘图。</p></li><li><p>MATLAB编程接口提供了开发工具，以提高代码质量的可维护性并最大限度提高性能。</p></li><li><p>它提供使用自定义图形界面构建应用程序的工具。</p></li><li><p>它提供了基于MATLAB的算法与外部应用程序和语言(如C语言，Java，.NET和Microsoft Excel)集成的功能。</p><h2 id="MATLAB使用"><a href="#MATLAB使用" class="headerlink" title="MATLAB使用"></a>MATLAB使用</h2><p>MATLAB广泛应用于物理，化学，数学和所有工程流领域的科学与工程计算工具。 它用于一系列应用，包括 -</p></li><li><p>信号处理和通信</p></li><li><p>图像和视频处理</p></li><li><p>控制系统</p></li><li><p>测试和测量</p></li><li><p>计算财务</p></li><li><p>计算生物学</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-markdown写作</title>
      <link href="/2020/01/16/Hexo/Hexo-markdown%E5%86%99%E4%BD%9C/"/>
      <url>/2020/01/16/Hexo/Hexo-markdown%E5%86%99%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Markdown的基本语法"><a href="#一、Markdown的基本语法" class="headerlink" title="一、Markdown的基本语法"></a>一、Markdown的基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>分六个标题，一般<code>#</code>作为文章的总标题，一篇文章只有一个</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><em>倾斜文字</em><br><strong>加粗文字</strong><br><strong><em>倾斜加粗文字</em></strong><br><del>删除线文字</del></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>引用</p><blockquote><p>引用+嵌套</p></blockquote></blockquote><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://bkimg.cdn.bcebos.com/pic/38dbb6fd5266d0168c84e180992bd40734fa35fc?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2UxNTA=,xp_5,yp_5" alt="解释图片" title="鼠标悬着图片名字：天行九歌"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表</p><ul><li>第一个无序</li></ul><ul><li>第二个无序</li></ul><ul><li>第三个无序</li></ul><p>有序列表</p><ol><li>第一个有序</li><li>第二个有序</li></ol><p>嵌套列表</p><ol><li>父1<ul><li>子1</li><li>子2</li></ul></li><li>父2<ul><li>子1</li></ul></li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><ul><li>没有空格！</li><li>第二行分割表头和内容。有一个就行，为了对齐，多加了几个</li><li>文字默认居左<ul><li>两边加：表示文字居中</li><li>右边加：表示文字居右</li></ul></li><li>注：原生的语法两边都要用 | 包起来。此处省略</li></ul><h3 id="文字高亮"><a href="#文字高亮" class="headerlink" title="文字高亮"></a>文字高亮</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“&#x3D;&#x3D;高亮&#x3D;&#x3D;”   在线编辑器里面这么使用</span><br></pre></td></tr></table></figure><p>展示：<br>==高亮部位==</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>单行代码<br><code>import pandas as pd</code></li><li>代码块1（~键构成）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include  &lt;stdio.h&gt;`</span></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">"Hello world\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figureplus/figure2/mmexport1587818750882.jpg" alt=""></p><h2 id="二、写文章"><a href="#二、写文章" class="headerlink" title="二、写文章"></a>二、写文章</h2><h3 id="图床的搭建"><a href="#图床的搭建" class="headerlink" title="图床的搭建"></a>图床的搭建</h3><h3 id="MK编辑器选择"><a href="#MK编辑器选择" class="headerlink" title="MK编辑器选择"></a>MK编辑器选择</h3>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-chapter1-8基础知识</title>
      <link href="/2020/01/16/Language/JAVA-chapter1-8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/01/16/Language/JAVA-chapter1-8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于JAVA"><a href="#一、关于JAVA" class="headerlink" title="一、关于JAVA"></a>一、关于JAVA</h2><h3 id="何为JAVA"><a href="#何为JAVA" class="headerlink" title="何为JAVA"></a>何为JAVA</h3><ol><li>c是面向过程的语言。c++和Java都是面向对象的。在c中没有类或者对象的概念。</li><li>java运行在虚拟机上，号称与平台无关。也就是你开发的java程序无论是unix，linux还是windows都可以正常运行。但是实际上这是一个良好的愿望，实际跨平台时还会有各种各样的问题。c和c++都是直接编译成可执行文件，是否能跨平台主要看你用到的编译器特性是否有多平台支持。</li><li>因为c和c++是直接编译成可执行文件，所以运行效率要比java高。至于c和c++哪个更快，两种语言的拥趸已经吵了很多年。</li><li>java因为是运行在虚拟机上，不需要考虑内存管理和垃圾回收机制。也是就你可以声明一个对象而不用考虑释放他，虚拟机帮你做这事情。而c和c++语言本身没有多少内存管理的概念，写c和c++程序如果用到指针就一定要考虑内存申请和释放。内存泄漏是c和c++最头疼的问题。</li><li>代码重用：java中有一个根类object，所有的类都是其子类，通过这种方式将容器和算法分离，实现一种操作作用于多种对象，提高代码重用。c++中没有总根对象，但是c++提供了另一个更强大的功能“模板”，同样高效地实现了一种操作作用于多种对象，提供了高效的代码重用方法。</li><li>数据结构：java内建了丰富的数据结构：列表，集合等等（很久没用java了，有些记不太清）。而c++则用“模板”同样提供了各种数据结构（容器）。</li><li>c语言在一些比较低层，和硬件打交道的地方用得比较多。另外很多开源软件由于unix/linux开发习惯也大多采用c来开发。Java是现在最流行的开发语言，c++比起java稍稍不那么流行一些，但是功能很强大。如能深入掌握，可以写出兼顾效率和美观的优秀代码。</li></ol><h3 id="多语言简略对比"><a href="#多语言简略对比" class="headerlink" title="多语言简略对比"></a>多语言简略对比</h3><blockquote><p><strong>Ideas are cheap, show me the code</strong>  学到了，学到了，以后就这么怼别人~</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码块：python通过缩进来确定代码块</span><br><span class="line">复数：java有，python有，ccplusplus没有</span><br><span class="line">python：相对于java，python就是java的压缩版本</span><br><span class="line"></span><br><span class="line">包、接口、API，我觉得java也好，python也好，正是因为这些模块组件化，才使得这些语言好很好的的健壮性</span><br></pre></td></tr></table></figure><h2 id="二、数据类型；运算符；表达式"><a href="#二、数据类型；运算符；表达式" class="headerlink" title="二、数据类型；运算符；表达式"></a>二、数据类型；运算符；表达式</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ol><li>常量</li><li>标识符和变量<blockquote><ul><li>好的命名以及编程习惯：①小/大驼峰命名 ②匈牙利命名 ③下划线命名</li><li><a href="https://blog.csdn.net/ZCF1002797280/article/details/51495229" target="_blank" rel="noopener">https://blog.csdn.net/ZCF1002797280/article/details/51495229</a></li><li><a href="https://blog.csdn.net/z_h_s/article/details/24007249" target="_blank" rel="noopener">https://blog.csdn.net/z_h_s/article/details/24007249</a></li></ul></blockquote></li><li>数据类型：<strong>JAVA中除了下面8种数据类型其他的都是以对象（或者说类的实例）存在的</strong><blockquote><ul><li>String：熟悉常用的函数</li><li>boolean（java中需要全部写出来）：会打印出来<code>true</code> <code>false</code></li><li>数值型<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle1/20200303212618.png" alt=""></li></ul></blockquote></li></ol><p><em>关于byte数据类型的二进制运算：反码、补码、原码</em><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle1/20200303213804.png" alt=""></p><h3 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h3><ol><li>赋值语句，赋值表达式</li><li>输入输出<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle2/Snipaste_2020-03-03_21-44-57.png" alt=""></li></ol><p><strong>输入输出，要有记得清除的空间，close的意识！</strong><br>3. 数值运算符<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle1/20200303213518.png" alt=""><br>4. 逻辑运算符</p><ul><li><code>&amp;&amp;</code> <code>||</code> <code>!</code> <code>^</code>(异或：相同才为假)</li><li><code>&amp;</code> <code>|</code> <code>^</code> 位运算符：会先化成二进制对二进制码进行分析<ol start="5"><li>运算符的优先级<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle1/20200303211703.png" alt=""></li></ol></li></ul><h2 id="三、三大基本结构"><a href="#三、三大基本结构" class="headerlink" title="三、三大基本结构"></a>三、三大基本结构</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><ul><li>if(){} else{}</li><li>switch<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle1/20200303211427.png" alt=""></li><li><strong>条件表达式</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle1/20200303211606.png" alt=""><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3></li><li>while () {}</li><li>do {} while ();</li><li>for () {}</li><li>关于break（跳出该级别的for循环）和continue（后面的语句不读）</li><li>关于return<br>  <img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle21/20200323142712.png" alt=""></li></ul><blockquote><p>关于增强的for循环，在模板章节，配合vector使用，并发控制，高效使用<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200331180229.png" alt=""><br>缺点：看不见索引</p></blockquote><h2 id="四、方法"><a href="#四、方法" class="headerlink" title="四、方法"></a>四、方法</h2><h2 id="五、数组"><a href="#五、数组" class="headerlink" title="五、数组"></a>五、数组</h2><h3 id="创建及初始化"><a href="#创建及初始化" class="headerlink" title="创建及初始化"></a>创建及初始化</h3><p>声明数组，推荐使用前者，直观。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle17/20200331172810.png" alt=""><br>给出数组大小<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle17/20200331173242.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle17/20200331173402.png" alt=""><br>初始化和C是差不多的<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle18/20200331174723.png" alt=""></p><h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><blockquote><p>是一个对象，有自己的属性自己的方法</p></blockquote><hr><p>String里面长度length有()，也就是String里面是方法，而数组没有括号()，理解为成员变量/属性，而不是方法（封装好了许多功能，体现出语言优越性）</p><hr><p>创建好编译器会有初始值<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle18/20200331174350.png" alt=""></p><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle18/20200331175118.png" alt=""><br><strong>相关注意：引用输入的时候，可以用下面的方式，避免类当中名字冲突的问题</strong><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle14/20200331175352.png" alt=""></p><hr><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle28/20200331175715.png" alt=""></p><hr><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle28/20200331175756.png" alt=""></p><hr><h3 id="数组的值传递"><a href="#数组的值传递" class="headerlink" title="数组的值传递"></a>数组的值传递</h3><blockquote><p>java核心之一</p></blockquote><p>数组名（数组地址）作为函数参数</p><p>java当中是<strong>值传递</strong>的，没有引用没有指针的概念，所以在做函数参数当中，一直都是值传递，python也是。</p><h3 id="Array类"><a href="#Array类" class="headerlink" title="Array类"></a>Array类</h3><blockquote><p>Array类当中的几个数组有关的函数：sort()/parallelSort()、binarySearch()、equals()、fill()、toString()</p><p>Binary Search二分查找（事先得排好序）</p></blockquote><p>import java.util.Arrays;<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200331205622.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle30/20200331205825.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo同时结合Coding Pages和GitHub Pages双线部署实现国内外访问</title>
      <link href="/2020/01/06/Hexo/Hexo-CodingPages-GitHubPages%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/01/06/Hexo/Hexo-CodingPages-GitHubPages%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle58/hexo-coding-github.png" alt=""></p>            </div><p>个人博客网页搭建全过程！（持续更新）</p><a id="more"></a><h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><p class='p center h1 large red'>本文章没有太多整理，只是自己搭建过程中自己的备忘总结，日后会整理自己所有使用心得</p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><h2 id="一、环境安装与配置"><a href="#一、环境安装与配置" class="headerlink" title="一、环境安装与配置"></a>一、环境安装与配置</h2><h3 id="Node的下载以及安装"><a href="#Node的下载以及安装" class="headerlink" title="Node的下载以及安装"></a>Node的下载以及安装</h3><p>下载<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>并<a href="https://www.jianshu.com/p/03a76b2e7e00" target="_blank" rel="noopener">安装</a></p><p>   目的：安装博客框架，渲染主题等</p><p>   环境变量的配置<br>  <fancybox><br>  <img src='https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/nodenpminit.png'><br>  </fancybox><br>  <img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/nodenpmdownload.png" alt="" title="nodenpm"></p><ul><li><p>安装hexo  <code>npm install -g hexo-cli</code> </p></li><li><p>安装过程中注意文件夹的本地性|容易出错！</p><h3 id="博客页面GitHub-Page申请"><a href="#博客页面GitHub-Page申请" class="headerlink" title="博客页面GitHub Page申请"></a>博客页面GitHub Page申请</h3></li><li><p>安装git【参考“git常用命令总结”博客一文】</p></li><li><p>在github上申请github pages</p><blockquote><p>创建仓库 <code>wztlink1013.github.io</code></p></blockquote></li></ul><h2 id="二、搭建博客"><a href="#二、搭建博客" class="headerlink" title="二、搭建博客"></a>二、搭建博客</h2><h3 id="创建并初始化文件夹"><a href="#创建并初始化文件夹" class="headerlink" title="创建并初始化文件夹"></a>创建并初始化文件夹</h3><p>   这里面所有文件就相当于所搭建博客网页所有源文件</p><p>   进入文件打开<code>git bash</code>输入<code>hexo init</code>出现<code>INFO  Start blogging with Hexo!</code>则证明初始化成功，此时blog文件夹里面会有一些站点文件</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node_modules：各种插件的安装文件夹</span><br><span class="line">scaffolds：模板文件夹（new的对象的模板）</span><br><span class="line">source：资源文件夹</span><br><span class="line">themes：主题文件夹（相当于“衣裳”）</span><br><span class="line"></span><br><span class="line">_config.yml：站点配置文件</span><br><span class="line">package.json：应用程序的信息</span><br><span class="line">……</span><br></pre></td></tr></table></figure></code></pre><p>  <img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle/hexo4000page.png" alt="" title="nodenpm"></p><h3 id="创建主题或fork主题框架"><a href="#创建主题或fork主题框架" class="headerlink" title="创建主题或fork主题框架"></a>创建主题或fork主题框架</h3><p>   <strong>方法1</strong>：在blog文件夹里面的themes文件里面clone【git如何克隆前面文章有】<br>   <code>https://github.com/wztlink1013/wztlink1013.github.io.git</code></p><p>   <strong>方法2</strong>：直接在GitHub网页上下载zip文件，然后再放到themes文件夹里面</p><h3 id="初级配置主题"><a href="#初级配置主题" class="headerlink" title="初级配置主题"></a>初级配置主题</h3><p>   以<a href="https://github.com/ZEROKISEKI/hexo-theme-gal" target="_blank" rel="noopener">【忧郁的弟弟gal】</a>和<a href="https://github.com/Molunerfinn/hexo-theme-melody" target="_blank" rel="noopener">【melody】</a>两个文档为主进行配置，其他的小细节谷歌/百度搜索解决</p><ul><li>在blog文件夹下下载相关npm插件  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">①npm install hexo-renderer-sass --save </span><br><span class="line">②npm install hexo-renderer-scss --save</span><br><span class="line">③npm install hexo-generator-json-content --save</span><br><span class="line">或</span><br><span class="line">cnpm install hexo-renderer-sass --save</span><br><span class="line">cnpm install hexo-renderer-scss --save</span><br><span class="line">或</span><br><span class="line">yarn add hexo-renderer-sass</span><br><span class="line">yarn add hexo-renderer-scss</span><br><span class="line">①②目的：将.scss样式文件渲染成最后的style.css文件</span><br></pre></td></tr></table></figure></li><li>站点文件_config.yml下添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  dateFormat: MM-DD</span><br><span class="line">  pages:</span><br><span class="line">    title: true</span><br><span class="line">    text: true</span><br><span class="line">    path: true</span><br><span class="line">    date: true</span><br><span class="line">    excerpt: true</span><br><span class="line">    preview: true</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    text: true</span><br><span class="line">    path: true</span><br><span class="line">    date: true</span><br><span class="line">    excerpt: true</span><br><span class="line">    tags: [&#123;</span><br><span class="line">      name: tag.name,</span><br><span class="line">      slug: tag.slug,</span><br><span class="line">      permalink: tag.permalink</span><br><span class="line">    &#125;]</span><br><span class="line">    preview: true</span><br></pre></td></tr></table></figure></li><li>设置两个必须页面（gal下题设设置了search、404这两个）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;search&quot;              &#x2F;&#x2F; 搜索功能的必须步骤</span><br><span class="line">hexo new page &quot;404&quot;                 &#x2F;&#x2F; 开启404页面</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories            &#x2F;&#x2F;分类</span><br><span class="line">hexo new page comment               &#x2F;&#x2F;留言板</span><br></pre></td></tr></table></figure></li></ul><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">常用命令：</span><br><span class="line">简写命令&#x3D;&gt;原有形式命令</span><br><span class="line">hexo n &quot;博客名称&quot;  &#x3D;&gt; hexo new &quot;博客名称&quot;   </span><br><span class="line">hexo p  &#x3D;&gt; hexo publish</span><br><span class="line">hexo g  &#x3D;&gt; hexo generate  #生成</span><br><span class="line">hexo s  &#x3D;&gt; hexo server  #启动服务预览</span><br><span class="line">hexo d  &#x3D;&gt; hexo deploy  #部署</span><br><span class="line">服务器相关命令：</span><br><span class="line">hexo server   #Hexo 会监视文件变动并自动更新，无须重启服务器。</span><br><span class="line">【预览：http:&#x2F;&#x2F;localhost:4000&#x2F;】</span><br><span class="line">hexo server -s   #静态模式</span><br><span class="line">hexo server -p 5000   #更改端口</span><br><span class="line">hexo server -i 192.168.1.1   #自定义IP</span><br><span class="line">【预览：http:&#x2F;&#x2F;localhost:4000&#x2F;】</span><br><span class="line">hexo clean   #清除缓存，网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g   #生成静态网页</span><br><span class="line">hexo d   #开始部署</span><br><span class="line"></span><br><span class="line">hexo deploy --message &quot;哈哈，hexo deploy --message 双引号内容就可以提交commit信息了&quot;</span><br><span class="line">【更新】</span><br><span class="line">1. 部署命令不能简写了，因为下载了豆瓣的相关插件，只能hexo deploy</span><br><span class="line">2. 将博客根目录源代码备份到git仓库中命令：hexo b或者hexo backup</span><br></pre></td></tr></table></figure></code></pre><h2 id="三、主题个性化设置"><a href="#三、主题个性化设置" class="headerlink" title="三、主题个性化设置"></a>三、主题个性化设置</h2><p>主要参考上述的两个文档<a href="https://github.com/ZEROKISEKI/hexo-theme-gal" target="_blank" rel="noopener">【忧郁的弟弟gal】</a>和<a href="https://github.com/Molunerfinn/hexo-theme-melody" target="_blank" rel="noopener">【melody】</a>，在此记录下自己的相关自定义配置</p><h3 id="博客logo【暂未设计】"><a href="#博客logo【暂未设计】" class="headerlink" title="博客logo【暂未设计】"></a>博客logo【暂未设计】</h3><h3 id="图片的处理【七牛云绑定问题】"><a href="#图片的处理【七牛云绑定问题】" class="headerlink" title="图片的处理【七牛云绑定问题】"></a>图片的处理【七牛云绑定问题】</h3><p>处理的目的就是通过链接方式减小源文件的渲染量，使网页打开速度更快</p><ul><li><p><a href="https://tinypng.com/" target="_blank" rel="noopener">图片压缩网站：tinypng</a>✓</p></li><li><p><a href="https://portal.qiniu.com/user/profile" target="_blank" rel="noopener">图片存储：七牛</a>✓</p></li><li><p><a href="https://cloudinary.com/" target="_blank" rel="noopener">图片存储：cloudinary</a></p><p>存完之后似乎给我删了，但是文章链接似乎一直有效……</p></li><li><p><a href="http://www.wailian.work/" target="_blank" rel="noopener">图片存储：外链工厂</a></p></li></ul><p>七牛：ghostsblog文件夹</p><blockquote><ul><li>background[1~9]：背景滑动图片jpg</li><li>preview[1~6]：文章随机预览图片jpg</li><li>touxiang：博客头像png</li></ul></blockquote><h3 id="各类社交化等图标处理"><a href="#各类社交化等图标处理" class="headerlink" title="各类社交化等图标处理"></a>各类社交化等图标处理</h3><ul><li><a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">图标icon中文网</a></li></ul><h3 id="评论和流量"><a href="#评论和流量" class="headerlink" title="评论和流量"></a>评论和流量</h3><ul><li><p><a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">Leancloud</a></p></li><li><p>valine评论系统</p><p>可以，可以想办法改改评论栏的界面</p></li><li><p>gitment：✓</p><p>将所有评论放在GitHub的某个仓库的issue，有一个很大的不足就是只能是github用户评论</p></li><li><p><a href="https://tongji.baidu.com/web/10000136056/overview/index" target="_blank" rel="noopener">百度统计</a></p><p>客流量后台相关数据</p><h3 id="隐藏指定文章插件"><a href="#隐藏指定文章插件" class="headerlink" title="隐藏指定文章插件"></a>隐藏指定文章插件</h3></li><li><p><a href="https://github.com/printempw/hexo-hide-posts/blob/master/README_ZH.md" target="_blank" rel="noopener">hexo-hide-posts</a></p></li></ul><h3 id="百度谷歌站点的开放"><a href="#百度谷歌站点的开放" class="headerlink" title="百度谷歌站点的开放"></a>百度谷歌站点的开放</h3><ul><li><p><a href="https://ziyuan.baidu.com/dashboard/index?site=https://wztlink1013.github.io/" target="_blank" rel="noopener">百度站点</a></p></li><li><p><a href="https://search.google.com/search-console/sitemaps?resource_id=https%3A%2F%2Fwztlink1013.github.io%2F" target="_blank" rel="noopener">谷歌站点</a></p></li><li><p>参考资料博客</p><ul><li><a href="https://maxwellyue.github.io/2016/08/07/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%B0%B7%E6%AD%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%88%B0%E8%87%AA%E5%B7%B1GitHub%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">如何让百度谷歌搜索道自己的网页</a></li><li><a href="https://hezhii.github.io/2017/08/baidu-collect-github/" target="_blank" rel="noopener">同上</a></li></ul></li><li><p>删掉blog目录下的public文件下的baidu，sitmap两个文件；index下的首行文件也删掉</p></li><li><p>在head.ejs中放了自动推送的例子，注意。url也换了com域名</p></li></ul><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><h3 id="添加文章目录"><a href="#添加文章目录" class="headerlink" title="添加文章目录"></a>添加文章目录</h3><p>写长篇博客文章的时候，甚至是经常要添加内容的文章时候，文章的确需要一个目录指引，但是该主题似乎并没有内置这些配置，但可以通过插件方式添加该模块 </p><ul><li>在博客文件夹下下载插件<code>npm install hexo-toc-dllcn --save</code>（注意这个版本是新的，不能下hexo-toc版本）</li><li>在博客根目录下添加配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mdtoc:</span><br><span class="line">maxdepth: 3</span><br><span class="line">class: toc</span><br><span class="line">decodeEntities: false</span><br><span class="line">anchor:</span><br><span class="line">  symbol: &#39;#&#39;</span><br><span class="line">  style: header-anchor</span><br></pre></td></tr></table></figure></li><li>以上具体参考<ul><li><a href="https://www.npmjs.com/package/hexo-toc-dllcn" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo-toc-dllcn</a></li><li><a href="https://github.com/KeiferJu/hexo-toc-dllcn" target="_blank" rel="noopener">hexo-toc-dllcn GitHub</a></li><li><a href="https://imys.net/20150514/hexo-toc.html" target="_blank" rel="noopener">https://imys.net/20150514/hexo-toc.html</a></li><li><a href="https://cloud.tencent.com/developer/article/1144737" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1144737</a></li></ul></li><li>另外：要先把根目录下的markdown渲染器删掉，然后下<code>hexo-renderer-markdown-it</code>具体<a href="https://github.com/hexojs/hexo-renderer-markdown-it" target="_blank" rel="noopener">参考</a></li><li>另外：以“#”或“##”为标题的时候（#的链接不能用，#的子标题##可以），标题内最好不要有特殊符号，自己总结就是，大小写不能同时又，括号好像也不行，总之尽量为中文最好，</li></ul><h3 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h3><ul><li><p><a href="https://tongji.baidu.com/web/homepage/index" target="_blank" rel="noopener">百度统计入口</a></p></li><li><p>将所提取的代码放到baidustatistic.ejs（新建）中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var _hmt &#x3D; _hmt || [];</span><br><span class="line">    (function() &#123;</span><br><span class="line">      var hm &#x3D; document.createElement(&quot;script&quot;);</span><br><span class="line">      hm.src &#x3D; &quot;https:&#x2F;&#x2F;hm.baidu.com&#x2F;hm.js?b6def8dfc52aa6afd36da773f206fe88&quot;;</span><br><span class="line">      var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0]; </span><br><span class="line">      s.parentNode.insertBefore(hm, s);</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>footer.ejs文件下添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.baidustatistic.enable)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&#39;baidustatistic&#39;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>站点主题配置文件下添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 百度统计</span><br><span class="line">baidustatistic:</span><br><span class="line">  enable: true</span><br><span class="line">  siteid: b6def8dfc52aa6afd36da773f206fe88</span><br></pre></td></tr></table></figure><p>最后回到百度入口验证即可</p></li><li><p>参考文章</p><ul><li><a href="https://www.voidking.com/dev-hexo-baidustatistic/" target="_blank" rel="noopener">参考博文1</a></li><li><a href="https://pengloo53.gitbooks.io/hexo/content/chapter2/4%20%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1.html" target="_blank" rel="noopener">参考博文2</a></li></ul></li></ul><h3 id="添加播放器"><a href="#添加播放器" class="headerlink" title="添加播放器"></a>添加播放器</h3><ul><li><p>一如既往，下个插件，<code>npm install --save hexo-tag-aplayer</code>（还是在博客文件夹目录下）</p></li><li><p>然后去网易音乐取自己想要的歌曲外链复制html代码</p></li><li><p>在sidebar.ejs文件添加到自己想要的位置即可</p></li><li><p>如果在文章中添加的话，同样原理</p></li><li><p>原理：利用了html中的iframe标签/</p></li><li><p>参考文章</p><ul><li><a href="https://www.zhyong.cn/posts/5d26/" target="_blank" rel="noopener">https://www.zhyong.cn/posts/5d26/</a></li><li><a href="https://deletelibrary.com/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90.html" target="_blank" rel="noopener">https://deletelibrary.com/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90.html</a></li></ul></li></ul><h3 id="文章热度统计"><a href="#文章热度统计" class="headerlink" title="文章热度统计"></a>文章热度统计</h3><ul><li>配置如wiki上文档配置即可</li><li>补充：一定要新建一个class，而且命名一定要为<code>Counter</code></li><li><a href="https://leaferx.online/2018/02/11/lc-security/![:012:](https://wztlink1013.com/imgs/smilies/12.png)" target="_blank" rel="noopener">leancloud详细部署</a></li></ul><h2 id="四、BLOG2-0计划"><a href="#四、BLOG2-0计划" class="headerlink" title="四、BLOG2.0计划"></a>四、BLOG2.0计划</h2><h3 id="参考优秀blog"><a href="#参考优秀blog" class="headerlink" title="参考优秀blog"></a>参考优秀blog</h3><!-- - [不错的源博客](https://mxclub.github.io/) --><!-- - [同时搭建两个GitHub博客](https://www.itrhx.com/) --><ul><li><a href="http://sora1.coding.me/" target="_blank" rel="noopener">喵绪~</a></li></ul><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><ul><li>绑定且指向github.io之后，马上提交站点地图<ul><li>百度站点地图：百度屏蔽了GitHub，托管到coding上，等coding和腾讯更新完……</li><li>谷歌站点地图<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3></li></ul></li><li>缘由：github网络不稳定，体验差，迁移到服务器<!-- - 买服务器有什么用？   --></li><li>阿里云</li><li>云服务器<h3 id="备案服务号的申请"><a href="#备案服务号的申请" class="headerlink" title="备案服务号的申请"></a>备案服务号的申请</h3></li><li><a href="https://beian.aliyun.com/order/productVerify.htm#/?_k=2387t8" target="_blank" rel="noopener">https://beian.aliyun.com/order/productVerify.htm#/?_k=2387t8</a></li><li><a href="https://blog.csdn.net/weixin_34417635/article/details/89651872" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34417635/article/details/89651872</a><h3 id="百度谷歌站点和codinggithub双线部署【coding不能注册！waiting···】"><a href="#百度谷歌站点和codinggithub双线部署【coding不能注册！waiting···】" class="headerlink" title="百度谷歌站点和codinggithub双线部署【coding不能注册！waiting···】"></a>百度谷歌站点和codinggithub双线部署【coding不能注册！waiting···】</h3></li><li><a href="https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/" target="_blank" rel="noopener">https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/</a><h3 id="添加豆瓣【没用】"><a href="#添加豆瓣【没用】" class="headerlink" title="添加豆瓣【没用】"></a>添加豆瓣【没用】</h3></li><li>读书、电影</li><li>要自定义两个单独页面<h3 id="双github博客运行【X】"><a href="#双github博客运行【X】" class="headerlink" title="双github博客运行【X】"></a>双github博客运行【X】</h3></li></ul><h3 id="利用github做一个图床【未成功】"><a href="#利用github做一个图床【未成功】" class="headerlink" title="利用github做一个图床【未成功】"></a>利用github做一个图床【未成功】</h3><ul><li><a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">picgo</a></li><li>问题已解决，但是有点小问题，链接点进去是无效链接，之后再试试！</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://raw.githubusercontent.com/ImgHsoting/master/blogimgs/efasf.jpg" alt=""></p><ul><li>展示不出来</li></ul><h3 id="加快网页访问速度"><a href="#加快网页访问速度" class="headerlink" title="加快网页访问速度"></a>加快网页访问速度</h3><p>使用一个 JS 脚本实现网站预加载，提升页面加载速度：instant.page</p><h3 id="使用来必力评论系统"><a href="#使用来必力评论系统" class="headerlink" title="使用来必力评论系统"></a>使用来必力评论系统</h3><p>自带，comments.ejs文件中，具体看来必应官网</p><h2 id="20200424"><a href="#20200424" class="headerlink" title="20200424"></a>20200424</h2><h3 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h3><p>github+hexo+coding 部署以及从中的一些操作的全过程还没有全部记录，等这学期学完，自己要好好总结一下</p><!-- 现总结一下今天的sao操作 --><h3 id="gitbook"><a href="#gitbook" class="headerlink" title="gitbook"></a>gitbook</h3><p>对于hexo写文章，的确是一个不错的选择，但是平时的零碎知识总是不能很好的记录下来，之前的博客园，的确感觉还行，但是还是麻烦，加上，博客园的markdown界面，着实不能很好地接受，</p><p>gitbook首先要fanqiang注册一个账号（谷歌或者github），这里面的账号崩塌，以后再调侃吧~</p><p>注册好之后，要连接github仓库，由于自己的账号在崩塌的时候出故障了，所以无奈只能向其他的方法了，突然想到组织，新建一个组织，最高权限管理员为wztlink1013，其次邀请wzutao进组织并且给其仅次于最高管理员权限，然后再让gitbook绑定wzutao的仓库，这样我的终端对原仓库的推送提交丝毫不妨碍文件的推送，nice！！这样的目的就是，只要仓库的文件变动，gitbook那方面自动更新。</p><p>下面就是在电脑终端的配置，用npm下载gitbook，就和搭建hexo差不多，更为简单</p><p>我将gitbook文件夹放在根文件夹目录里面，这样的好处就是可以随同博客源文件一起利用backup备份到github备份厂库上，</p><p>平时写文章，一个可以直接在电脑上写，然后直接按照git push情况推送至仓库（要注意要先pull哦）</p><p>还有就是直接在网页点击github按钮，进入仓库，在线编辑，就比如上机情况记录零碎知识，</p><p>域名的解析重定向<a href="https://mybook.wztlink1013.com阿里云域名解析" target="_blank" rel="noopener">https://mybook.wztlink1013.com阿里云域名解析</a></p><p>在wztlink1013.github.io仓库中source文件夹里面新建一个文件夹gitbook， <del>不定时将源文件夹里面的gitbook里面的_book文件夹里面的文件放进去，</del> 其实这样的话，意义就在于有可能会引用某个网页的知识，（同时注意，这样做要在根文配置文件里面注释那个source文件夹里面的gitbook文件夹，让其跳过渲染。<a href="https://hgbjb.github.io/posts/8a3b6b80.html" target="_blank" rel="noopener">参考了</a>）</p><p><strong>临时更新、上面画删除线的方法可以摒弃之，有一个更好的方法，就是在根目录下的gitbook文件夹里面进行<code>gitbook serve</code>进行命令升级，渲染html文件到指定文件夹里面命令为<code>gitbook serve ./ ../source/gitbook</code>（关于相对路径的上一级文件读取方式<a href="https://blog.csdn.net/dahuzix/article/details/9276549" target="_blank" rel="noopener">https://blog.csdn.net/dahuzix/article/details/9276549</a>）</strong></p><p><strong>那么小总结一下就是，或许根本就不需要gitbook的域名使用，直接渲染到source文件夹里面即可（根目录配置文件，跳过即可），按照这个道理，可以创建无数个类似子节点【写一个js代码，用来美化这个文件夹，虽然跳过渲染，但是如果文件夹里里面index周边存在js代码，可能还是会改善index的页面风格，】</strong></p><p>不过今天还是学到了gh-pages相关知识，每一个项目都是可以直接跟着wztlink1013.github.io的二级域名，只是不知道会不会和域名解析矛盾<del>以后尝尝鲜</del><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Using_Github_pages" target="_blank" rel="noopener">参考</a></p><p>还有，有空搭建一个ssr，今天算是折了~</p><hr><p>单方面觉得阮一峰的网站就是这样，首先是<a href="http://www.wztlink1013.com的index是一个多级路口的概念，然后每个路口都是一个单独的文件夹，不过这里要注意如果要考虑SEO的画，貌似就不能跳过该文件不渲染，二是利用，每篇markdown最上面的---内容---来跳过，以后尝尝鲜" target="_blank" rel="noopener">www.wztlink1013.com的index是一个多级路口的概念，然后每个路口都是一个单独的文件夹，不过这里要注意如果要考虑SEO的画，貌似就不能跳过该文件不渲染，二是利用，每篇markdown最上面的---内容---来跳过，以后尝尝鲜</a></p><hr><p>那按照这个道理，下载相关gitbook插件是不是就可以直接在渲染后的改进（这轮子造的nice啊）</p><p>gitbook根目录下创建一个新文件book.json，然后在里面写入一些配置，然后再输入命令<code>gitbook install</code>，然后预览<code>gitbook serve ./ ../source/gitbook</code></p><p>需要注意，插件中有一个生成站点地图的插件，以后再百度站点地图和谷歌站点地图中，追加这个书籍的站点地图！</p><p>另外，应该是每建成一本书就会进行以上相应的所有操作。</p><h3 id="hexo-auto-category分类优化插件"><a href="#hexo-auto-category分类优化插件" class="headerlink" title="hexo-auto-category分类优化插件"></a>hexo-auto-category分类优化插件</h3><p>自动生成目录插件，最方便的使用就是在_post文件夹里面的知识目录文件夹下，直接新建md文件即可，有以下需要了解</p><ul><li>新建md文件，什么都不加，直接写文章也可以</li><li>貌似里面的categories格式强制为以下格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Hexo</span><br></pre></td></tr></table></figure></li><li>【针对知识相关的博客】新建md文档，里面什么都不加</li><li>【针对教程之类的博客】新建md文档，里面不加日期、目录、标题（如果想要自己更好的标题就加）其他的按需加上</li></ul><!--stackedit_data:eyJoaXN0b3J5IjpbLTIwNzI1OTM5NjVdfQ==-->]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Volantis模块化组件——meta和widget</title>
      <link href="/2020/01/04/Hexo/Hexo-Volantis%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2020/01/04/Hexo/Hexo-Volantis%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><h3 id="览表"><a href="#览表" class="headerlink" title="览表"></a>览表</h3><p>front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量。更多请见 Hexo 官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">#front-matter</a></p><table><thead><tr><th>字段</th><th>含义</th><th>值类型</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>layout</td><td>布局模版</td><td>String</td><td>-</td><td>有list、page、post三种</td></tr><tr><td>title</td><td>页面标题</td><td>String</td><td>-</td><td></td></tr><tr><td>seo_title</td><td>网页标题</td><td>String</td><td>page.title</td><td>浏览器栏显示的</td></tr><tr><td>short_title</td><td>页面标题</td><td>String</td><td>page.title</td><td>在group列表中显示</td></tr><tr><td>date</td><td>创建时间</td><td>Date</td><td>文件创建时间</td><td></td></tr><tr><td>updated</td><td>更新日期</td><td>Date</td><td>文件修改时间</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td>String</td><td>-</td><td>一般用于转载文章【title: [转]XXX】【然后加一张图片】</td></tr><tr><td>music</td><td>内部音乐控件</td><td>[Object]</td><td>-</td><td>【三个必选参数】<a href="https://aplayer\.js\.org/\#/zh\-Hans/" target="_blank" rel="noopener">https://aplayer\.js\.org/\#/zh\-Hans/</a></td></tr><tr><td>robots</td><td>robots</td><td>String</td><td>-</td><td>【？？？】</td></tr><tr><td>keywords</td><td>页面关键词</td><td>String</td><td>-</td><td></td></tr><tr><td>description</td><td>页面描述、摘要</td><td>String</td><td>-</td><td></td></tr><tr><td>cover</td><td>是否显示封面</td><td>Bool</td><td>true</td><td></td></tr><tr><td>meta</td><td>文章或页面的meta信息</td><td>Bool, Array</td><td>theme.layout.*.meta</td><td>【暂时这么多】title，author，date,updated,category,top,counter,wordcount,tags,share,btns,</td></tr><tr><td>sidebar</td><td>页面侧边栏</td><td>Bool, Array</td><td>theme.layout.*.sidebar</td><td>【自定义设计】  - blogger   - xiaoheiban   - donate   - list_essay   - references   - related_repos   - dao_hang   - page_1   - group-1   - copyright   - related_posts   - tagcloud   - category   - toc</td></tr><tr><td>body</td><td>页面主体元素</td><td>Array</td><td>theme.layout.on_page.body</td><td>【默认[article, comments]】【自定义[article, related_posts, comments]】</td></tr><tr><td>mathjax</td><td>是否渲染公式</td><td>Bool, String</td><td>false</td><td></td></tr><tr><td>thumbnail</td><td>缩略图</td><td>String</td><td>false</td><td>【thumbnail: <a href="https://wztlink1013\.coding\.net/p/figure/d/figure/git/raw/master/20200519115134\.png】" target="_blank" rel="noopener">https://wztlink1013\.coding\.net/p/figure/d/figure/git/raw/master/20200519115134\.png】</a></td></tr><tr><td>icons</td><td>图标</td><td>Array</td><td>[]</td><td>【icons: [fas fa-fire red, fas fa-star green]归档页面显示，参数red / blue / green / yellow / orange / theme / accent】</td></tr></tbody></table><h3 id="layout-post"><a href="#layout-post" class="headerlink" title="layout:post"></a><strong>layout:post</strong></h3><p>时特有的字段：</p><table><thead><tr><th align="left">字段</th><th align="left">含义</th><th align="left">值类型</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">author</td><td align="left">文章作者</td><td align="left">[Object]</td><td align="left">config.author</td></tr><tr><td align="left">categories</td><td align="left">分类</td><td align="left">String, Array</td><td align="left">-</td></tr><tr><td align="left">tags</td><td align="left">标签</td><td align="left">String, Array</td><td align="left">-</td></tr><tr><td align="left">toc</td><td align="left">是否生成目录</td><td align="left">Bool</td><td align="left">true</td></tr><tr><td align="left">top</td><td align="left">是否置顶</td><td align="left">Bool</td><td align="left">false</td></tr></tbody></table><h3 id="author"><a href="#author" class="headerlink" title="author"></a><strong>author</strong></h3><table><thead><tr><th align="left">字段</th><th align="left">含义</th><th align="left">值类型</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">作者名</td><td align="left">String</td><td align="left">config.author</td></tr><tr><td align="left">avatar</td><td align="left">头像</td><td align="left">String</td><td align="left">config.avatar</td></tr><tr><td align="left">url</td><td align="left">链接</td><td align="left">String</td><td align="left">config.url</td></tr></tbody></table><h3 id="music"><a href="#music" class="headerlink" title="music"></a><strong>music</strong></h3><table><thead><tr><th align="left">字段</th><th align="left">是否必须</th><th align="left">值类型</th></tr></thead><tbody><tr><td align="left">server</td><td align="left">是</td><td align="left">netease, tencent, kugou, xiami, baidu</td></tr><tr><td align="left">type</td><td align="left">是</td><td align="left">song, playlist, album, search, artist</td></tr><tr><td align="left">id</td><td align="left">是</td><td align="left">song id / playlist id / album id / search keyword</td></tr></tbody></table><h3 id="特定widget参数"><a href="#特定widget参数" class="headerlink" title="特定widget参数"></a>特定widget参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pid: haha</span><br><span class="line"></span><br><span class="line">references:</span><br><span class="line">  - name: Apple Developer Documentation</span><br><span class="line">    url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;</span><br><span class="line">  - name: Apple Developer Documentation</span><br><span class="line">    url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;</span><br><span class="line">related_repos:</span><br><span class="line">  - name: Apple Developer Documentation</span><br><span class="line">    url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">group: group-1</span><br><span class="line">order: 16</span><br></pre></td></tr></table></figure><h3 id="标题居中"><a href="#标题居中" class="headerlink" title="标题居中"></a>标题居中</h3><p>让meta只保留下面一个参数，则标题居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">meta:</span><br><span class="line">  header: [centertitle]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 基本信息</span><br><span class="line">title: Hexo-Volantis-meta-widget测试</span><br><span class="line">categories: [Hexo]</span><br><span class="line">tags: [Hexo]</span><br><span class="line">date: 2020-01-04 21:23:23</span><br><span class="line">description: 这是测试主题各个属性文章摘要</span><br><span class="line"></span><br><span class="line">meta:</span><br><span class="line">  header: [title,author,category,date,wordcount,counter,top]</span><br><span class="line">  footer: [updated,tags,btns,share]</span><br><span class="line">  # 如果是page页面的话，添加这个可以显示，post的设置在_data里面的layput.yml里面</span><br><span class="line">  article_footer: [references,related_repos,donate,related_posts,copyright] </span><br><span class="line"></span><br><span class="line">sidebar: [blogger,xiaoheiban,map,donate,list_essay,dao_hang,page_tongyong,group-Hexo,related_posts,tagcloud,category,toc]</span><br><span class="line"></span><br><span class="line"># 参考资料 &amp; 链接仓库</span><br><span class="line">references:</span><br><span class="line">- name: 参考资料1</span><br><span class="line">  url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;</span><br><span class="line">- name: 参考资料2</span><br><span class="line">  url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;</span><br><span class="line">related_repos:</span><br><span class="line">- name: 本项目GitHub仓库</span><br><span class="line">  url: &#39;https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;&#39;</span><br><span class="line"># 系列文章索引</span><br><span class="line">group: group-Hexo </span><br><span class="line">order: 16</span><br><span class="line"># 通用页面</span><br><span class="line">pid: tongyong</span><br><span class="line"># 显示的页脚按钮</span><br><span class="line">btns:</span><br><span class="line">  repo: &#39;https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#39;</span><br><span class="line">  bug: &#39;https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;&#39;</span><br><span class="line">  doubt: &#39;https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;&#39;</span><br><span class="line">  idea: &#39;https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;&#39;</span><br><span class="line"># 侧边小图片</span><br><span class="line">thumbnail: https:&#x2F;&#x2F;wztlink1013.coding.net&#x2F;p&#x2F;figure&#x2F;d&#x2F;figure&#x2F;git&#x2F;raw&#x2F;master&#x2F;20200519115134.png</span><br><span class="line"># 侧边音乐按钮</span><br><span class="line">music:</span><br><span class="line">  server: netease   # netease, tencent, kugou, xiami, baidu</span><br><span class="line">  type: song        # song, playlist, album, search, artist</span><br><span class="line">  id: 16846091      # song id &#x2F; playlist id &#x2F; album id &#x2F; search keyword</span><br><span class="line"># 是否显示封面</span><br><span class="line">cover: true</span><br></pre></td></tr></table></figure><h2 id="meta库"><a href="#meta库" class="headerlink" title="meta库"></a>meta库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meta:</span><br><span class="line">  header: [title,author,category,date,wordcount,counter,top]</span><br></pre></td></tr></table></figure><img src='https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712150118.png' alt='meta中的header部位' style='width:400px'><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">footer: [updated,tags,btns,share]</span><br></pre></td></tr></table></figure><img src='https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712150136.png' alt='meta中的footer部位' style='width:400px'><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">article_footer: [copyright,donate,related_posts]</span><br></pre></td></tr></table></figure><img src='https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712170515.png' alt='meta中的article_footer部位' style='width:400px'><h2 id="widget库"><a href="#widget库" class="headerlink" title="widget库"></a>widget库</h2><h3 id="主题配置中widget"><a href="#主题配置中widget" class="headerlink" title="主题配置中widget"></a>主题配置中widget</h3><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712145645.png" alt="博主信息blogger"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712145742.png" alt="标签云tagcloud"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712145813.png" alt="文章分类category"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712145851.png" alt="文章目录toc"></p>            </div><h3 id="text小黑板访客地图"><a href="#text小黑板访客地图" class="headerlink" title="text小黑板访客地图"></a>text小黑板访客地图</h3><blockquote><p>基本上放在首页</p></blockquote><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712161653.png" alt="小黑板"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712162145.png" alt="访客地图"></p>            </div><h3 id="qrcode二维码-图片展示"><a href="#qrcode二维码-图片展示" class="headerlink" title="qrcode二维码/图片展示"></a>qrcode二维码/图片展示</h3><blockquote><p>页脚可以显示；sidebar显示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712162401.png" alt=""></p><h3 id="list侧边栏列表"><a href="#list侧边栏列表" class="headerlink" title="list侧边栏列表"></a>list侧边栏列表</h3><blockquote><p>“文集”</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712162441.png" alt=""></p><h3 id="references参考资料-amp-相关GitHub仓库"><a href="#references参考资料-amp-相关GitHub仓库" class="headerlink" title="references参考资料 &amp; 相关GitHub仓库"></a>references参考资料 &amp; 相关GitHub仓库</h3><blockquote><p>文章脚步；sidebar部位</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712162544.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712162612.png" alt=""></p><h3 id="group系列文章"><a href="#group系列文章" class="headerlink" title="group系列文章"></a>group系列文章</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712162929.png" alt=""></p><h3 id="grid通用导航"><a href="#grid通用导航" class="headerlink" title="grid通用导航"></a>grid通用导航</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712163034.png" alt=""></p><h3 id="page通用页面"><a href="#page通用页面" class="headerlink" title="page通用页面"></a>page通用页面</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712163213.png" alt=""></p><h3 id="copyright文章版权"><a href="#copyright文章版权" class="headerlink" title="copyright文章版权"></a>copyright文章版权</h3><blockquote><p>文章页脚、sidebar部位（基本不用）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712163251.png" alt=""></p><h3 id="related-posts相关文章"><a href="#related-posts相关文章" class="headerlink" title="related_posts相关文章"></a>related_posts相关文章</h3><blockquote><p>文章页脚、sidebar部位</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/ImgHsoting/pic1/20200712163311.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/04/Hexo/HelloWorld/"/>
      <url>/2020/01/04/Hexo/HelloWorld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404 Not Found</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<p class='p center huge'>404</p><p class='p center bold'>很抱歉，您访问的页面不存在</p><p class='p center small'>由于本人原主域名迁移至二级域名，来访者可以先在本站顶部搜索你想要文章的关键词，或者进入文章分类/归档中查找你想要的文章。有任何疑惑，欢迎在下方留言告知！</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/go.html"/>
      <url>/go.html</url>
      
        <content type="html"><![CDATA[<html lang="zh"> <head>   <meta http-equiv="X-UA-Compatible" content="IE=edge" />  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />  <meta name="robots" content="noindex, nofollow" />  <title>页面加载中，请稍候...</title>  <style type="text/css">body{background:#555}.loading{animation:fadein 2s}@keyframes fadein{from{opacity:0}to{opacity:1}}.spinner-wrapper{position:absolute;top:0;left:0;z-index:300;height:100%;min-width:100%;min-height:100%;background:rgba(255,255,255,.93)}.spinner-text{position:absolute;top:45%;left:50%;margin-left:-100px;margin-top:2px;color:#000;letter-spacing:1px;font-size:20px;font-family:Arial}.spinner{position:absolute;top:45%;left:50%;display:block;margin-left:-160px;width:1px;height:1px;border:20px solid rgba(255,0,0,1);border-radius:50px;border-left-color:transparent;border-right-color:transparent;animation:spin 1.5s infinite}@keyframes spin{0%,100%{transform:rotate(0)scale(1)}50%{transform:rotate(720deg)scale(.6)}}</style>  <script src="//cdn.jsdelivr.net/npm/js-base64/base64.min.js"></script>  <script type="text/javascript">const host=window.location.host;function GetQueryString(name){var reg=new RegExp("(^|&)"+name+"=([^&]*)(&|$)","i");var r=window.location.search.substr(1).match(reg);return r?decodeURI(r[2]):null}var jump_url=GetQueryString('');var UrlReg='^((http|https|thunder|qqdl|ed2k|Flashget|qbrowser|ftp|rtsp|mms)://)';if(!jump_url||!jump_url.match(UrlReg)){document.title='参数错误，正在返回首页...';jump_url=location.origin}setTimeout(function link_jump(){ location.href=jump_url},1000);setTimeout(function(){window.opener=null;window.close()},30000);</script> <link rel="alternate" href="/atom.xml" title="尼采般地抒情" type="application/atom+xml"></head> <body>  <div class="loading">   <div class="spinner-wrapper">    <span class="spinner-text">页面加载中，请稍候...</span>    <span class="spinner"></span>   </div>  </div>  <script>            window.imageLazyLoadSetting = {                isSPA: true,                processImages: null,            };        </script><script>window.addEventListener("load",function(){var t=/\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll("img[data-original]")).forEach(function(a){var e=a.parentNode;"A"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});</script><script>!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll("img[data-original]"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll("img[data-original]")));for(var t,e,a=0;a<r.length;a++)t=r[a],e=void 0,0<=(e=t.getBoundingClientRect()).bottom&&0<=e.left&&e.top<=(n.innerHeight||document.documentElement.clientHeight)&&function(){var t,e,n,i,o=r[a];t=o,e=function(){r=r.filter(function(t){return o!==t})},n=new Image,i=t.getAttribute("data-original"),n.onload=function(){t.src=i,e&&e()},n.src=i}()}o(),n.addEventListener("scroll",function(){var t,e;t=o,e=n,clearTimeout(t.tId),t.tId=setTimeout(function(){t.call(e)},500)})}(this);</script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- ## <center><b><font color="#9f29e3">雨き声残響</font></b></center> --><h2 id="尼采般地抒情"><a href="#尼采般地抒情" class="headerlink" title="尼采般地抒情"></a><center><b><font color="#9f29e3">尼采般地抒情</font></b></center></h2><!-- <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%; ">    <iframe src="//player.bilibili.com/player.html?aid=412747690&bvid=BV1XV411o79H&cid=176296873&page=1&danmaku=0&autoplay=true" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" autoplay = true style="position: absolute; width: 500px; height: 200px; left: 0; top: 0;" >    </iframe></div> --><blockquote><p>何以  <font color="#9d1be3">尼采般地抒情</font>  名</p></blockquote><!-- > 成长道路中，很重要的一个人或许知道、 --><img src='https://cdn.jsdelivr.net/gh/wztlink1013/CDN/Pictures/blog_name.png' alt='芳华幸勿谢，嘉树欲相依' style='width:300px'><blockquote><p><font color="#387df5">渐渐地，我也开始相信那些书本中美好的抒情，更隔蓬山一万重，一切都是为了更好的明天！</font></p></blockquote><div class="gallery ">              <p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle38/a8cb98b7eedf0869f22db611dcdb856.jpg" alt="小猫咪"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle43/20200407090647.png" alt="小猫猫"><br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogarticle38/afeb3b7563337bb81c7dc937984521f.jpg" alt="猫咪咪"></p>            </div><p>关于我···</p><img src='https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogimgs/1-160216115019.jpg' alt='进击的灵魂' style='width:300px'><blockquote><p>什么都无法舍弃的人，什么都改变不了</p><footer><strong>阿尔敏·阿诺德</strong><cite>《进击的巨人》</cite></footer></blockquote><p>[有空再补充···]</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>相知无远近</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="💙-💙"><a href="#💙-💙" class="headerlink" title="💙   💙"></a><center><b><strong>💙</strong><span class='p red'>申</span> <span class='p yellow'>请</span> <span class='p green'>友</span> <span class='p blue'>链</span><strong>💙</strong></b></center></h1><div class="tabs" id="span-p"><ul class="nav-tabs"><li class="tab active"><a href="#span-p-1">必选参数</a></li><li class="tab"><a href="#span-p-2">可选参数</a></li><li class="tab"><a href="#span-p-3">友链示例</a></li><li class="tab"><a href="#span-p-4">示例效果</a></li></ul><div class="tab-content"><div class="tab-pane active" id="span-p-1"><div class="note quote blue">            <p><span class='p green h4'>网站名称：</span><span class='p blue'>尼采般地抒情</span></p><p><span class='p green h4'>个人主页：</span><a href="https://wztlink1013.com/" target="_blank" rel="noopener">https://wztlink1013.com/</a></p><p><span class='p green h4'>个人头像：</span><a href="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg</a></p>          </div></div><div class="tab-pane" id="span-p-2"><div class="note quote blue">            <p><span class='p green h4'>博客标签：</span><span class='p blue'>总结技术；记录生活</span></p><p><span class='p green h4'>博客简介：</span><span class='p blue'>用一种简单的方式抒情</span></p><p><span class='p green h4'>卡片颜色：</span> <font color="#CC99FF">#CC99FF</font></p><p><span class='p green h4'>文字颜色：</span> <font color="#040963">#040963</font></p>          </div></div><div class="tab-pane" id="span-p-3"><div class="note quote blue">            <p><span class='p green h4'>网站名称：</span><span class='p blue'>尼采般地抒情</span></p><p><span class='p green h4'>个人主页：</span><a href="https://wztlink1013.com/" target="_blank" rel="noopener">https://wztlink1013.com/</a></p><p><span class='p green h4'>个人头像：</span><a href="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg</a></p><p><span class='p green h4'>博客标签：</span><span class='p blue'>总结技术；记录生活</span></p><p><span class='p green h4'>博客简介：</span><span class='p blue'>用一种简单的方式抒情</span></p><p><span class='p green h4'>卡片颜色：</span> <font color="#CC99FF">#CC99FF</font></p><p><span class='p green h4'>文字颜色：</span> <font color="#040963">#040963</font></p>          </div></div><div class="tab-pane" id="span-p-4"><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" data-original="https://gitee.com/wztlink1013/figuregitee/raw/master/figure1/20200521105410.png" alt=""></p></div></div></div><!-- <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%; ">    <iframe src="//player.bilibili.com/player.html?aid=76141758&bvid=BV1VJ411m7re&cid=130252214&page=1&danmaku=0&autoplay=true" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" autoplay = true style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" >    </iframe></div> --><h1 id="💙-💙-1"><a href="#💙-💙-1" class="headerlink" title="💙  💙"></a><center><b><strong>💙</strong><span class='p blue'>Blogger</span> <span class='p green'>blog</span> <span class='p red'>Information</span><strong>💙</strong></b></center></h1><div class="note quote blue">            <p><span class='p green h4'>网站名称：</span><span class='p blue'>尼采般地抒情</span></p><p><span class='p green h4'>个人主页：</span><a href="https://wztlink1013.com/" target="_blank" rel="noopener">https://wztlink1013.com/</a></p><p><span class='p green h4'>个人头像：</span><a href="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg</a></p><p><span class='p green h4'>博客简介：</span><span class='p blue'>总结技术，记录生活</span></p>          </div><p class='p center logo large'>Statement</p><div class="note quote green"><p>若申请友链，请先加本站为友链💖</p></div><div class="note warning red"><p>关于期间贵站成为死链或者单向友链，几天后（或者更长时间）删除💔。相逢既是缘，本站不轻易删除已交换的友链💙</p></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>尼采般地随笔抒情、</title>
      <link href="/essay/index.html"/>
      <url>/essay/index.html</url>
      
        <content type="html"><![CDATA[<script src="https://libs.baidu.com/jquery/2.0.0/jquery.min.js"></script><body>    <script>    var img="https://cdn.jsdelivr.net/gh/wztlink1013/figure/blogbase/touxiang.jpg";    var appID="fHEfdwbbjEMQqFGlCOeLktrO-MdYXbMMI";    var appKEY="Q0M7z93ovXsmj4bB9diYYxz1";    var per="15";    var username="ghosts";    var placeholder1="山里偷得半日的闲、搁这儿 ~ ~" ;     var placeholder2="code";      var bgimg = "https://cdn.jsdelivr.net/gh/wztlink1013/CDN@1.9/Pictures/blogbackground/giffengye.gif";     </script>    <div id="artitalk_main"></div>    <script type="text/javascript" src="https://unpkg.com/artitalk"></script>    <!-- 自定义样式 -->    <style>      .cbp_tmtimeline>li:nth-child(odd) .cbp_tmlabel {        background: url("https://cdn.jsdelivr.net/gh/wztlink1013/CDN@1.9/Pictures/blogbackground/giffengye.gif") 0% 0% / cover;      }      .cbp_tmtimeline>li .cbp_tmlabel {        background: url("https://cdn.jsdelivr.net/gh/wztlink1013/CDN@1.9/Pictures/blogbackground/giffengye.gif") 0% 0% / cover;      }      .cbp_tmtimeline>li:nth-child(odd) .cbp_tmlabel:after {        border-right-color:  #6dd0f2      }      .cbp_tmtimeline>li .cbp_tmlabel:after {        border-right-color:  #f59abe      }      .button {        background: '#48abf7' 0% 0% / cover;      }    </style>    <!-- 自定义样式.end --><script>            window.imageLazyLoadSetting = {                isSPA: true,                processImages: null,            };        </script><script>window.addEventListener("load",function(){var t=/\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll("img[data-original]")).forEach(function(a){var e=a.parentNode;"A"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});</script><script>!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll("img[data-original]"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll("img[data-original]")));for(var t,e,a=0;a<r.length;a++)t=r[a],e=void 0,0<=(e=t.getBoundingClientRect()).bottom&&0<=e.left&&e.top<=(n.innerHeight||document.documentElement.clientHeight)&&function(){var t,e,n,i,o=r[a];t=o,e=function(){r=r.filter(function(t){return o!==t})},n=new Image,i=t.getAttribute("data-original"),n.onload=function(){t.src=i,e&&e()},n.src=i}()}o(),n.addEventListener("scroll",function(){var t,e;t=o,e=n,clearTimeout(t.tId),t.tId=setTimeout(function(){t.call(e)},500)})}(this);</script></body>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/mylist/index.html"/>
      <url>/mylist/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>projects</title>
      <link href="/projects/index.html"/>
      <url>/projects/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="💙所写项目💙"><a href="#💙所写项目💙" class="headerlink" title="💙所写项目💙"></a><center><strong>💙所写项目💙</strong></center></h1><br><h2 id="敬请期待！"><a href="#敬请期待！" class="headerlink" title="敬请期待！"></a><center><b><font color="#9d1be3">敬请期待！</font></b></center></h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>search</title>
      <link href="/search/index.html"/>
      <url>/search/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
